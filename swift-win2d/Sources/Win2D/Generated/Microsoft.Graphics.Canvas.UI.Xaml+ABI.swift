// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WinAppSDK
@_spi(WinRTInternal) @_spi(WinRTImplements) import WinUI
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl: WindowsFoundation.IID {
    .init(Data1: 0x9BD47D0D, Data2: 0xD57D, Data3: 0x43B7, Data4: ( 0x82,0xCB,0x48,0x9C,0xC5,0x66,0xE8,0x87 ))// 9BD47D0D-D57D-43B7-82CB-489CC566E887
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xBC01FF4D, Data2: 0xFF6C, Data3: 0x4D4D, Data4: ( 0xA9,0xE9,0x8E,0xEB,0x21,0x39,0xF2,0x3F ))// BC01FF4D-FF6C-4D4D-A9E9-8EEB2139F23F
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory: WindowsFoundation.IID {
    .init(Data1: 0xC0C8FDAC, Data2: 0x0DFC, Data3: 0x4E18, Data4: ( 0xA6,0xE9,0x9E,0xF7,0xDC,0x82,0xBC,0xC2 ))// C0C8FDAC-0DFC-4E18-A6E9-9EF7DC82BCC2
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xA96B2B2A, Data2: 0x0C6E, Data3: 0x4AA8, Data4: ( 0x92,0x5B,0x71,0x37,0x26,0x3B,0x4E,0x44 ))// A96B2B2A-0C6E-4AA8-925B-7137263B4E44
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory: WindowsFoundation.IID {
    .init(Data1: 0x766F4867, Data2: 0xB22A, Data3: 0x464B, Data4: ( 0x89,0xB1,0x0D,0xA6,0xAB,0x62,0xBE,0x68 ))// 766F4867-B22A-464B-89B1-0DA6AB62BE68
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl: WindowsFoundation.IID {
    .init(Data1: 0xF006E06D, Data2: 0x79DB, Data3: 0x484F, Data4: ( 0xB8,0x98,0x47,0x9C,0xF0,0x69,0xC0,0xF5 ))// F006E06D-79DB-484F-B898-479CF069C0F5
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xFB86169F, Data2: 0x25D4, Data3: 0x4551, Data4: ( 0xBD,0x8F,0x21,0x4B,0xEA,0xF0,0xAC,0x24 ))// FB86169F-25D4-4551-BD8F-214BEAF0AC24
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory: WindowsFoundation.IID {
    .init(Data1: 0x7299D72C, Data2: 0xF8E4, Data3: 0x4A2F, Data4: ( 0x9E,0x30,0x7C,0xDF,0xCC,0xF3,0x1C,0x44 ))// 7299D72C-F8E4-4A2F-9E30-7CDFCCF31C44
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource: WindowsFoundation.IID {
    .init(Data1: 0x3C35E87A, Data2: 0xE881, Data3: 0x4F44, Data4: ( 0xB0,0xD1,0x55,0x14,0x13,0xAE,0xC6,0x6D ))// 3C35E87A-E881-4F44-B0D1-551413AEC66D
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory: WindowsFoundation.IID {
    .init(Data1: 0x8596BEDD, Data2: 0xD7F7, Data3: 0x4C6B, Data4: ( 0xB1,0xAD,0x41,0x94,0x90,0x35,0xE0,0x84 ))// 8596BEDD-D7F7-4C6B-B1AD-41949035E084
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x3A21A204, Data2: 0xF52F, Data3: 0x4E7A, Data4: ( 0x9B,0x3F,0x94,0x66,0x98,0x19,0xD9,0x81 ))// 3A21A204-F52F-4E7A-9B3F-94669819D981
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel: WindowsFoundation.IID {
    .init(Data1: 0xDBDCCB96, Data2: 0x147E, Data3: 0x4A82, Data4: ( 0xAF,0x3A,0xC9,0x1C,0x78,0x00,0xDA,0xA7 ))// DBDCCB96-147E-4A82-AF3A-C91C7800DAA7
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl: WindowsFoundation.IID {
    .init(Data1: 0x3C2B5177, Data2: 0x7C61, Data3: 0x41D2, Data4: ( 0x95,0xAE,0xFC,0xFC,0x92,0xFD,0x61,0x7A ))// 3C2B5177-7C61-41D2-95AE-FCFC92FD617A
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource: WindowsFoundation.IID {
    .init(Data1: 0xDF342987, Data2: 0x4FE6, Data3: 0x4BCD, Data4: ( 0xB8,0x85,0x2A,0xD3,0xE6,0xEF,0x9F,0xCE ))// DF342987-4FE6-4BCD-B885-2AD3E6EF9FCE
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory: WindowsFoundation.IID {
    .init(Data1: 0x2FE755A1, Data2: 0x307A, Data3: 0x4623, Data4: ( 0x92,0x50,0x29,0x59,0x04,0x85,0xBD,0xB6 ))// 2FE755A1-307A-4623-9250-29590485BDB6
}

@_spi(WinRTInternal)
public enum __ABI_Microsoft_Graphics_Canvas_UI_Xaml {
    public class ICanvasAnimatedControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl }

        open func add_CreateResources(_ value: TypedEventHandler<Win2D.CanvasAnimatedControl?, Win2D.CanvasCreateResourcesEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CreateResources(pThis, _value, &token))
            }
            return token
        }

        open func remove_CreateResources(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CreateResources(pThis, token))
            }
        }

        open func add_Update(_ value: TypedEventHandler<Win2D.AnyICanvasAnimatedControl?, Win2D.CanvasAnimatedUpdateEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgsWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Update(pThis, _value, &token))
            }
            return token
        }

        open func remove_Update(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Update(pThis, token))
            }
        }

        open func add_Draw(_ value: TypedEventHandler<Win2D.AnyICanvasAnimatedControl?, Win2D.CanvasAnimatedDrawEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgsWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Draw(pThis, _value, &token))
            }
            return token
        }

        open func remove_Draw(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Draw(pThis, token))
            }
        }

        open func add_GameLoopStarting(_ value: TypedEventHandler<Win2D.AnyICanvasAnimatedControl?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_GameLoopStarting(pThis, _value, &token))
            }
            return token
        }

        open func remove_GameLoopStarting(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_GameLoopStarting(pThis, token))
            }
        }

        open func add_GameLoopStopped(_ value: TypedEventHandler<Win2D.AnyICanvasAnimatedControl?, Any?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectableWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_GameLoopStopped(pThis, _value, &token))
            }
            return token
        }

        open func remove_GameLoopStopped(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_GameLoopStopped(pThis, token))
            }
        }

        open func get_ReadyToDraw() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReadyToDraw(pThis, &value))
            }
            return .init(from: value)
        }

        open func put_IsFixedTimeStep(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsFixedTimeStep(pThis, .init(from: value)))
            }
        }

        open func get_IsFixedTimeStep() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsFixedTimeStep(pThis, &value))
            }
            return .init(from: value)
        }

        open func put_TargetElapsedTime(_ value: WindowsFoundation.TimeSpan) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TargetElapsedTime(pThis, .from(swift: value)))
            }
        }

        open func get_TargetElapsedTime() throws -> WindowsFoundation.TimeSpan {
            var value: __x_ABI_CWindows_CFoundation_CTimeSpan = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TargetElapsedTime(pThis, &value))
            }
            return .from(abi: value)
        }

        open func put_Paused(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Paused(pThis, .init(from: value)))
            }
        }

        open func get_Paused() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Paused(pThis, &value))
            }
            return .init(from: value)
        }

        open func put_ClearColor(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClearColor(pThis, .from(swift: value)))
            }
        }

        open func get_ClearColor() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClearColor(pThis, &value))
            }
            return .from(abi: value)
        }

        open func get_Size() throws -> WindowsFoundation.Size {
            var value: __x_ABI_CWindows_CFoundation_CSize = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &value))
            }
            return .from(abi: value)
        }

        open func Invalidate() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invalidate(pThis))
            }
        }

        open func ResetElapsedTime() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ResetElapsedTime(pThis))
            }
        }

        open func CreateCoreIndependentInputSource(_ deviceTypes: WinAppSDK.InputPointerSourceDeviceKinds) throws -> WinAppSDK.InputPointerSource? {
            let (returnValue) = try ComPtrs.initialize { returnValueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCoreIndependentInputSource(pThis, deviceTypes, &returnValueAbi))
                }
            }
            return __IMPL_Microsoft_UI_Input.InputPointerSourceBridge.from(abi: returnValue)
        }

        open func RemoveFromVisualTree() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveFromVisualTree(pThis))
            }
        }

        open func get_HasGameLoopThreadAccess() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasGameLoopThreadAccess(pThis, &value))
            }
            return .init(from: value)
        }

        open func RunOnGameLoopThreadAsync(_ agileCallback: WinAppSDK.DispatcherQueueHandler?) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (asyncAction) = try ComPtrs.initialize { asyncActionAbi in
                let agileCallbackWrapper = __ABI_Microsoft_UI_Dispatching.DispatcherQueueHandlerWrapper(agileCallback)
                let _agileCallback = try! agileCallbackWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.RunOnGameLoopThreadAsync(pThis, _agileCallback, &asyncActionAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncAction)
        }

        open func get_UseSharedDevice() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UseSharedDevice(pThis, &value))
            }
            return .init(from: value)
        }

        open func put_UseSharedDevice(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_UseSharedDevice(pThis, .init(from: value)))
            }
        }

        open func get_ForceSoftwareRenderer() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForceSoftwareRenderer(pThis, &value))
            }
            return .init(from: value)
        }

        open func put_ForceSoftwareRenderer(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ForceSoftwareRenderer(pThis, .init(from: value)))
            }
        }

        open func get_CustomDevice() throws -> Win2D.CanvasDevice? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CustomDevice(pThis, &valueAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas.CanvasDeviceBridge.from(abi: value)
        }

        open func put_CustomDevice(_ value: Win2D.CanvasDevice?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CustomDevice(pThis, RawPointer(value)))
            }
        }

        open func get_DpiScale() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DpiScale(pThis, &value))
            }
            return value
        }

        open func put_DpiScale(_ ratio: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DpiScale(pThis, ratio))
            }
        }

    }

    internal static var ICanvasAnimatedControlVTable: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedControlVtbl = .init(
        QueryInterface: { ICanvasAnimatedControlWrapper.queryInterface($0, $1, $2) },
        AddRef: { ICanvasAnimatedControlWrapper.addRef($0) },
        Release: { ICanvasAnimatedControlWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 5).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasAnimatedControlWrapper.IID
            iids[3] = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper.IID
            iids[4] = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpiWrapper.IID
            $1!.pointee = 5
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.Graphics.Canvas.UI.Xaml.ICanvasAnimatedControl").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        add_CreateResources: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let value = Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let token = __unwrapped__instance.createResources.addHandler(value)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_CreateResources: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.createResources.removeHandler(token)
            return S_OK
        },

        add_Update: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let value = Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgsWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let token = __unwrapped__instance.update.addHandler(value)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_Update: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.update.removeHandler(token)
            return S_OK
        },

        add_Draw: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let value = Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgsWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let token = __unwrapped__instance.draw.addHandler(value)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_Draw: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.draw.removeHandler(token)
            return S_OK
        },

        add_GameLoopStarting: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let value = Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectableWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let token = __unwrapped__instance.gameLoopStarting.addHandler(value)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_GameLoopStarting: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.gameLoopStarting.removeHandler(token)
            return S_OK
        },

        add_GameLoopStopped: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            guard let value = Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectableWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
            let token = __unwrapped__instance.gameLoopStopped.addHandler(value)
            $2?.initialize(to: .from(swift: token))
            return S_OK
        },

        remove_GameLoopStopped: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let token: EventRegistrationToken = $1
            __unwrapped__instance.gameLoopStopped.removeHandler(token)
            return S_OK
        },

        get_ReadyToDraw: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.readyToDraw
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        put_IsFixedTimeStep: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Bool = .init(from: $1)
            __unwrapped__instance.isFixedTimeStep = value
            return S_OK
        },

        get_IsFixedTimeStep: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isFixedTimeStep
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        put_TargetElapsedTime: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WindowsFoundation.TimeSpan = .from(abi: $1)
            __unwrapped__instance.targetElapsedTime = value
            return S_OK
        },

        get_TargetElapsedTime: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.targetElapsedTime
            $1?.initialize(to: .from(swift: value))
            return S_OK
        },

        put_Paused: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Bool = .init(from: $1)
            __unwrapped__instance.paused = value
            return S_OK
        },

        get_Paused: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.paused
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        put_ClearColor: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: UWP.Color = .from(abi: $1)
            __unwrapped__instance.clearColor = value
            return S_OK
        },

        get_ClearColor: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.clearColor
            $1?.initialize(to: .from(swift: value))
            return S_OK
        },

        get_Size: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.size
            $1?.initialize(to: .from(swift: value))
            return S_OK
        },

        Invalidate: {
            do {
                guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.invalidate()
                return S_OK
            } catch { return failWith(error: error) }
        },

        ResetElapsedTime: {
            do {
                guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.resetElapsedTime()
                return S_OK
            } catch { return failWith(error: error) }
        },

        CreateCoreIndependentInputSource: {
            do {
                guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let deviceTypes: WinAppSDK.InputPointerSourceDeviceKinds = $1
                let returnValue = try __unwrapped__instance.createCoreIndependentInputSource(deviceTypes)
                returnValue?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        RemoveFromVisualTree: {
            do {
                guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.removeFromVisualTree()
                return S_OK
            } catch { return failWith(error: error) }
        },

        get_HasGameLoopThreadAccess: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.hasGameLoopThreadAccess
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        RunOnGameLoopThreadAsync: {
            do {
                guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                guard let agileCallback = __ABI_Microsoft_UI_Dispatching.DispatcherQueueHandlerWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
                let asyncAction = try __unwrapped__instance.runOnGameLoopThreadAsync(agileCallback)
                let asyncActionWrapper = __ABI_Windows_Foundation.IAsyncActionWrapper(asyncAction)
                asyncActionWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        get_UseSharedDevice: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.useSharedDevice
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        put_UseSharedDevice: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Bool = .init(from: $1)
            __unwrapped__instance.useSharedDevice = value
            return S_OK
        },

        get_ForceSoftwareRenderer: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.forceSoftwareRenderer
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        put_ForceSoftwareRenderer: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Bool = .init(from: $1)
            __unwrapped__instance.forceSoftwareRenderer = value
            return S_OK
        },

        get_CustomDevice: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.customDevice
            value?.copyTo($1)
            return S_OK
        },

        put_CustomDevice: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Win2D.CanvasDevice? = __IMPL_Microsoft_Graphics_Canvas.CanvasDeviceBridge.from(abi: ComPtr($1))
            __unwrapped__instance.customDevice = value
            return S_OK
        },

        get_DpiScale: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.dpiScale
            $1?.initialize(to: value)
            return S_OK
        },

        put_DpiScale: {
            guard let __unwrapped__instance = ICanvasAnimatedControlWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let ratio: Float = $1
            __unwrapped__instance.dpiScale = ratio
            return S_OK
        }
    )

    public typealias ICanvasAnimatedControlWrapper = InterfaceWrapperBase<__IMPL_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasAnimatedControlBridge>
    public class ICanvasAnimatedDrawEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs }

        public func get_DrawingSession() throws -> Win2D.CanvasDrawingSession? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DrawingSession(pThis, &valueAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas.CanvasDrawingSessionBridge.from(abi: value)
        }

        public func get_Timing() throws -> Win2D.CanvasTimingInformation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasTimingInformation = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Timing(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class ICanvasAnimatedDrawEventArgsFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory }

        public func Create(_ canvasDrawingSession: Win2D.CanvasDrawingSession?, _ timingInformation: Win2D.CanvasTimingInformation) throws -> ICanvasAnimatedDrawEventArgs {
            let (animatedControlDrawEventArgs) = try ComPtrs.initialize { animatedControlDrawEventArgsAbi in
                let _timingInformation = __ABI_Microsoft_Graphics_Canvas_UI._ABI_CanvasTimingInformation(from: timingInformation)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedDrawEventArgsFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, RawPointer(canvasDrawingSession), _timingInformation.val, &animatedControlDrawEventArgsAbi))
                }
            }
            return ICanvasAnimatedDrawEventArgs(animatedControlDrawEventArgs!)
        }

    }

    public class ICanvasAnimatedUpdateEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs }

        public func get_Timing() throws -> Win2D.CanvasTimingInformation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CCanvasTimingInformation = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Timing(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class ICanvasAnimatedUpdateEventArgsFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory }

        public func Create(_ timingInformation: Win2D.CanvasTimingInformation) throws -> ICanvasAnimatedUpdateEventArgs {
            let (updateEventArgs) = try ComPtrs.initialize { updateEventArgsAbi in
                let _timingInformation = __ABI_Microsoft_Graphics_Canvas_UI._ABI_CanvasTimingInformation(from: timingInformation)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasAnimatedUpdateEventArgsFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, _timingInformation.val, &updateEventArgsAbi))
                }
            }
            return ICanvasAnimatedUpdateEventArgs(updateEventArgs!)
        }

    }

    public class ICanvasControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl }

        public func add_CreateResources(_ value: TypedEventHandler<Win2D.CanvasControl?, Win2D.CanvasCreateResourcesEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CreateResources(pThis, _value, &token))
            }
            return token
        }

        public func remove_CreateResources(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CreateResources(pThis, token))
            }
        }

        public func get_ReadyToDraw() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReadyToDraw(pThis, &value))
            }
            return .init(from: value)
        }

        public func add_Draw(_ value: TypedEventHandler<Win2D.CanvasControl?, Win2D.CanvasDrawEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgsWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_Draw(pThis, _value, &token))
            }
            return token
        }

        public func remove_Draw(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_Draw(pThis, token))
            }
        }

        public func put_ClearColor(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClearColor(pThis, .from(swift: value)))
            }
        }

        public func get_ClearColor() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClearColor(pThis, &value))
            }
            return .from(abi: value)
        }

        public func Invalidate() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invalidate(pThis))
            }
        }

        public func get_Size() throws -> WindowsFoundation.Size {
            var size: __x_ABI_CWindows_CFoundation_CSize = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &size))
            }
            return .from(abi: size)
        }

        public func RemoveFromVisualTree() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveFromVisualTree(pThis))
            }
        }

        public func get_UseSharedDevice() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UseSharedDevice(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_UseSharedDevice(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_UseSharedDevice(pThis, .init(from: value)))
            }
        }

        public func get_ForceSoftwareRenderer() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForceSoftwareRenderer(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_ForceSoftwareRenderer(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ForceSoftwareRenderer(pThis, .init(from: value)))
            }
        }

        public func get_CustomDevice() throws -> Win2D.CanvasDevice? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CustomDevice(pThis, &valueAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas.CanvasDeviceBridge.from(abi: value)
        }

        public func put_CustomDevice(_ value: Win2D.CanvasDevice?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CustomDevice(pThis, RawPointer(value)))
            }
        }

        public func get_DpiScale() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DpiScale(pThis, &value))
            }
            return value
        }

        public func put_DpiScale(_ ratio: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DpiScale(pThis, ratio))
            }
        }

    }

    public class ICanvasDrawEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs }

        public func get_DrawingSession() throws -> Win2D.CanvasDrawingSession? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DrawingSession(pThis, &valueAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas.CanvasDrawingSessionBridge.from(abi: value)
        }

    }

    public class ICanvasDrawEventArgsFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory }

        public func Create(_ canvasDrawingSession: Win2D.CanvasDrawingSession?) throws -> ICanvasDrawEventArgs {
            let (drawEventArgs) = try ComPtrs.initialize { drawEventArgsAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasDrawEventArgsFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, RawPointer(canvasDrawingSession), &drawEventArgsAbi))
                }
            }
            return ICanvasDrawEventArgs(drawEventArgs!)
        }

    }

    public class ICanvasImageSource: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource }

        public func CreateDrawingSession(_ clearColor: UWP.Color) throws -> Win2D.CanvasDrawingSession? {
            let (drawingSession) = try ComPtrs.initialize { drawingSessionAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateDrawingSession(pThis, .from(swift: clearColor), &drawingSessionAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas.CanvasDrawingSessionBridge.from(abi: drawingSession)
        }

        public func CreateDrawingSessionWithUpdateRectangle(_ clearColor: UWP.Color, _ updateRectangle: WindowsFoundation.Rect) throws -> Win2D.CanvasDrawingSession? {
            let (drawingSession) = try ComPtrs.initialize { drawingSessionAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateDrawingSessionWithUpdateRectangle(pThis, .from(swift: clearColor), .from(swift: updateRectangle), &drawingSessionAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas.CanvasDrawingSessionBridge.from(abi: drawingSession)
        }

        public func Recreate(_ value: Win2D.AnyICanvasResourceCreator?) throws {
            let valueWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Recreate(pThis, _value))
            }
        }

        public func get_Size() throws -> WindowsFoundation.Size {
            var size: __x_ABI_CWindows_CFoundation_CSize = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &size))
            }
            return .from(abi: size)
        }

        public func get_SizeInPixels() throws -> UWP.BitmapSize {
            var size: __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SizeInPixels(pThis, &size))
            }
            return .from(abi: size)
        }

        public func get_AlphaMode() throws -> Win2D.CanvasAlphaMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaMode(pThis, &value))
            }
            return value
        }

    }

    public class ICanvasImageSourceFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory }

        public func CreateWithSize(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi?, _ size: WindowsFoundation.Size) throws -> ICanvasImageSource {
            let (imageSource) = try ComPtrs.initialize { imageSourceAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpiWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithSize(pThis, _resourceCreator, .from(swift: size), &imageSourceAbi))
                }
            }
            return ICanvasImageSource(imageSource!)
        }

        public func CreateWithWidthAndHeight(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi?, _ width: Float, _ height: Float) throws -> ICanvasImageSource {
            let (imageSource) = try ComPtrs.initialize { imageSourceAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpiWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithWidthAndHeight(pThis, _resourceCreator, width, height, &imageSourceAbi))
                }
            }
            return ICanvasImageSource(imageSource!)
        }

        public func CreateWithWidthAndHeightAndDpi(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ width: Float, _ height: Float, _ dpi: Float) throws -> ICanvasImageSource {
            let (imageSource) = try ComPtrs.initialize { imageSourceAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithWidthAndHeightAndDpi(pThis, _resourceCreator, width, height, dpi, &imageSourceAbi))
                }
            }
            return ICanvasImageSource(imageSource!)
        }

        public func CreateWithWidthAndHeightAndDpiAndAlphaMode(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ width: Float, _ height: Float, _ dpi: Float, _ alphaMode: Win2D.CanvasAlphaMode) throws -> ICanvasImageSource {
            let (imageSource) = try ComPtrs.initialize { imageSourceAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasImageSourceFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithWidthAndHeightAndDpiAndAlphaMode(pThis, _resourceCreator, width, height, dpi, alphaMode, &imageSourceAbi))
                }
            }
            return ICanvasImageSource(imageSource!)
        }

    }

    public class ICanvasRegionsInvalidatedEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs }

        public func get_InvalidatedRegions() throws -> [WindowsFoundation.Rect] {
            var value: WinRTArrayAbi<__x_ABI_CWindows_CFoundation_CRect> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InvalidatedRegions(pThis, &value.count, &value.start))
            }
            defer { CoTaskMemFree(value.start) }
            return .from(abi: value)

        }

        public func get_VisibleRegion() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasRegionsInvalidatedEventArgs.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VisibleRegion(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    public class ICanvasSwapChainPanel: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel }

        public func put_SwapChain(_ value: Win2D.CanvasSwapChain?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SwapChain(pThis, RawPointer(value)))
            }
        }

        public func get_SwapChain() throws -> Win2D.CanvasSwapChain? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SwapChain(pThis, &valueAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas.CanvasSwapChainBridge.from(abi: value)
        }

        public func RemoveFromVisualTree() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasSwapChainPanel.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveFromVisualTree(pThis))
            }
        }

    }

    public class ICanvasVirtualControl: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl }

        public func add_CreateResources(_ value: TypedEventHandler<Win2D.CanvasVirtualControl?, Win2D.CanvasCreateResourcesEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_CreateResources(pThis, _value, &token))
            }
            return token
        }

        public func remove_CreateResources(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_CreateResources(pThis, token))
            }
        }

        public func get_ReadyToDraw() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ReadyToDraw(pThis, &value))
            }
            return .init(from: value)
        }

        public func add_RegionsInvalidated(_ value: TypedEventHandler<Win2D.CanvasVirtualControl?, Win2D.CanvasRegionsInvalidatedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_RegionsInvalidated(pThis, _value, &token))
            }
            return token
        }

        public func remove_RegionsInvalidated(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_RegionsInvalidated(pThis, token))
            }
        }

        public func put_ClearColor(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClearColor(pThis, .from(swift: value)))
            }
        }

        public func get_ClearColor() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClearColor(pThis, &value))
            }
            return .from(abi: value)
        }

        public func CreateDrawingSession(_ updateRectangle: WindowsFoundation.Rect) throws -> Win2D.CanvasDrawingSession? {
            let (drawingSession) = try ComPtrs.initialize { drawingSessionAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateDrawingSession(pThis, .from(swift: updateRectangle), &drawingSessionAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas.CanvasDrawingSessionBridge.from(abi: drawingSession)
        }

        public func SuspendDrawingSession(_ drawingSession: Win2D.CanvasDrawingSession?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SuspendDrawingSession(pThis, RawPointer(drawingSession)))
            }
        }

        public func ResumeDrawingSession(_ drawingSession: Win2D.CanvasDrawingSession?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ResumeDrawingSession(pThis, RawPointer(drawingSession)))
            }
        }

        public func Invalidate() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invalidate(pThis))
            }
        }

        public func InvalidateRegion(_ region: WindowsFoundation.Rect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InvalidateRegion(pThis, .from(swift: region)))
            }
        }

        public func get_Size() throws -> WindowsFoundation.Size {
            var size: __x_ABI_CWindows_CFoundation_CSize = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &size))
            }
            return .from(abi: size)
        }

        public func RemoveFromVisualTree() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveFromVisualTree(pThis))
            }
        }

        public func get_UseSharedDevice() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UseSharedDevice(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_UseSharedDevice(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_UseSharedDevice(pThis, .init(from: value)))
            }
        }

        public func get_ForceSoftwareRenderer() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ForceSoftwareRenderer(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_ForceSoftwareRenderer(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ForceSoftwareRenderer(pThis, .init(from: value)))
            }
        }

        public func get_CustomDevice() throws -> Win2D.CanvasDevice? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CustomDevice(pThis, &valueAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas.CanvasDeviceBridge.from(abi: value)
        }

        public func put_CustomDevice(_ value: Win2D.CanvasDevice?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CustomDevice(pThis, RawPointer(value)))
            }
        }

        public func get_DpiScale() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DpiScale(pThis, &value))
            }
            return value
        }

        public func put_DpiScale(_ ratio: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualControl.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DpiScale(pThis, ratio))
            }
        }

    }

    public class ICanvasVirtualImageSource: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource }

        public func get_Source() throws -> WinUI.VirtualSurfaceImageSource? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &valueAbi))
                }
            }
            return __IMPL_Microsoft_UI_Xaml_Media_Imaging.VirtualSurfaceImageSourceBridge.from(abi: value)
        }

        public func CreateDrawingSession(_ clearColor: UWP.Color, _ updateRectangle: WindowsFoundation.Rect) throws -> Win2D.CanvasDrawingSession? {
            let (drawingSession) = try ComPtrs.initialize { drawingSessionAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateDrawingSession(pThis, .from(swift: clearColor), .from(swift: updateRectangle), &drawingSessionAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas.CanvasDrawingSessionBridge.from(abi: drawingSession)
        }

        public func SuspendDrawingSession(_ drawingSession: Win2D.CanvasDrawingSession?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SuspendDrawingSession(pThis, RawPointer(drawingSession)))
            }
        }

        public func ResumeDrawingSession(_ drawingSession: Win2D.CanvasDrawingSession?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ResumeDrawingSession(pThis, RawPointer(drawingSession)))
            }
        }

        public func Invalidate() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Invalidate(pThis))
            }
        }

        public func InvalidateRegion(_ region: WindowsFoundation.Rect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InvalidateRegion(pThis, .from(swift: region)))
            }
        }

        public func RaiseRegionsInvalidatedIfAny() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RaiseRegionsInvalidatedIfAny(pThis))
            }
        }

        public func add_RegionsInvalidated(_ value: TypedEventHandler<Win2D.CanvasVirtualImageSource?, Win2D.CanvasRegionsInvalidatedEventArgs?>?) throws -> EventRegistrationToken {
            var token: EventRegistrationToken = .init()
            let valueWrapper = Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.add_RegionsInvalidated(pThis, _value, &token))
            }
            return token
        }

        public func remove_RegionsInvalidated(_ token: EventRegistrationToken) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.remove_RegionsInvalidated(pThis, token))
            }
        }

        public func ResizeWithSize(_ size: WindowsFoundation.Size) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ResizeWithSize(pThis, .from(swift: size)))
            }
        }

        public func ResizeWithWidthAndHeight(_ width: Float, _ height: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ResizeWithWidthAndHeight(pThis, width, height))
            }
        }

        public func ResizeWithWidthAndHeightAndDpi(_ width: Float, _ height: Float, _ dpi: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ResizeWithWidthAndHeightAndDpi(pThis, width, height, dpi))
            }
        }

        public func Recreate(_ resourceCreator: Win2D.AnyICanvasResourceCreator?) throws {
            let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
            let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Recreate(pThis, _resourceCreator))
            }
        }

        public func get_Size() throws -> WindowsFoundation.Size {
            var size: __x_ABI_CWindows_CFoundation_CSize = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &size))
            }
            return .from(abi: size)
        }

        public func get_SizeInPixels() throws -> UWP.BitmapSize {
            var size: __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SizeInPixels(pThis, &size))
            }
            return .from(abi: size)
        }

        public func get_AlphaMode() throws -> Win2D.CanvasAlphaMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaMode(pThis, &value))
            }
            return value
        }

    }

    public class ICanvasVirtualImageSourceFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory }

        public func CreateWithSize(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi?, _ size: WindowsFoundation.Size) throws -> ICanvasVirtualImageSource {
            let (imageSource) = try ComPtrs.initialize { imageSourceAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpiWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithSize(pThis, _resourceCreator, .from(swift: size), &imageSourceAbi))
                }
            }
            return ICanvasVirtualImageSource(imageSource!)
        }

        public func CreateWithWidthAndHeight(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi?, _ width: Float, _ height: Float) throws -> ICanvasVirtualImageSource {
            let (imageSource) = try ComPtrs.initialize { imageSourceAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpiWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithWidthAndHeight(pThis, _resourceCreator, width, height, &imageSourceAbi))
                }
            }
            return ICanvasVirtualImageSource(imageSource!)
        }

        public func CreateWithWidthAndHeightAndDpi(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ width: Float, _ height: Float, _ dpi: Float) throws -> ICanvasVirtualImageSource {
            let (imageSource) = try ComPtrs.initialize { imageSourceAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithWidthAndHeightAndDpi(pThis, _resourceCreator, width, height, dpi, &imageSourceAbi))
                }
            }
            return ICanvasVirtualImageSource(imageSource!)
        }

        public func CreateWithWidthAndHeightAndDpiAndAlphaMode(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ width: Float, _ height: Float, _ dpi: Float, _ alphaMode: Win2D.CanvasAlphaMode) throws -> ICanvasVirtualImageSource {
            let (imageSource) = try ComPtrs.initialize { imageSourceAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CUI_CXaml_CICanvasVirtualImageSourceFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithWidthAndHeightAndDpiAndAlphaMode(pThis, _resourceCreator, width, height, dpi, alphaMode, &imageSourceAbi))
                }
            }
            return ICanvasVirtualImageSource(imageSource!)
        }

    }

}
