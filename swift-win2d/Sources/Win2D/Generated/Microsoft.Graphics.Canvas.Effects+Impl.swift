// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

@_spi(WinRTInternal)
public enum __IMPL_Microsoft_Graphics_Canvas_Effects {
    public enum ICanvasEffectBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect
        public typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect
        public typealias SwiftProjection = AnyICanvasEffect
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return ICanvasEffectImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffectVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class ICanvasEffectImpl: ICanvasEffect, WinRTAbiImpl {
        fileprivate typealias Bridge = ICanvasEffectBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.icanvaseffect.invalidatesourcerectangle)
        fileprivate func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
            try _default.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.icanvaseffect.getinvalidrectangles)
        fileprivate func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
            try _default.GetInvalidRectangles(resourceCreator)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.icanvaseffect.getrequiredsourcerectangle)
        fileprivate func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
            try _default.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.icanvaseffect.getrequiredsourcerectangles)
        fileprivate func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
            try _default.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.icanvaseffect.bufferprecision)
        fileprivate var bufferPrecision : Win2D.CanvasBufferPrecision? {
            get { try! _default.get_BufferPrecision() }
            set { try! _default.put_BufferPrecision(newValue) }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.icanvaseffect.cacheoutput)
        fileprivate var cacheOutput : Bool {
            get { try! _default.get_CacheOutput() }
            set { try! _default.put_CacheOutput(newValue) }
        }

        private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
        private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.icanvaseffect.name)
        fileprivate var name : String {
            get { try! _IGraphicsEffect.get_Name() }
            set { try! _IGraphicsEffect.put_Name(newValue) }
        }

        private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.icanvaseffect.close)
        fileprivate func close() throws {
            try _IClosable.Close()
        }

        private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.icanvaseffect.getbounds)
        fileprivate func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
            try _ICanvasImage.GetBounds(resourceCreator)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.icanvaseffect.getbounds)
        fileprivate func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
            try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
        }

    }

    public enum AlphaMaskEffectBridge: AbiBridge {
        public typealias SwiftProjection = AlphaMaskEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect>?) -> AlphaMaskEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ArithmeticCompositeEffectBridge: AbiBridge {
        public typealias SwiftProjection = ArithmeticCompositeEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect>?) -> ArithmeticCompositeEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum AtlasEffectBridge: AbiBridge {
        public typealias SwiftProjection = AtlasEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect>?) -> AtlasEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum BlendEffectBridge: AbiBridge {
        public typealias SwiftProjection = BlendEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect>?) -> BlendEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum BorderEffectBridge: AbiBridge {
        public typealias SwiftProjection = BorderEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect>?) -> BorderEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum BrightnessEffectBridge: AbiBridge {
        public typealias SwiftProjection = BrightnessEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect>?) -> BrightnessEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ChromaKeyEffectBridge: AbiBridge {
        public typealias SwiftProjection = ChromaKeyEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect>?) -> ChromaKeyEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ColorManagementEffectBridge: AbiBridge {
        public typealias SwiftProjection = ColorManagementEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect>?) -> ColorManagementEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ColorManagementProfileBridge: AbiBridge {
        public typealias SwiftProjection = ColorManagementProfile
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile>?) -> ColorManagementProfile? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ColorMatrixEffectBridge: AbiBridge {
        public typealias SwiftProjection = ColorMatrixEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect>?) -> ColorMatrixEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ColorSourceEffectBridge: AbiBridge {
        public typealias SwiftProjection = ColorSourceEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect>?) -> ColorSourceEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum CompositeEffectBridge: AbiBridge {
        public typealias SwiftProjection = CompositeEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect>?) -> CompositeEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ContrastEffectBridge: AbiBridge {
        public typealias SwiftProjection = ContrastEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect>?) -> ContrastEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ConvolveMatrixEffectBridge: AbiBridge {
        public typealias SwiftProjection = ConvolveMatrixEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect>?) -> ConvolveMatrixEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum CropEffectBridge: AbiBridge {
        public typealias SwiftProjection = CropEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect>?) -> CropEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum CrossFadeEffectBridge: AbiBridge {
        public typealias SwiftProjection = CrossFadeEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect>?) -> CrossFadeEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DirectionalBlurEffectBridge: AbiBridge {
        public typealias SwiftProjection = DirectionalBlurEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect>?) -> DirectionalBlurEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DiscreteTransferEffectBridge: AbiBridge {
        public typealias SwiftProjection = DiscreteTransferEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect>?) -> DiscreteTransferEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DisplacementMapEffectBridge: AbiBridge {
        public typealias SwiftProjection = DisplacementMapEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect>?) -> DisplacementMapEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DistantDiffuseEffectBridge: AbiBridge {
        public typealias SwiftProjection = DistantDiffuseEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect>?) -> DistantDiffuseEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DistantSpecularEffectBridge: AbiBridge {
        public typealias SwiftProjection = DistantSpecularEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect>?) -> DistantSpecularEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum DpiCompensationEffectBridge: AbiBridge {
        public typealias SwiftProjection = DpiCompensationEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect>?) -> DpiCompensationEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum EdgeDetectionEffectBridge: AbiBridge {
        public typealias SwiftProjection = EdgeDetectionEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect>?) -> EdgeDetectionEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum EffectTransferTable3DBridge: AbiBridge {
        public typealias SwiftProjection = EffectTransferTable3D
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D>?) -> EffectTransferTable3D? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum EmbossEffectBridge: AbiBridge {
        public typealias SwiftProjection = EmbossEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect>?) -> EmbossEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ExposureEffectBridge: AbiBridge {
        public typealias SwiftProjection = ExposureEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect>?) -> ExposureEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum GammaTransferEffectBridge: AbiBridge {
        public typealias SwiftProjection = GammaTransferEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect>?) -> GammaTransferEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum GaussianBlurEffectBridge: AbiBridge {
        public typealias SwiftProjection = GaussianBlurEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect>?) -> GaussianBlurEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum GrayscaleEffectBridge: AbiBridge {
        public typealias SwiftProjection = GrayscaleEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect>?) -> GrayscaleEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum HighlightsAndShadowsEffectBridge: AbiBridge {
        public typealias SwiftProjection = HighlightsAndShadowsEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect>?) -> HighlightsAndShadowsEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum HueRotationEffectBridge: AbiBridge {
        public typealias SwiftProjection = HueRotationEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect>?) -> HueRotationEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum HueToRgbEffectBridge: AbiBridge {
        public typealias SwiftProjection = HueToRgbEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect>?) -> HueToRgbEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum InvertEffectBridge: AbiBridge {
        public typealias SwiftProjection = InvertEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect>?) -> InvertEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum LinearTransferEffectBridge: AbiBridge {
        public typealias SwiftProjection = LinearTransferEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect>?) -> LinearTransferEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum LuminanceToAlphaEffectBridge: AbiBridge {
        public typealias SwiftProjection = LuminanceToAlphaEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect>?) -> LuminanceToAlphaEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum MorphologyEffectBridge: AbiBridge {
        public typealias SwiftProjection = MorphologyEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect>?) -> MorphologyEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum OpacityEffectBridge: AbiBridge {
        public typealias SwiftProjection = OpacityEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect>?) -> OpacityEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum OpacityMetadataEffectBridge: AbiBridge {
        public typealias SwiftProjection = OpacityMetadataEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect>?) -> OpacityMetadataEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum PixelShaderEffectBridge: AbiBridge {
        public typealias SwiftProjection = PixelShaderEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect>?) -> PixelShaderEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum PointDiffuseEffectBridge: AbiBridge {
        public typealias SwiftProjection = PointDiffuseEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect>?) -> PointDiffuseEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum PointSpecularEffectBridge: AbiBridge {
        public typealias SwiftProjection = PointSpecularEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect>?) -> PointSpecularEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum PosterizeEffectBridge: AbiBridge {
        public typealias SwiftProjection = PosterizeEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect>?) -> PosterizeEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum PremultiplyEffectBridge: AbiBridge {
        public typealias SwiftProjection = PremultiplyEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect>?) -> PremultiplyEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum RgbToHueEffectBridge: AbiBridge {
        public typealias SwiftProjection = RgbToHueEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect>?) -> RgbToHueEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum SaturationEffectBridge: AbiBridge {
        public typealias SwiftProjection = SaturationEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect>?) -> SaturationEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ScaleEffectBridge: AbiBridge {
        public typealias SwiftProjection = ScaleEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect>?) -> ScaleEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum SepiaEffectBridge: AbiBridge {
        public typealias SwiftProjection = SepiaEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect>?) -> SepiaEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ShadowEffectBridge: AbiBridge {
        public typealias SwiftProjection = ShadowEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect>?) -> ShadowEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum SharpenEffectBridge: AbiBridge {
        public typealias SwiftProjection = SharpenEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect>?) -> SharpenEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum SpotDiffuseEffectBridge: AbiBridge {
        public typealias SwiftProjection = SpotDiffuseEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect>?) -> SpotDiffuseEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum SpotSpecularEffectBridge: AbiBridge {
        public typealias SwiftProjection = SpotSpecularEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect>?) -> SpotSpecularEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum StraightenEffectBridge: AbiBridge {
        public typealias SwiftProjection = StraightenEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect>?) -> StraightenEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TableTransfer3DEffectBridge: AbiBridge {
        public typealias SwiftProjection = TableTransfer3DEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect>?) -> TableTransfer3DEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TableTransferEffectBridge: AbiBridge {
        public typealias SwiftProjection = TableTransferEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect>?) -> TableTransferEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TemperatureAndTintEffectBridge: AbiBridge {
        public typealias SwiftProjection = TemperatureAndTintEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect>?) -> TemperatureAndTintEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TileEffectBridge: AbiBridge {
        public typealias SwiftProjection = TileEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect>?) -> TileEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TintEffectBridge: AbiBridge {
        public typealias SwiftProjection = TintEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect>?) -> TintEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum Transform2DEffectBridge: AbiBridge {
        public typealias SwiftProjection = Transform2DEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect>?) -> Transform2DEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum Transform3DEffectBridge: AbiBridge {
        public typealias SwiftProjection = Transform3DEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect>?) -> Transform3DEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum TurbulenceEffectBridge: AbiBridge {
        public typealias SwiftProjection = TurbulenceEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect>?) -> TurbulenceEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum UnPremultiplyEffectBridge: AbiBridge {
        public typealias SwiftProjection = UnPremultiplyEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect>?) -> UnPremultiplyEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum VignetteEffectBridge: AbiBridge {
        public typealias SwiftProjection = VignetteEffect
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect>?) -> VignetteEffect? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
extension ColorManagementSimpleProfile: WinRTBridgeable {
    public typealias ABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementSimpleProfile
    public static func from(abi: ABI) -> Self {
        .init(redPrimary: .from(abi: abi.RedPrimary), greenPrimary: .from(abi: abi.GreenPrimary), bluePrimary: .from(abi: abi.BluePrimary), whitePointXZ: .from(abi: abi.WhitePointXZ), gamma: abi.Gamma)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

@_spi(WinRTInternal)
extension Matrix5x4: WinRTBridgeable {
    public typealias ABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMatrix5x4
    public static func from(abi: ABI) -> Self {
        .init(m11: abi.M11, m12: abi.M12, m13: abi.M13, m14: abi.M14, m21: abi.M21, m22: abi.M22, m23: abi.M23, m24: abi.M24, m31: abi.M31, m32: abi.M32, m33: abi.M33, m34: abi.M34, m41: abi.M41, m42: abi.M42, m43: abi.M43, m44: abi.M44, m51: abi.M51, m52: abi.M52, m53: abi.M53, m54: abi.M54)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

@_spi(WinRTInternal)
public class ICanvasEffectMaker: MakeFromAbi {
    public typealias SwiftType = AnyICanvasEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect = try! abi.QueryInterface()
        return __IMPL_Microsoft_Graphics_Canvas_Effects.ICanvasEffectBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class AlphaMaskEffectMaker: MakeFromAbi {
    public typealias SwiftType = AlphaMaskEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return AlphaMaskEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ArithmeticCompositeEffectMaker: MakeFromAbi {
    public typealias SwiftType = ArithmeticCompositeEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ArithmeticCompositeEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class AtlasEffectMaker: MakeFromAbi {
    public typealias SwiftType = AtlasEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return AtlasEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class BlendEffectMaker: MakeFromAbi {
    public typealias SwiftType = BlendEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return BlendEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class BorderEffectMaker: MakeFromAbi {
    public typealias SwiftType = BorderEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return BorderEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class BrightnessEffectMaker: MakeFromAbi {
    public typealias SwiftType = BrightnessEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return BrightnessEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ChromaKeyEffectMaker: MakeFromAbi {
    public typealias SwiftType = ChromaKeyEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ChromaKeyEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ColorManagementEffectMaker: MakeFromAbi {
    public typealias SwiftType = ColorManagementEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ColorManagementEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ColorManagementProfileMaker: MakeFromAbi {
    public typealias SwiftType = ColorManagementProfile
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ColorManagementProfile(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ColorMatrixEffectMaker: MakeFromAbi {
    public typealias SwiftType = ColorMatrixEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ColorMatrixEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ColorSourceEffectMaker: MakeFromAbi {
    public typealias SwiftType = ColorSourceEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ColorSourceEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class CompositeEffectMaker: MakeFromAbi {
    public typealias SwiftType = CompositeEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return CompositeEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ContrastEffectMaker: MakeFromAbi {
    public typealias SwiftType = ContrastEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ContrastEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ConvolveMatrixEffectMaker: MakeFromAbi {
    public typealias SwiftType = ConvolveMatrixEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ConvolveMatrixEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class CropEffectMaker: MakeFromAbi {
    public typealias SwiftType = CropEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return CropEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class CrossFadeEffectMaker: MakeFromAbi {
    public typealias SwiftType = CrossFadeEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return CrossFadeEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DirectionalBlurEffectMaker: MakeFromAbi {
    public typealias SwiftType = DirectionalBlurEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DirectionalBlurEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DiscreteTransferEffectMaker: MakeFromAbi {
    public typealias SwiftType = DiscreteTransferEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DiscreteTransferEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DisplacementMapEffectMaker: MakeFromAbi {
    public typealias SwiftType = DisplacementMapEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DisplacementMapEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DistantDiffuseEffectMaker: MakeFromAbi {
    public typealias SwiftType = DistantDiffuseEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DistantDiffuseEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DistantSpecularEffectMaker: MakeFromAbi {
    public typealias SwiftType = DistantSpecularEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DistantSpecularEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class DpiCompensationEffectMaker: MakeFromAbi {
    public typealias SwiftType = DpiCompensationEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return DpiCompensationEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class EdgeDetectionEffectMaker: MakeFromAbi {
    public typealias SwiftType = EdgeDetectionEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return EdgeDetectionEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class EffectTransferTable3DMaker: MakeFromAbi {
    public typealias SwiftType = EffectTransferTable3D
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return EffectTransferTable3D(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class EmbossEffectMaker: MakeFromAbi {
    public typealias SwiftType = EmbossEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return EmbossEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ExposureEffectMaker: MakeFromAbi {
    public typealias SwiftType = ExposureEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ExposureEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class GammaTransferEffectMaker: MakeFromAbi {
    public typealias SwiftType = GammaTransferEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return GammaTransferEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class GaussianBlurEffectMaker: MakeFromAbi {
    public typealias SwiftType = GaussianBlurEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return GaussianBlurEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class GrayscaleEffectMaker: MakeFromAbi {
    public typealias SwiftType = GrayscaleEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return GrayscaleEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class HighlightsAndShadowsEffectMaker: MakeFromAbi {
    public typealias SwiftType = HighlightsAndShadowsEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return HighlightsAndShadowsEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class HueRotationEffectMaker: MakeFromAbi {
    public typealias SwiftType = HueRotationEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return HueRotationEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class HueToRgbEffectMaker: MakeFromAbi {
    public typealias SwiftType = HueToRgbEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return HueToRgbEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class InvertEffectMaker: MakeFromAbi {
    public typealias SwiftType = InvertEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return InvertEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class LinearTransferEffectMaker: MakeFromAbi {
    public typealias SwiftType = LinearTransferEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return LinearTransferEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class LuminanceToAlphaEffectMaker: MakeFromAbi {
    public typealias SwiftType = LuminanceToAlphaEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return LuminanceToAlphaEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class MorphologyEffectMaker: MakeFromAbi {
    public typealias SwiftType = MorphologyEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return MorphologyEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class OpacityEffectMaker: MakeFromAbi {
    public typealias SwiftType = OpacityEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return OpacityEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class OpacityMetadataEffectMaker: MakeFromAbi {
    public typealias SwiftType = OpacityMetadataEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return OpacityMetadataEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PixelShaderEffectMaker: MakeFromAbi {
    public typealias SwiftType = PixelShaderEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return PixelShaderEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PointDiffuseEffectMaker: MakeFromAbi {
    public typealias SwiftType = PointDiffuseEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return PointDiffuseEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PointSpecularEffectMaker: MakeFromAbi {
    public typealias SwiftType = PointSpecularEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return PointSpecularEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PosterizeEffectMaker: MakeFromAbi {
    public typealias SwiftType = PosterizeEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return PosterizeEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PremultiplyEffectMaker: MakeFromAbi {
    public typealias SwiftType = PremultiplyEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return PremultiplyEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class RgbToHueEffectMaker: MakeFromAbi {
    public typealias SwiftType = RgbToHueEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return RgbToHueEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SaturationEffectMaker: MakeFromAbi {
    public typealias SwiftType = SaturationEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SaturationEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ScaleEffectMaker: MakeFromAbi {
    public typealias SwiftType = ScaleEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ScaleEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SepiaEffectMaker: MakeFromAbi {
    public typealias SwiftType = SepiaEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SepiaEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ShadowEffectMaker: MakeFromAbi {
    public typealias SwiftType = ShadowEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ShadowEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SharpenEffectMaker: MakeFromAbi {
    public typealias SwiftType = SharpenEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SharpenEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SpotDiffuseEffectMaker: MakeFromAbi {
    public typealias SwiftType = SpotDiffuseEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SpotDiffuseEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SpotSpecularEffectMaker: MakeFromAbi {
    public typealias SwiftType = SpotSpecularEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SpotSpecularEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class StraightenEffectMaker: MakeFromAbi {
    public typealias SwiftType = StraightenEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return StraightenEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TableTransfer3DEffectMaker: MakeFromAbi {
    public typealias SwiftType = TableTransfer3DEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TableTransfer3DEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TableTransferEffectMaker: MakeFromAbi {
    public typealias SwiftType = TableTransferEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TableTransferEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TemperatureAndTintEffectMaker: MakeFromAbi {
    public typealias SwiftType = TemperatureAndTintEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TemperatureAndTintEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TileEffectMaker: MakeFromAbi {
    public typealias SwiftType = TileEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TileEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TintEffectMaker: MakeFromAbi {
    public typealias SwiftType = TintEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TintEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class Transform2DEffectMaker: MakeFromAbi {
    public typealias SwiftType = Transform2DEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Transform2DEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class Transform3DEffectMaker: MakeFromAbi {
    public typealias SwiftType = Transform3DEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return Transform3DEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class TurbulenceEffectMaker: MakeFromAbi {
    public typealias SwiftType = TurbulenceEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return TurbulenceEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class UnPremultiplyEffectMaker: MakeFromAbi {
    public typealias SwiftType = UnPremultiplyEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return UnPremultiplyEffect(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class VignetteEffectMaker: MakeFromAbi {
    public typealias SwiftType = VignetteEffect
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return VignetteEffect(fromAbi: abi)
    }
}
