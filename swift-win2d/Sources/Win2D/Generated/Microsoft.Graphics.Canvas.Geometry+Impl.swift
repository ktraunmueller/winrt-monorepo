// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

@_spi(WinRTInternal)
public enum __IMPL_Microsoft_Graphics_Canvas_Geometry {
    public enum ICanvasPathReceiverBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathReceiver
        public typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Geometry.ICanvasPathReceiver
        public typealias SwiftProjection = AnyICanvasPathReceiver
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return ICanvasPathReceiverImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Microsoft_Graphics_Canvas_Geometry.ICanvasPathReceiverVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class ICanvasPathReceiverImpl: ICanvasPathReceiver, WinRTAbiImpl {
        fileprivate typealias Bridge = ICanvasPathReceiverBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.icanvaspathreceiver.beginfigure)
        fileprivate func beginFigure(_ startPoint: WindowsFoundation.Vector2, _ figureFill: CanvasFigureFill) throws {
            try _default.BeginFigure(startPoint, figureFill)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.icanvaspathreceiver.addarc)
        fileprivate func addArc(_ endPoint: WindowsFoundation.Vector2, _ radiusX: Float, _ radiusY: Float, _ rotationAngle: Float, _ sweepDirection: CanvasSweepDirection, _ arcSize: CanvasArcSize) throws {
            try _default.AddArc(endPoint, radiusX, radiusY, rotationAngle, sweepDirection, arcSize)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.icanvaspathreceiver.addcubicbezier)
        fileprivate func addCubicBezier(_ controlPoint1: WindowsFoundation.Vector2, _ controlPoint2: WindowsFoundation.Vector2, _ endPoint: WindowsFoundation.Vector2) throws {
            try _default.AddCubicBezier(controlPoint1, controlPoint2, endPoint)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.icanvaspathreceiver.addline)
        fileprivate func addLine(_ endPoint: WindowsFoundation.Vector2) throws {
            try _default.AddLine(endPoint)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.icanvaspathreceiver.addquadraticbezier)
        fileprivate func addQuadraticBezier(_ controlPoint: WindowsFoundation.Vector2, _ endPoint: WindowsFoundation.Vector2) throws {
            try _default.AddQuadraticBezier(controlPoint, endPoint)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.icanvaspathreceiver.setfilledregiondetermination)
        fileprivate func setFilledRegionDetermination(_ filledRegionDetermination: CanvasFilledRegionDetermination) throws {
            try _default.SetFilledRegionDetermination(filledRegionDetermination)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.icanvaspathreceiver.setsegmentoptions)
        fileprivate func setSegmentOptions(_ figureSegmentOptions: CanvasFigureSegmentOptions) throws {
            try _default.SetSegmentOptions(figureSegmentOptions)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.icanvaspathreceiver.endfigure)
        fileprivate func endFigure(_ figureLoop: CanvasFigureLoop) throws {
            try _default.EndFigure(figureLoop)
        }

    }

    public enum CanvasCachedGeometryBridge: AbiBridge {
        public typealias SwiftProjection = CanvasCachedGeometry
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry>?) -> CanvasCachedGeometry? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum CanvasGeometryBridge: AbiBridge {
        public typealias SwiftProjection = CanvasGeometry
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry>?) -> CanvasGeometry? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum CanvasGradientMeshBridge: AbiBridge {
        public typealias SwiftProjection = CanvasGradientMesh
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh>?) -> CanvasGradientMesh? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum CanvasPathBuilderBridge: AbiBridge {
        public typealias SwiftProjection = CanvasPathBuilder
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder>?) -> CanvasPathBuilder? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum CanvasStrokeStyleBridge: AbiBridge {
        public typealias SwiftProjection = CanvasStrokeStyle
        public typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle
        public static func from(abi: ComPtr<__x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle>?) -> CanvasStrokeStyle? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
extension CanvasGradientMeshPatch: WinRTBridgeable {
    public typealias ABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatch
    public static func from(abi: ABI) -> Self {
        .init(point00: .from(abi: abi.Point00), point01: .from(abi: abi.Point01), point02: .from(abi: abi.Point02), point03: .from(abi: abi.Point03), point10: .from(abi: abi.Point10), point11: .from(abi: abi.Point11), point12: .from(abi: abi.Point12), point13: .from(abi: abi.Point13), point20: .from(abi: abi.Point20), point21: .from(abi: abi.Point21), point22: .from(abi: abi.Point22), point23: .from(abi: abi.Point23), point30: .from(abi: abi.Point30), point31: .from(abi: abi.Point31), point32: .from(abi: abi.Point32), point33: .from(abi: abi.Point33), color00: .from(abi: abi.Color00), color03: .from(abi: abi.Color03), color30: .from(abi: abi.Color30), color33: .from(abi: abi.Color33), edge00To03: abi.Edge00To03, edge03To33: abi.Edge03To33, edge33To30: abi.Edge33To30, edge30To00: abi.Edge30To00)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

@_spi(WinRTInternal)
extension CanvasTriangleVertices: WinRTBridgeable {
    public typealias ABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasTriangleVertices
    public static func from(abi: ABI) -> Self {
        .init(vertex1: .from(abi: abi.Vertex1), vertex2: .from(abi: abi.Vertex2), vertex3: .from(abi: abi.Vertex3))
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

@_spi(WinRTInternal)
public class ICanvasPathReceiverMaker: MakeFromAbi {
    public typealias SwiftType = AnyICanvasPathReceiver
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Microsoft_Graphics_Canvas_Geometry.ICanvasPathReceiver = try! abi.QueryInterface()
        return __IMPL_Microsoft_Graphics_Canvas_Geometry.ICanvasPathReceiverBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class CanvasCachedGeometryMaker: MakeFromAbi {
    public typealias SwiftType = CanvasCachedGeometry
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return CanvasCachedGeometry(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class CanvasGeometryMaker: MakeFromAbi {
    public typealias SwiftType = CanvasGeometry
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return CanvasGeometry(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class CanvasGradientMeshMaker: MakeFromAbi {
    public typealias SwiftType = CanvasGradientMesh
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return CanvasGradientMesh(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class CanvasPathBuilderMaker: MakeFromAbi {
    public typealias SwiftType = CanvasPathBuilder
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return CanvasPathBuilder(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class CanvasStrokeStyleMaker: MakeFromAbi {
    public typealias SwiftType = CanvasStrokeStyle
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return CanvasStrokeStyle(fromAbi: abi)
    }
}
