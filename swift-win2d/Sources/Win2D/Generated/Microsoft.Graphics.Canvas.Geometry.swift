// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasarcsize)
public typealias CanvasArcSize = __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasArcSize
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvascapstyle)
public typealias CanvasCapStyle = __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasdashstyle)
public typealias CanvasDashStyle = __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasDashStyle
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasfigurefill)
public typealias CanvasFigureFill = __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureFill
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasfigureloop)
public typealias CanvasFigureLoop = __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureLoop
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasfiguresegmentoptions)
public typealias CanvasFigureSegmentOptions = __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureSegmentOptions
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasfilledregiondetermination)
public typealias CanvasFilledRegionDetermination = __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometrycombine)
public typealias CanvasGeometryCombine = __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryCombine
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometryrelation)
public typealias CanvasGeometryRelation = __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryRelation
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometrysimplification)
public typealias CanvasGeometrySimplification = __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometrySimplification
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmeshpatchedge)
public typealias CanvasGradientMeshPatchEdge = __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvaslinejoin)
public typealias CanvasLineJoin = __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasstroketransformbehavior)
public typealias CanvasStrokeTransformBehavior = __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasStrokeTransformBehavior
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvassweepdirection)
public typealias CanvasSweepDirection = __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasSweepDirection
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvascachedgeometry)
public final class CanvasCachedGeometry : WinRTClass, WindowsFoundation.IClosable {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Geometry.ICanvasCachedGeometry
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasCachedGeometry
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _ICanvasCachedGeometryStatics: __ABI_Microsoft_Graphics_Canvas_Geometry.ICanvasCachedGeometryStatics = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Geometry.CanvasCachedGeometry")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvascachedgeometry.createfill)
    public static func createFill(_ geometry: CanvasGeometry!) throws -> CanvasCachedGeometry! {
        return try _ICanvasCachedGeometryStatics.CreateFill(geometry)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvascachedgeometry.createfill)
    public static func createFill(_ geometry: CanvasGeometry!, _ flatteningTolerance: Float) throws -> CanvasCachedGeometry! {
        return try _ICanvasCachedGeometryStatics.CreateFillWithFlatteningTolerance(geometry, flatteningTolerance)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvascachedgeometry.createstroke)
    public static func createStroke(_ geometry: CanvasGeometry!, _ strokeWidth: Float) throws -> CanvasCachedGeometry! {
        return try _ICanvasCachedGeometryStatics.CreateStroke(geometry, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvascachedgeometry.createstroke)
    public static func createStroke(_ geometry: CanvasGeometry!, _ strokeWidth: Float, _ strokeStyle: CanvasStrokeStyle!) throws -> CanvasCachedGeometry! {
        return try _ICanvasCachedGeometryStatics.CreateStrokeWithStrokeStyle(geometry, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvascachedgeometry.createstroke)
    public static func createStroke(_ geometry: CanvasGeometry!, _ strokeWidth: Float, _ strokeStyle: CanvasStrokeStyle!, _ flatteningTolerance: Float) throws -> CanvasCachedGeometry! {
        return try _ICanvasCachedGeometryStatics.CreateStrokeWithStrokeStyleAndFlatteningTolerance(geometry, strokeWidth, strokeStyle, flatteningTolerance)
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvascachedgeometry.close)
    public func close() throws {
        try _IClosable.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvascachedgeometry.device)
    public var device : Win2D.CanvasDevice! {
        get { try! _default.get_Device() }
    }

    deinit {
        _IClosable = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry)
public final class CanvasGeometry : WinRTClass, WindowsFoundation.IClosable, UWP.IGeometrySource2D {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Geometry.ICanvasGeometry
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGeometry
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _ICanvasGeometryStatics: __ABI_Microsoft_Graphics_Canvas_Geometry.ICanvasGeometryStatics = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Geometry.CanvasGeometry")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.createrectangle)
    public static func createRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ rect: WindowsFoundation.Rect) throws -> CanvasGeometry! {
        return try _ICanvasGeometryStatics.CreateRectangle(resourceCreator, rect)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.createrectangle)
    public static func createRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ x: Float, _ y: Float, _ w: Float, _ h: Float) throws -> CanvasGeometry! {
        return try _ICanvasGeometryStatics.CreateRectangleAtCoords(resourceCreator, x, y, w, h)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.createroundedrectangle)
    public static func createRoundedRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ rect: WindowsFoundation.Rect, _ radiusX: Float, _ radiusY: Float) throws -> CanvasGeometry! {
        return try _ICanvasGeometryStatics.CreateRoundedRectangle(resourceCreator, rect, radiusX, radiusY)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.createroundedrectangle)
    public static func createRoundedRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ x: Float, _ y: Float, _ w: Float, _ h: Float, _ radiusX: Float, _ radiusY: Float) throws -> CanvasGeometry! {
        return try _ICanvasGeometryStatics.CreateRoundedRectangleAtCoords(resourceCreator, x, y, w, h, radiusX, radiusY)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.createellipse)
    public static func createEllipse(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ centerPoint: WindowsFoundation.Vector2, _ radiusX: Float, _ radiusY: Float) throws -> CanvasGeometry! {
        return try _ICanvasGeometryStatics.CreateEllipse(resourceCreator, centerPoint, radiusX, radiusY)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.createellipse)
    public static func createEllipse(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ x: Float, _ y: Float, _ radiusX: Float, _ radiusY: Float) throws -> CanvasGeometry! {
        return try _ICanvasGeometryStatics.CreateEllipseAtCoords(resourceCreator, x, y, radiusX, radiusY)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.createcircle)
    public static func createCircle(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ centerPoint: WindowsFoundation.Vector2, _ radius: Float) throws -> CanvasGeometry! {
        return try _ICanvasGeometryStatics.CreateCircle(resourceCreator, centerPoint, radius)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.createcircle)
    public static func createCircle(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ x: Float, _ y: Float, _ radius: Float) throws -> CanvasGeometry! {
        return try _ICanvasGeometryStatics.CreateCircleAtCoords(resourceCreator, x, y, radius)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.createpath)
    public static func createPath(_ pathBuilder: CanvasPathBuilder!) throws -> CanvasGeometry! {
        return try _ICanvasGeometryStatics.CreatePath(pathBuilder)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.createpolygon)
    public static func createPolygon(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ points: [WindowsFoundation.Vector2]) throws -> CanvasGeometry! {
        return try _ICanvasGeometryStatics.CreatePolygon(resourceCreator, points)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.creategroup)
    public static func createGroup(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ geometries: [CanvasGeometry?]) throws -> CanvasGeometry! {
        return try _ICanvasGeometryStatics.CreateGroup(resourceCreator, geometries)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.creategroup)
    public static func createGroup(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ geometries: [CanvasGeometry?], _ filledRegionDetermination: CanvasFilledRegionDetermination) throws -> CanvasGeometry! {
        return try _ICanvasGeometryStatics.CreateGroupWithFilledRegionDetermination(resourceCreator, geometries, filledRegionDetermination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.createtext)
    public static func createText(_ textLayout: Win2D.CanvasTextLayout!) throws -> CanvasGeometry! {
        return try _ICanvasGeometryStatics.CreateText(textLayout)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.createglyphrun)
    public static func createGlyphRun(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ point: WindowsFoundation.Vector2, _ fontFace: Win2D.CanvasFontFace!, _ fontSize: Float, _ glyphs: [Win2D.CanvasGlyph], _ isSideways: Bool, _ bidiLevel: UInt32, _ measuringMode: Win2D.CanvasTextMeasuringMode, _ glyphOrientation: Win2D.CanvasGlyphOrientation) throws -> CanvasGeometry! {
        return try _ICanvasGeometryStatics.CreateGlyphRun(resourceCreator, point, fontFace, fontSize, glyphs, isSideways, bidiLevel, measuringMode, glyphOrientation)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.computeflatteningtolerance)
    public static func computeFlatteningTolerance(_ dpi: Float, _ maximumZoomFactor: Float) throws -> Float {
        return try _ICanvasGeometryStatics.ComputeFlatteningTolerance(dpi, maximumZoomFactor)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.computeflatteningtolerance)
    public static func computeFlatteningTolerance(_ dpi: Float, _ maximumZoomFactor: Float, _ expectedGeometryTransform: WindowsFoundation.Matrix3x2) throws -> Float {
        return try _ICanvasGeometryStatics.ComputeFlatteningToleranceWithTransform(dpi, maximumZoomFactor, expectedGeometryTransform)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.defaultflatteningtolerance)
    public static var defaultFlatteningTolerance : Float {
        get { try! _ICanvasGeometryStatics.get_DefaultFlatteningTolerance() }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.close)
    public func close() throws {
        try _IClosable.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.combinewith)
    public func combineWith(_ otherGeometry: CanvasGeometry!, _ otherGeometryTransform: WindowsFoundation.Matrix3x2, _ combine: CanvasGeometryCombine) throws -> CanvasGeometry! {
        try _default.CombineWith(otherGeometry, otherGeometryTransform, combine)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.combinewith)
    public func combineWith(_ otherGeometry: CanvasGeometry!, _ otherGeometryTransform: WindowsFoundation.Matrix3x2, _ combine: CanvasGeometryCombine, _ flatteningTolerance: Float) throws -> CanvasGeometry! {
        try _default.CombineWithUsingFlatteningTolerance(otherGeometry, otherGeometryTransform, combine, flatteningTolerance)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.stroke)
    public func stroke(_ strokeWidth: Float) throws -> CanvasGeometry! {
        try _default.Stroke(strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.stroke)
    public func stroke(_ strokeWidth: Float, _ strokeStyle: CanvasStrokeStyle!) throws -> CanvasGeometry! {
        try _default.StrokeWithStrokeStyle(strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.stroke)
    public func stroke(_ strokeWidth: Float, _ strokeStyle: CanvasStrokeStyle!, _ transform: WindowsFoundation.Matrix3x2, _ flatteningTolerance: Float) throws -> CanvasGeometry! {
        try _default.StrokeWithAllOptions(strokeWidth, strokeStyle, transform, flatteningTolerance)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.outline)
    public func outline() throws -> CanvasGeometry! {
        try _default.Outline()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.outline)
    public func outline(_ transform: WindowsFoundation.Matrix3x2, _ flatteningTolerance: Float) throws -> CanvasGeometry! {
        try _default.OutlineWithTransformAndFlatteningTolerance(transform, flatteningTolerance)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.simplify)
    public func simplify(_ simplification: CanvasGeometrySimplification) throws -> CanvasGeometry! {
        try _default.Simplify(simplification)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.simplify)
    public func simplify(_ simplification: CanvasGeometrySimplification, _ transform: WindowsFoundation.Matrix3x2, _ flatteningTolerance: Float) throws -> CanvasGeometry! {
        try _default.SimplifyWithTransformAndFlatteningTolerance(simplification, transform, flatteningTolerance)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.transform)
    public func transform(_ transform: WindowsFoundation.Matrix3x2) throws -> CanvasGeometry! {
        try _default.Transform(transform)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.comparewith)
    public func compareWith(_ otherGeometry: CanvasGeometry!) throws -> CanvasGeometryRelation {
        try _default.CompareWith(otherGeometry)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.comparewith)
    public func compareWith(_ otherGeometry: CanvasGeometry!, _ otherGeometryTransform: WindowsFoundation.Matrix3x2, _ flatteningTolerance: Float) throws -> CanvasGeometryRelation {
        try _default.CompareWithUsingTransformAndFlatteningTolerance(otherGeometry, otherGeometryTransform, flatteningTolerance)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.computearea)
    public func computeArea() throws -> Float {
        try _default.ComputeArea()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.computearea)
    public func computeArea(_ transform: WindowsFoundation.Matrix3x2, _ flatteningTolerance: Float) throws -> Float {
        try _default.ComputeAreaWithTransformAndFlatteningTolerance(transform, flatteningTolerance)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.computepathlength)
    public func computePathLength() throws -> Float {
        try _default.ComputePathLength()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.computepathlength)
    public func computePathLength(_ transform: WindowsFoundation.Matrix3x2, _ flatteningTolerance: Float) throws -> Float {
        try _default.ComputePathLengthWithTransformAndFlatteningTolerance(transform, flatteningTolerance)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.computepointonpath)
    public func computePointOnPath(_ distance: Float) throws -> WindowsFoundation.Vector2 {
        try _default.ComputePointOnPath(distance)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.computepointonpath)
    public func computePointOnPath(_ distance: Float, _ tangent: inout WindowsFoundation.Vector2) throws -> WindowsFoundation.Vector2 {
        try _default.ComputePointOnPathWithTangent(distance, &tangent)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.computepointonpath)
    public func computePointOnPath(_ length: Float, _ transform: WindowsFoundation.Matrix3x2, _ flatteningTolerance: Float, _ tangent: inout WindowsFoundation.Vector2) throws -> WindowsFoundation.Vector2 {
        try _default.ComputePointOnPathWithTransformAndFlatteningToleranceAndTangent(length, transform, flatteningTolerance, &tangent)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.fillcontainspoint)
    public func fillContainsPoint(_ point: WindowsFoundation.Vector2) throws -> Bool {
        try _default.FillContainsPoint(point)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.fillcontainspoint)
    public func fillContainsPoint(_ point: WindowsFoundation.Vector2, _ transform: WindowsFoundation.Matrix3x2, _ flatteningTolerance: Float) throws -> Bool {
        try _default.FillContainsPointWithTransformAndFlatteningTolerance(point, transform, flatteningTolerance)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.computebounds)
    public func computeBounds() throws -> WindowsFoundation.Rect {
        try _default.ComputeBounds()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.computebounds)
    public func computeBounds(_ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _default.ComputeBoundsWithTransform(transform)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.computestrokebounds)
    public func computeStrokeBounds(_ strokeWidth: Float) throws -> WindowsFoundation.Rect {
        try _default.ComputeStrokeBounds(strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.computestrokebounds)
    public func computeStrokeBounds(_ strokeWidth: Float, _ strokeStyle: CanvasStrokeStyle!) throws -> WindowsFoundation.Rect {
        try _default.ComputeStrokeBoundsWithStrokeStyle(strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.computestrokebounds)
    public func computeStrokeBounds(_ strokeWidth: Float, _ strokeStyle: CanvasStrokeStyle!, _ transform: WindowsFoundation.Matrix3x2, _ flatteningTolerance: Float) throws -> WindowsFoundation.Rect {
        try _default.ComputeStrokeBoundsWithAllOptions(strokeWidth, strokeStyle, transform, flatteningTolerance)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.strokecontainspoint)
    public func strokeContainsPoint(_ point: WindowsFoundation.Vector2, _ strokeWidth: Float) throws -> Bool {
        try _default.StrokeContainsPoint(point, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.strokecontainspoint)
    public func strokeContainsPoint(_ point: WindowsFoundation.Vector2, _ strokeWidth: Float, _ strokeStyle: CanvasStrokeStyle!) throws -> Bool {
        try _default.StrokeContainsPointWithStrokeStyle(point, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.strokecontainspoint)
    public func strokeContainsPoint(_ point: WindowsFoundation.Vector2, _ strokeWidth: Float, _ strokeStyle: CanvasStrokeStyle!, _ transform: WindowsFoundation.Matrix3x2, _ flatteningTolerance: Float) throws -> Bool {
        try _default.StrokeContainsPointWithAllOptions(point, strokeWidth, strokeStyle, transform, flatteningTolerance)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.tessellate)
    public func tessellate() throws -> [CanvasTriangleVertices] {
        try _default.Tessellate()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.tessellate)
    public func tessellate(_ transform: WindowsFoundation.Matrix3x2, _ flatteningTolerance: Float) throws -> [CanvasTriangleVertices] {
        try _default.TessellateWithTransformAndFlatteningTolerance(transform, flatteningTolerance)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.sendpathto)
    public func sendPathTo(_ streamReader: AnyICanvasPathReceiver!) throws {
        try _default.SendPathTo(streamReader)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgeometry.device)
    public var device : Win2D.CanvasDevice! {
        get { try! _default.get_Device() }
    }

    private lazy var _IGeometrySource2D: __ABI_Windows_Graphics.IGeometrySource2D! = getInterfaceForCaching()
    deinit {
        _IClosable = nil
        _default = nil
        _IGeometrySource2D = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmesh)
public final class CanvasGradientMesh : WinRTClass, WindowsFoundation.IClosable {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Geometry.ICanvasGradientMesh
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasGradientMesh
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _ICanvasGradientMeshFactory: __ABI_Microsoft_Graphics_Canvas_Geometry.ICanvasGradientMeshFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh")
    public init(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ patchElements: [CanvasGradientMeshPatch]) {
        super.init(try! Self._ICanvasGradientMeshFactory.Create(resourceCreator, patchElements))
    }

    private static let _ICanvasGradientMeshStatics: __ABI_Microsoft_Graphics_Canvas_Geometry.ICanvasGradientMeshStatics = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Geometry.CanvasGradientMesh")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmesh.createcoonspatch)
    public static func createCoonsPatch(_ points: [WindowsFoundation.Vector2], _ colors: [WindowsFoundation.Vector4], _ edges: [CanvasGradientMeshPatchEdge]) throws -> CanvasGradientMeshPatch {
        return try _ICanvasGradientMeshStatics.CreateCoonsPatch(points, colors, edges)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmesh.createtensorpatch)
    public static func createTensorPatch(_ points: [WindowsFoundation.Vector2], _ colors: [WindowsFoundation.Vector4], _ edges: [CanvasGradientMeshPatchEdge]) throws -> CanvasGradientMeshPatch {
        return try _ICanvasGradientMeshStatics.CreateTensorPatch(points, colors, edges)
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmesh.close)
    public func close() throws {
        try _IClosable.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmesh.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _default.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmesh.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _default.GetBoundsWithTransform(resourceCreator, transform)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmesh.device)
    public var device : Win2D.CanvasDevice! {
        get { try! _default.get_Device() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmesh.patches)
    public var patches : [CanvasGradientMeshPatch] {
        get { try! _default.get_Patches() }
    }

    deinit {
        _IClosable = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvaspathbuilder)
public final class CanvasPathBuilder : WinRTClass, WindowsFoundation.IClosable {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Geometry.ICanvasPathBuilder
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasPathBuilder
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _ICanvasPathBuilderFactory: __ABI_Microsoft_Graphics_Canvas_Geometry.ICanvasPathBuilderFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Geometry.CanvasPathBuilder")
    public init(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) {
        super.init(try! Self._ICanvasPathBuilderFactory.Create(resourceCreator))
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvaspathbuilder.close)
    public func close() throws {
        try _IClosable.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvaspathbuilder.beginfigure)
    public func beginFigure(_ startPoint: WindowsFoundation.Vector2, _ figureFill: CanvasFigureFill) throws {
        try _default.BeginFigureWithFigureFill(startPoint, figureFill)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvaspathbuilder.beginfigure)
    public func beginFigure(_ startPoint: WindowsFoundation.Vector2) throws {
        try _default.BeginFigure(startPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvaspathbuilder.beginfigure)
    public func beginFigure(_ startX: Float, _ startY: Float, _ figureFill: CanvasFigureFill) throws {
        try _default.BeginFigureAtCoordsWithFigureFill(startX, startY, figureFill)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvaspathbuilder.beginfigure)
    public func beginFigure(_ startX: Float, _ startY: Float) throws {
        try _default.BeginFigureAtCoords(startX, startY)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvaspathbuilder.addarc)
    public func addArc(_ endPoint: WindowsFoundation.Vector2, _ radiusX: Float, _ radiusY: Float, _ rotationAngle: Float, _ sweepDirection: CanvasSweepDirection, _ arcSize: CanvasArcSize) throws {
        try _default.AddArcToPoint(endPoint, radiusX, radiusY, rotationAngle, sweepDirection, arcSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvaspathbuilder.addarc)
    public func addArc(_ centerPoint: WindowsFoundation.Vector2, _ radiusX: Float, _ radiusY: Float, _ startAngle: Float, _ sweepAngle: Float) throws {
        try _default.AddArcAroundEllipse(centerPoint, radiusX, radiusY, startAngle, sweepAngle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvaspathbuilder.addcubicbezier)
    public func addCubicBezier(_ controlPoint1: WindowsFoundation.Vector2, _ controlPoint2: WindowsFoundation.Vector2, _ endPoint: WindowsFoundation.Vector2) throws {
        try _default.AddCubicBezier(controlPoint1, controlPoint2, endPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvaspathbuilder.addline)
    public func addLine(_ endPoint: WindowsFoundation.Vector2) throws {
        try _default.AddLine(endPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvaspathbuilder.addline)
    public func addLine(_ x: Float, _ y: Float) throws {
        try _default.AddLineWithCoords(x, y)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvaspathbuilder.addquadraticbezier)
    public func addQuadraticBezier(_ controlPoint: WindowsFoundation.Vector2, _ endPoint: WindowsFoundation.Vector2) throws {
        try _default.AddQuadraticBezier(controlPoint, endPoint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvaspathbuilder.setfilledregiondetermination)
    public func setFilledRegionDetermination(_ filledRegionDetermination: CanvasFilledRegionDetermination) throws {
        try _default.SetFilledRegionDetermination(filledRegionDetermination)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvaspathbuilder.setsegmentoptions)
    public func setSegmentOptions(_ figureSegmentOptions: CanvasFigureSegmentOptions) throws {
        try _default.SetSegmentOptions(figureSegmentOptions)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvaspathbuilder.endfigure)
    public func endFigure(_ figureLoop: CanvasFigureLoop) throws {
        try _default.EndFigure(figureLoop)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvaspathbuilder.addgeometry)
    public func addGeometry(_ geometry: CanvasGeometry!) throws {
        try _default.AddGeometry(geometry)
    }

    deinit {
        _IClosable = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasstrokestyle)
public final class CanvasStrokeStyle : WinRTClass, WindowsFoundation.IClosable {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Geometry.ICanvasStrokeStyle
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CICanvasStrokeStyle
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Geometry.CanvasStrokeStyle")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasstrokestyle.close)
    public func close() throws {
        try _IClosable.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasstrokestyle.customdashstyle)
    public var customDashStyle : [Float] {
        get { try! _default.get_CustomDashStyle() }
        set { try! _default.put_CustomDashStyle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasstrokestyle.dashcap)
    public var dashCap : CanvasCapStyle {
        get { try! _default.get_DashCap() }
        set { try! _default.put_DashCap(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasstrokestyle.dashoffset)
    public var dashOffset : Float {
        get { try! _default.get_DashOffset() }
        set { try! _default.put_DashOffset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasstrokestyle.dashstyle)
    public var dashStyle : CanvasDashStyle {
        get { try! _default.get_DashStyle() }
        set { try! _default.put_DashStyle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasstrokestyle.endcap)
    public var endCap : CanvasCapStyle {
        get { try! _default.get_EndCap() }
        set { try! _default.put_EndCap(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasstrokestyle.linejoin)
    public var lineJoin : CanvasLineJoin {
        get { try! _default.get_LineJoin() }
        set { try! _default.put_LineJoin(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasstrokestyle.miterlimit)
    public var miterLimit : Float {
        get { try! _default.get_MiterLimit() }
        set { try! _default.put_MiterLimit(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasstrokestyle.startcap)
    public var startCap : CanvasCapStyle {
        get { try! _default.get_StartCap() }
        set { try! _default.put_StartCap(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasstrokestyle.transformbehavior)
    public var transformBehavior : CanvasStrokeTransformBehavior {
        get { try! _default.get_TransformBehavior() }
        set { try! _default.put_TransformBehavior(newValue) }
    }

    deinit {
        _IClosable = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmeshpatch)
public struct CanvasGradientMeshPatch: Hashable, Codable, Sendable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmeshpatch.point00)
    public var point00: WindowsFoundation.Vector2 = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmeshpatch.point01)
    public var point01: WindowsFoundation.Vector2 = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmeshpatch.point02)
    public var point02: WindowsFoundation.Vector2 = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmeshpatch.point03)
    public var point03: WindowsFoundation.Vector2 = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmeshpatch.point10)
    public var point10: WindowsFoundation.Vector2 = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmeshpatch.point11)
    public var point11: WindowsFoundation.Vector2 = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmeshpatch.point12)
    public var point12: WindowsFoundation.Vector2 = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmeshpatch.point13)
    public var point13: WindowsFoundation.Vector2 = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmeshpatch.point20)
    public var point20: WindowsFoundation.Vector2 = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmeshpatch.point21)
    public var point21: WindowsFoundation.Vector2 = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmeshpatch.point22)
    public var point22: WindowsFoundation.Vector2 = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmeshpatch.point23)
    public var point23: WindowsFoundation.Vector2 = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmeshpatch.point30)
    public var point30: WindowsFoundation.Vector2 = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmeshpatch.point31)
    public var point31: WindowsFoundation.Vector2 = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmeshpatch.point32)
    public var point32: WindowsFoundation.Vector2 = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmeshpatch.point33)
    public var point33: WindowsFoundation.Vector2 = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmeshpatch.color00)
    public var color00: WindowsFoundation.Vector4 = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmeshpatch.color03)
    public var color03: WindowsFoundation.Vector4 = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmeshpatch.color30)
    public var color30: WindowsFoundation.Vector4 = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmeshpatch.color33)
    public var color33: WindowsFoundation.Vector4 = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmeshpatch.edge00to03)
    public var edge00To03: CanvasGradientMeshPatchEdge = .init(0)
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmeshpatch.edge03to33)
    public var edge03To33: CanvasGradientMeshPatchEdge = .init(0)
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmeshpatch.edge33to30)
    public var edge33To30: CanvasGradientMeshPatchEdge = .init(0)
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvasgradientmeshpatch.edge30to00)
    public var edge30To00: CanvasGradientMeshPatchEdge = .init(0)
    public init() {}
    public init(point00: WindowsFoundation.Vector2, point01: WindowsFoundation.Vector2, point02: WindowsFoundation.Vector2, point03: WindowsFoundation.Vector2, point10: WindowsFoundation.Vector2, point11: WindowsFoundation.Vector2, point12: WindowsFoundation.Vector2, point13: WindowsFoundation.Vector2, point20: WindowsFoundation.Vector2, point21: WindowsFoundation.Vector2, point22: WindowsFoundation.Vector2, point23: WindowsFoundation.Vector2, point30: WindowsFoundation.Vector2, point31: WindowsFoundation.Vector2, point32: WindowsFoundation.Vector2, point33: WindowsFoundation.Vector2, color00: WindowsFoundation.Vector4, color03: WindowsFoundation.Vector4, color30: WindowsFoundation.Vector4, color33: WindowsFoundation.Vector4, edge00To03: CanvasGradientMeshPatchEdge, edge03To33: CanvasGradientMeshPatchEdge, edge33To30: CanvasGradientMeshPatchEdge, edge30To00: CanvasGradientMeshPatchEdge) {
        self.point00 = point00
        self.point01 = point01
        self.point02 = point02
        self.point03 = point03
        self.point10 = point10
        self.point11 = point11
        self.point12 = point12
        self.point13 = point13
        self.point20 = point20
        self.point21 = point21
        self.point22 = point22
        self.point23 = point23
        self.point30 = point30
        self.point31 = point31
        self.point32 = point32
        self.point33 = point33
        self.color00 = color00
        self.color03 = color03
        self.color30 = color30
        self.color33 = color33
        self.edge00To03 = edge00To03
        self.edge03To33 = edge03To33
        self.edge33To30 = edge33To30
        self.edge30To00 = edge30To00
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvastrianglevertices)
public struct CanvasTriangleVertices: Hashable, Codable, Sendable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvastrianglevertices.vertex1)
    public var vertex1: WindowsFoundation.Vector2 = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvastrianglevertices.vertex2)
    public var vertex2: WindowsFoundation.Vector2 = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.canvastrianglevertices.vertex3)
    public var vertex3: WindowsFoundation.Vector2 = .init()
    public init() {}
    public init(vertex1: WindowsFoundation.Vector2, vertex2: WindowsFoundation.Vector2, vertex3: WindowsFoundation.Vector2) {
        self.vertex1 = vertex1
        self.vertex2 = vertex2
        self.vertex3 = vertex3
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.icanvaspathreceiver)
public protocol ICanvasPathReceiver : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.icanvaspathreceiver.beginfigure)
    func beginFigure(_ startPoint: WindowsFoundation.Vector2, _ figureFill: Win2D.CanvasFigureFill) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.icanvaspathreceiver.addarc)
    func addArc(_ endPoint: WindowsFoundation.Vector2, _ radiusX: Float, _ radiusY: Float, _ rotationAngle: Float, _ sweepDirection: Win2D.CanvasSweepDirection, _ arcSize: Win2D.CanvasArcSize) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.icanvaspathreceiver.addcubicbezier)
    func addCubicBezier(_ controlPoint1: WindowsFoundation.Vector2, _ controlPoint2: WindowsFoundation.Vector2, _ endPoint: WindowsFoundation.Vector2) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.icanvaspathreceiver.addline)
    func addLine(_ endPoint: WindowsFoundation.Vector2) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.icanvaspathreceiver.addquadraticbezier)
    func addQuadraticBezier(_ controlPoint: WindowsFoundation.Vector2, _ endPoint: WindowsFoundation.Vector2) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.icanvaspathreceiver.setfilledregiondetermination)
    func setFilledRegionDetermination(_ filledRegionDetermination: Win2D.CanvasFilledRegionDetermination) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.icanvaspathreceiver.setsegmentoptions)
    func setSegmentOptions(_ figureSegmentOptions: Win2D.CanvasFigureSegmentOptions) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.geometry.icanvaspathreceiver.endfigure)
    func endFigure(_ figureLoop: Win2D.CanvasFigureLoop) throws
}

extension ICanvasPathReceiver {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_Graphics_Canvas_Geometry.ICanvasPathReceiverWrapper.IID:
                let wrapper = __ABI_Microsoft_Graphics_Canvas_Geometry.ICanvasPathReceiverWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyICanvasPathReceiver = any ICanvasPathReceiver

extension Win2D.CanvasArcSize {
    public static var small : Win2D.CanvasArcSize {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasArcSize_Small
    }
    public static var large : Win2D.CanvasArcSize {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasArcSize_Large
    }
}
extension Win2D.CanvasArcSize: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasCapStyle {
    public static var flat : Win2D.CanvasCapStyle {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle_Flat
    }
    public static var square : Win2D.CanvasCapStyle {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle_Square
    }
    public static var round : Win2D.CanvasCapStyle {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle_Round
    }
    public static var triangle : Win2D.CanvasCapStyle {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasCapStyle_Triangle
    }
}
extension Win2D.CanvasCapStyle: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasDashStyle {
    public static var solid : Win2D.CanvasDashStyle {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasDashStyle_Solid
    }
    public static var dash : Win2D.CanvasDashStyle {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasDashStyle_Dash
    }
    public static var dot : Win2D.CanvasDashStyle {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasDashStyle_Dot
    }
    public static var dashDot : Win2D.CanvasDashStyle {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasDashStyle_DashDot
    }
    public static var dashDotDot : Win2D.CanvasDashStyle {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasDashStyle_DashDotDot
    }
}
extension Win2D.CanvasDashStyle: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasFigureFill {
    public static var `default` : Win2D.CanvasFigureFill {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureFill_Default
    }
    public static var doesNotAffectFills : Win2D.CanvasFigureFill {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureFill_DoesNotAffectFills
    }
}
extension Win2D.CanvasFigureFill: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasFigureLoop {
    public static var open : Win2D.CanvasFigureLoop {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureLoop_Open
    }
    public static var closed : Win2D.CanvasFigureLoop {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureLoop_Closed
    }
}
extension Win2D.CanvasFigureLoop: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasFigureSegmentOptions {
    public static var none : Win2D.CanvasFigureSegmentOptions {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureSegmentOptions_None
    }
    public static var forceUnstroked : Win2D.CanvasFigureSegmentOptions {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureSegmentOptions_ForceUnstroked
    }
    public static var forceRoundLineJoin : Win2D.CanvasFigureSegmentOptions {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFigureSegmentOptions_ForceRoundLineJoin
    }
}
extension Win2D.CanvasFigureSegmentOptions: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasFilledRegionDetermination {
    public static var alternate : Win2D.CanvasFilledRegionDetermination {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination_Alternate
    }
    public static var winding : Win2D.CanvasFilledRegionDetermination {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasFilledRegionDetermination_Winding
    }
}
extension Win2D.CanvasFilledRegionDetermination: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasGeometryCombine {
    public static var union : Win2D.CanvasGeometryCombine {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryCombine_Union
    }
    public static var intersect : Win2D.CanvasGeometryCombine {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryCombine_Intersect
    }
    public static var xor : Win2D.CanvasGeometryCombine {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryCombine_Xor
    }
    public static var exclude : Win2D.CanvasGeometryCombine {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryCombine_Exclude
    }
}
extension Win2D.CanvasGeometryCombine: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasGeometryRelation {
    public static var disjoint : Win2D.CanvasGeometryRelation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryRelation_Disjoint
    }
    public static var contained : Win2D.CanvasGeometryRelation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryRelation_Contained
    }
    public static var contains : Win2D.CanvasGeometryRelation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryRelation_Contains
    }
    public static var overlap : Win2D.CanvasGeometryRelation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometryRelation_Overlap
    }
}
extension Win2D.CanvasGeometryRelation: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasGeometrySimplification {
    public static var cubicsAndLines : Win2D.CanvasGeometrySimplification {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometrySimplification_CubicsAndLines
    }
    public static var lines : Win2D.CanvasGeometrySimplification {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGeometrySimplification_Lines
    }
}
extension Win2D.CanvasGeometrySimplification: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasGradientMeshPatchEdge {
    public static var aliased : Win2D.CanvasGradientMeshPatchEdge {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge_Aliased
    }
    public static var antialiased : Win2D.CanvasGradientMeshPatchEdge {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge_Antialiased
    }
    public static var aliasedAndInflated : Win2D.CanvasGradientMeshPatchEdge {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasGradientMeshPatchEdge_AliasedAndInflated
    }
}
extension Win2D.CanvasGradientMeshPatchEdge: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasLineJoin {
    public static var miter : Win2D.CanvasLineJoin {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin_Miter
    }
    public static var bevel : Win2D.CanvasLineJoin {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin_Bevel
    }
    public static var round : Win2D.CanvasLineJoin {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin_Round
    }
    public static var miterOrBevel : Win2D.CanvasLineJoin {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasLineJoin_MiterOrBevel
    }
}
extension Win2D.CanvasLineJoin: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasStrokeTransformBehavior {
    public static var normal : Win2D.CanvasStrokeTransformBehavior {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasStrokeTransformBehavior_Normal
    }
    public static var fixed : Win2D.CanvasStrokeTransformBehavior {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasStrokeTransformBehavior_Fixed
    }
    public static var hairline : Win2D.CanvasStrokeTransformBehavior {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasStrokeTransformBehavior_Hairline
    }
}
extension Win2D.CanvasStrokeTransformBehavior: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasSweepDirection {
    public static var counterClockwise : Win2D.CanvasSweepDirection {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasSweepDirection_CounterClockwise
    }
    public static var clockwise : Win2D.CanvasSweepDirection {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CGeometry_CCanvasSweepDirection_Clockwise
    }
}
extension Win2D.CanvasSweepDirection: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

