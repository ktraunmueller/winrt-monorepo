// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasimagebrush)
public final class CanvasImageBrush : WinRTClass, WindowsFoundation.IClosable, ICanvasBrush {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasImageBrush
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _ICanvasImageBrushFactory: __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasImageBrushFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Brushes.CanvasImageBrush")
    public init(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) {
        super.init(try! Self._ICanvasImageBrushFactory.Create(resourceCreator))
    }

    public init(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ image: Win2D.AnyICanvasImage!) {
        super.init(try! Self._ICanvasImageBrushFactory.CreateWithImage(resourceCreator, image))
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasimagebrush.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasBrush: __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrush! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasimagebrush.device)
    public var device : Win2D.CanvasDevice! {
        get { try! _ICanvasBrush.get_Device() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasimagebrush.opacity)
    public var opacity : Float {
        get { try! _ICanvasBrush.get_Opacity() }
        set { try! _ICanvasBrush.put_Opacity(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasimagebrush.transform)
    public var transform : WindowsFoundation.Matrix3x2 {
        get { try! _ICanvasBrush.get_Transform() }
        set { try! _ICanvasBrush.put_Transform(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasimagebrush.extendx)
    public var extendX : Win2D.CanvasEdgeBehavior {
        get { try! _default.get_ExtendX() }
        set { try! _default.put_ExtendX(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasimagebrush.extendy)
    public var extendY : Win2D.CanvasEdgeBehavior {
        get { try! _default.get_ExtendY() }
        set { try! _default.put_ExtendY(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasimagebrush.image)
    public var image : Win2D.AnyICanvasImage! {
        get { try! _default.get_Image() }
        set { try! _default.put_Image(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasimagebrush.interpolation)
    public var interpolation : Win2D.CanvasImageInterpolation {
        get { try! _default.get_Interpolation() }
        set { try! _default.put_Interpolation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasimagebrush.sourcerectangle)
    public var sourceRectangle : WindowsFoundation.Rect? {
        get { try! _default.get_SourceRectangle() }
        set { try! _default.put_SourceRectangle(newValue) }
    }

    deinit {
        _IClosable = nil
        _ICanvasBrush = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvaslineargradientbrush)
public final class CanvasLinearGradientBrush : WinRTClass, WindowsFoundation.IClosable, ICanvasBrush {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasLinearGradientBrush
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _ICanvasLinearGradientBrushFactory: __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasLinearGradientBrushFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush")
    public init(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ startColor: UWP.Color, _ endColor: UWP.Color) {
        super.init(try! Self._ICanvasLinearGradientBrushFactory.CreateSimple(resourceCreator, startColor, endColor))
    }

    public init(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ gradientStops: [CanvasGradientStop]) {
        super.init(try! Self._ICanvasLinearGradientBrushFactory.CreateWithStops(resourceCreator, gradientStops))
    }

    public init(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ gradientStops: [CanvasGradientStop], _ edgeBehavior: Win2D.CanvasEdgeBehavior, _ alphaMode: Win2D.CanvasAlphaMode) {
        super.init(try! Self._ICanvasLinearGradientBrushFactory.CreateWithEdgeBehaviorAndAlphaMode(resourceCreator, gradientStops, edgeBehavior, alphaMode))
    }

    public init(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ gradientStops: [CanvasGradientStop], _ edgeBehavior: Win2D.CanvasEdgeBehavior, _ alphaMode: Win2D.CanvasAlphaMode, _ preInterpolationSpace: Win2D.CanvasColorSpace, _ postInterpolationSpace: Win2D.CanvasColorSpace, _ bufferPrecision: Win2D.CanvasBufferPrecision) {
        super.init(try! Self._ICanvasLinearGradientBrushFactory.CreateWithEdgeBehaviorAndInterpolationOptions(resourceCreator, gradientStops, edgeBehavior, alphaMode, preInterpolationSpace, postInterpolationSpace, bufferPrecision))
    }

    private static let _ICanvasLinearGradientBrushStatics: __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasLinearGradientBrushStatics = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Brushes.CanvasLinearGradientBrush")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvaslineargradientbrush.createhdr)
    public static func createHdr(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ startColorHdr: WindowsFoundation.Vector4, _ endColorHdr: WindowsFoundation.Vector4) throws -> CanvasLinearGradientBrush! {
        return try _ICanvasLinearGradientBrushStatics.CreateHdrSimple(resourceCreator, startColorHdr, endColorHdr)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvaslineargradientbrush.createhdr)
    public static func createHdr(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ gradientStopsHdr: [CanvasGradientStopHdr]) throws -> CanvasLinearGradientBrush! {
        return try _ICanvasLinearGradientBrushStatics.CreateHdrWithStops(resourceCreator, gradientStopsHdr)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvaslineargradientbrush.createhdr)
    public static func createHdr(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ gradientStopsHdr: [CanvasGradientStopHdr], _ edgeBehavior: Win2D.CanvasEdgeBehavior, _ alphaMode: Win2D.CanvasAlphaMode) throws -> CanvasLinearGradientBrush! {
        return try _ICanvasLinearGradientBrushStatics.CreateHdrWithEdgeBehaviorAndAlphaMode(resourceCreator, gradientStopsHdr, edgeBehavior, alphaMode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvaslineargradientbrush.createhdr)
    public static func createHdr(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ gradientStopsHdr: [CanvasGradientStopHdr], _ edgeBehavior: Win2D.CanvasEdgeBehavior, _ alphaMode: Win2D.CanvasAlphaMode, _ preInterpolationSpace: Win2D.CanvasColorSpace, _ postInterpolationSpace: Win2D.CanvasColorSpace, _ bufferPrecision: Win2D.CanvasBufferPrecision) throws -> CanvasLinearGradientBrush! {
        return try _ICanvasLinearGradientBrushStatics.CreateHdrWithEdgeBehaviorAndInterpolationOptions(resourceCreator, gradientStopsHdr, edgeBehavior, alphaMode, preInterpolationSpace, postInterpolationSpace, bufferPrecision)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvaslineargradientbrush.createrainbow)
    public static func createRainbow(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ eldritchness: Float) throws -> CanvasLinearGradientBrush! {
        return try _ICanvasLinearGradientBrushStatics.CreateRainbow(resourceCreator, eldritchness)
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvaslineargradientbrush.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasBrush: __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrush! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvaslineargradientbrush.device)
    public var device : Win2D.CanvasDevice! {
        get { try! _ICanvasBrush.get_Device() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvaslineargradientbrush.opacity)
    public var opacity : Float {
        get { try! _ICanvasBrush.get_Opacity() }
        set { try! _ICanvasBrush.put_Opacity(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvaslineargradientbrush.transform)
    public var transform : WindowsFoundation.Matrix3x2 {
        get { try! _ICanvasBrush.get_Transform() }
        set { try! _ICanvasBrush.put_Transform(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvaslineargradientbrush.alphamode)
    public var alphaMode : Win2D.CanvasAlphaMode {
        get { try! _default.get_AlphaMode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvaslineargradientbrush.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision {
        get { try! _default.get_BufferPrecision() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvaslineargradientbrush.edgebehavior)
    public var edgeBehavior : Win2D.CanvasEdgeBehavior {
        get { try! _default.get_EdgeBehavior() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvaslineargradientbrush.endpoint)
    public var endPoint : WindowsFoundation.Vector2 {
        get { try! _default.get_EndPoint() }
        set { try! _default.put_EndPoint(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvaslineargradientbrush.postinterpolationspace)
    public var postInterpolationSpace : Win2D.CanvasColorSpace {
        get { try! _default.get_PostInterpolationSpace() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvaslineargradientbrush.preinterpolationspace)
    public var preInterpolationSpace : Win2D.CanvasColorSpace {
        get { try! _default.get_PreInterpolationSpace() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvaslineargradientbrush.startpoint)
    public var startPoint : WindowsFoundation.Vector2 {
        get { try! _default.get_StartPoint() }
        set { try! _default.put_StartPoint(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvaslineargradientbrush.stops)
    public var stops : [CanvasGradientStop] {
        get { try! _default.get_Stops() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvaslineargradientbrush.stopshdr)
    public var stopsHdr : [CanvasGradientStopHdr] {
        get { try! _default.get_StopsHdr() }
    }

    deinit {
        _IClosable = nil
        _ICanvasBrush = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasradialgradientbrush)
public final class CanvasRadialGradientBrush : WinRTClass, WindowsFoundation.IClosable, ICanvasBrush {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasRadialGradientBrush
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _ICanvasRadialGradientBrushFactory: __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasRadialGradientBrushFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush")
    public init(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ startColor: UWP.Color, _ endColor: UWP.Color) {
        super.init(try! Self._ICanvasRadialGradientBrushFactory.CreateSimple(resourceCreator, startColor, endColor))
    }

    public init(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ gradientStops: [CanvasGradientStop]) {
        super.init(try! Self._ICanvasRadialGradientBrushFactory.CreateWithStops(resourceCreator, gradientStops))
    }

    public init(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ gradientStops: [CanvasGradientStop], _ edgeBehavior: Win2D.CanvasEdgeBehavior, _ alphaMode: Win2D.CanvasAlphaMode) {
        super.init(try! Self._ICanvasRadialGradientBrushFactory.CreateWithEdgeBehaviorAndAlphaMode(resourceCreator, gradientStops, edgeBehavior, alphaMode))
    }

    public init(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ gradientStops: [CanvasGradientStop], _ edgeBehavior: Win2D.CanvasEdgeBehavior, _ alphaMode: Win2D.CanvasAlphaMode, _ preInterpolationSpace: Win2D.CanvasColorSpace, _ postInterpolationSpace: Win2D.CanvasColorSpace, _ bufferPrecision: Win2D.CanvasBufferPrecision) {
        super.init(try! Self._ICanvasRadialGradientBrushFactory.CreateWithEdgeBehaviorAndInterpolationOptions(resourceCreator, gradientStops, edgeBehavior, alphaMode, preInterpolationSpace, postInterpolationSpace, bufferPrecision))
    }

    private static let _ICanvasRadialGradientBrushStatics: __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasRadialGradientBrushStatics = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Brushes.CanvasRadialGradientBrush")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasradialgradientbrush.createhdr)
    public static func createHdr(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ startColorHdr: WindowsFoundation.Vector4, _ endColorHdr: WindowsFoundation.Vector4) throws -> CanvasRadialGradientBrush! {
        return try _ICanvasRadialGradientBrushStatics.CreateHdrSimple(resourceCreator, startColorHdr, endColorHdr)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasradialgradientbrush.createhdr)
    public static func createHdr(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ gradientStops: [CanvasGradientStopHdr]) throws -> CanvasRadialGradientBrush! {
        return try _ICanvasRadialGradientBrushStatics.CreateHdrWithStops(resourceCreator, gradientStops)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasradialgradientbrush.createhdr)
    public static func createHdr(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ gradientStops: [CanvasGradientStopHdr], _ edgeBehavior: Win2D.CanvasEdgeBehavior, _ alphaMode: Win2D.CanvasAlphaMode) throws -> CanvasRadialGradientBrush! {
        return try _ICanvasRadialGradientBrushStatics.CreateHdrWithEdgeBehaviorAndAlphaMode(resourceCreator, gradientStops, edgeBehavior, alphaMode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasradialgradientbrush.createhdr)
    public static func createHdr(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ gradientStops: [CanvasGradientStopHdr], _ edgeBehavior: Win2D.CanvasEdgeBehavior, _ alphaMode: Win2D.CanvasAlphaMode, _ preInterpolationSpace: Win2D.CanvasColorSpace, _ postInterpolationSpace: Win2D.CanvasColorSpace, _ bufferPrecision: Win2D.CanvasBufferPrecision) throws -> CanvasRadialGradientBrush! {
        return try _ICanvasRadialGradientBrushStatics.CreateHdrWithEdgeBehaviorAndInterpolationOptions(resourceCreator, gradientStops, edgeBehavior, alphaMode, preInterpolationSpace, postInterpolationSpace, bufferPrecision)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasradialgradientbrush.createrainbow)
    public static func createRainbow(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ eldritchness: Float) throws -> CanvasRadialGradientBrush! {
        return try _ICanvasRadialGradientBrushStatics.CreateRainbow(resourceCreator, eldritchness)
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasradialgradientbrush.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasBrush: __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrush! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasradialgradientbrush.device)
    public var device : Win2D.CanvasDevice! {
        get { try! _ICanvasBrush.get_Device() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasradialgradientbrush.opacity)
    public var opacity : Float {
        get { try! _ICanvasBrush.get_Opacity() }
        set { try! _ICanvasBrush.put_Opacity(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasradialgradientbrush.transform)
    public var transform : WindowsFoundation.Matrix3x2 {
        get { try! _ICanvasBrush.get_Transform() }
        set { try! _ICanvasBrush.put_Transform(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasradialgradientbrush.alphamode)
    public var alphaMode : Win2D.CanvasAlphaMode {
        get { try! _default.get_AlphaMode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasradialgradientbrush.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision {
        get { try! _default.get_BufferPrecision() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasradialgradientbrush.center)
    public var center : WindowsFoundation.Vector2 {
        get { try! _default.get_Center() }
        set { try! _default.put_Center(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasradialgradientbrush.edgebehavior)
    public var edgeBehavior : Win2D.CanvasEdgeBehavior {
        get { try! _default.get_EdgeBehavior() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasradialgradientbrush.originoffset)
    public var originOffset : WindowsFoundation.Vector2 {
        get { try! _default.get_OriginOffset() }
        set { try! _default.put_OriginOffset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasradialgradientbrush.postinterpolationspace)
    public var postInterpolationSpace : Win2D.CanvasColorSpace {
        get { try! _default.get_PostInterpolationSpace() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasradialgradientbrush.preinterpolationspace)
    public var preInterpolationSpace : Win2D.CanvasColorSpace {
        get { try! _default.get_PreInterpolationSpace() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasradialgradientbrush.radiusx)
    public var radiusX : Float {
        get { try! _default.get_RadiusX() }
        set { try! _default.put_RadiusX(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasradialgradientbrush.radiusy)
    public var radiusY : Float {
        get { try! _default.get_RadiusY() }
        set { try! _default.put_RadiusY(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasradialgradientbrush.stops)
    public var stops : [CanvasGradientStop] {
        get { try! _default.get_Stops() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasradialgradientbrush.stopshdr)
    public var stopsHdr : [CanvasGradientStopHdr] {
        get { try! _default.get_StopsHdr() }
    }

    deinit {
        _IClosable = nil
        _ICanvasBrush = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvassolidcolorbrush)
public final class CanvasSolidColorBrush : WinRTClass, WindowsFoundation.IClosable, ICanvasBrush {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasSolidColorBrush
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _ICanvasSolidColorBrushFactory: __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasSolidColorBrushFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush")
    public init(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ color: UWP.Color) {
        super.init(try! Self._ICanvasSolidColorBrushFactory.Create(resourceCreator, color))
    }

    private static let _ICanvasSolidColorBrushStatics: __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasSolidColorBrushStatics = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Brushes.CanvasSolidColorBrush")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvassolidcolorbrush.createhdr)
    public static func createHdr(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ colorHdr: WindowsFoundation.Vector4) throws -> CanvasSolidColorBrush! {
        return try _ICanvasSolidColorBrushStatics.CreateHdr(resourceCreator, colorHdr)
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvassolidcolorbrush.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasBrush: __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrush! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvassolidcolorbrush.device)
    public var device : Win2D.CanvasDevice! {
        get { try! _ICanvasBrush.get_Device() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvassolidcolorbrush.opacity)
    public var opacity : Float {
        get { try! _ICanvasBrush.get_Opacity() }
        set { try! _ICanvasBrush.put_Opacity(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvassolidcolorbrush.transform)
    public var transform : WindowsFoundation.Matrix3x2 {
        get { try! _ICanvasBrush.get_Transform() }
        set { try! _ICanvasBrush.put_Transform(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvassolidcolorbrush.color)
    public var color : UWP.Color {
        get { try! _default.get_Color() }
        set { try! _default.put_Color(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvassolidcolorbrush.colorhdr)
    public var colorHdr : WindowsFoundation.Vector4 {
        get { try! _default.get_ColorHdr() }
        set { try! _default.put_ColorHdr(newValue) }
    }

    deinit {
        _IClosable = nil
        _ICanvasBrush = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasgradientstop)
public struct CanvasGradientStop: Hashable, Codable, Sendable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasgradientstop.position)
    public var position: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasgradientstop.color)
    public var color: UWP.Color = .init()
    public init() {}
    public init(position: Float, color: UWP.Color) {
        self.position = position
        self.color = color
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasgradientstophdr)
public struct CanvasGradientStopHdr: Hashable, Codable, Sendable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasgradientstophdr.position)
    public var position: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.canvasgradientstophdr.color)
    public var color: WindowsFoundation.Vector4 = .init()
    public init() {}
    public init(position: Float, color: WindowsFoundation.Vector4) {
        self.position = position
        self.color = color
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.icanvasbrush)
public protocol ICanvasBrush : WindowsFoundation.IClosable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.icanvasbrush.device)
    var device: Win2D.CanvasDevice! { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.icanvasbrush.opacity)
    var opacity: Float { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.brushes.icanvasbrush.transform)
    var transform: WindowsFoundation.Matrix3x2 { get set }
}

extension ICanvasBrush {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper.IID:
                let wrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Foundation.IClosableWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IClosableWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyICanvasBrush = any ICanvasBrush

