// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasalphamode)
public typealias CanvasAlphaMode = __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasantialiasing)
public typealias CanvasAntialiasing = __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmapfileformat)
public typealias CanvasBitmapFileFormat = __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasblend)
public typealias CanvasBlend = __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbufferprecision)
public typealias CanvasBufferPrecision = __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvascolorspace)
public typealias CanvasColorSpace = __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvascomposite)
public typealias CanvasComposite = __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdebuglevel)
public typealias CanvasDebugLevel = __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdpirounding)
public typealias CanvasDpiRounding = __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasedgebehavior)
public typealias CanvasEdgeBehavior = __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasimageinterpolation)
public typealias CanvasImageInterpolation = __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvaslayeroptions)
public typealias CanvasLayerOptions = __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspriteflip)
public typealias CanvasSpriteFlip = __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspriteoptions)
public typealias CanvasSpriteOptions = __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspritesortmode)
public typealias CanvasSpriteSortMode = __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasswapchainrotation)
public typealias CanvasSwapChainRotation = __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasunits)
public typealias CanvasUnits = __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasUnits
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasvirtualbitmapoptions)
public typealias CanvasVirtualBitmapOptions = __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasactivelayer)
public final class CanvasActiveLayer : WinRTClass, WindowsFoundation.IClosable {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas.ICanvasActiveLayer
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasActiveLayer
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasactivelayer.close)
    public func close() throws {
        try _IClosable.Close()
    }

    deinit {
        _IClosable = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap)
open class CanvasBitmap : WinRTClass, UWP.IGraphicsEffectSource, WindowsFoundation.IClosable, ICanvasImage, UWP.IDirect3DSurface, ICanvasResourceCreator, ICanvasResourceCreatorWithDpi {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas.ICanvasBitmap
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasBitmap
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override open func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    @_spi(WinRTInternal)
    public init<Composable: ComposableImpl>(
        composing: Composable.Type,
        _ createCallback: (UnsealedWinRTClassWrapper<Composable>?, inout WindowsFoundation.IInspectable?) -> Composable.Default.SwiftABI)
    {
        super.init()
        MakeComposed(composing: composing, (self as! Composable.Class), createCallback)
    }
    override open func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static var _ICanvasBitmapFactory : __ABI_Microsoft_Graphics_Canvas.ICanvasBitmapFactory =  try! RoGetActivationFactory("Microsoft.Graphics.Canvas.CanvasBitmap")

    private static let _ICanvasBitmapStatics: __ABI_Microsoft_Graphics_Canvas.ICanvasBitmapStatics = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.CanvasBitmap")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.createfromdirect3d11surface)
    public class func createFromDirect3D11Surface(_ resourceCreator: AnyICanvasResourceCreator!, _ surface: UWP.AnyIDirect3DSurface!) throws -> CanvasBitmap! {
        return try _ICanvasBitmapStatics.CreateFromDirect3D11Surface(resourceCreator, surface)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.createfromdirect3d11surface)
    public class func createFromDirect3D11Surface(_ resourceCreator: AnyICanvasResourceCreator!, _ surface: UWP.AnyIDirect3DSurface!, _ dpi: Float) throws -> CanvasBitmap! {
        return try _ICanvasBitmapStatics.CreateFromDirect3D11SurfaceWithDpi(resourceCreator, surface, dpi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.createfromdirect3d11surface)
    public class func createFromDirect3D11Surface(_ resourceCreator: AnyICanvasResourceCreator!, _ surface: UWP.AnyIDirect3DSurface!, _ dpi: Float, _ alpha: CanvasAlphaMode) throws -> CanvasBitmap! {
        return try _ICanvasBitmapStatics.CreateFromDirect3D11SurfaceWithDpiAndAlpha(resourceCreator, surface, dpi, alpha)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.createfrombytes)
    public class func createFromBytes(_ resourceCreator: AnyICanvasResourceCreator!, _ bytes: [UInt8], _ widthInPixels: Int32, _ heightInPixels: Int32, _ format: UWP.DirectXPixelFormat) throws -> CanvasBitmap! {
        return try _ICanvasBitmapStatics.CreateFromBytes(resourceCreator, bytes, widthInPixels, heightInPixels, format)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.createfrombytes)
    public class func createFromBytes(_ resourceCreator: AnyICanvasResourceCreator!, _ bytes: [UInt8], _ widthInPixels: Int32, _ heightInPixels: Int32, _ format: UWP.DirectXPixelFormat, _ dpi: Float) throws -> CanvasBitmap! {
        return try _ICanvasBitmapStatics.CreateFromBytesWithDpi(resourceCreator, bytes, widthInPixels, heightInPixels, format, dpi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.createfrombytes)
    public class func createFromBytes(_ resourceCreator: AnyICanvasResourceCreator!, _ bytes: [UInt8], _ widthInPixels: Int32, _ heightInPixels: Int32, _ format: UWP.DirectXPixelFormat, _ dpi: Float, _ alpha: CanvasAlphaMode) throws -> CanvasBitmap! {
        return try _ICanvasBitmapStatics.CreateFromBytesWithDpiAndAlpha(resourceCreator, bytes, widthInPixels, heightInPixels, format, dpi, alpha)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.createfrombytes)
    public class func createFromBytes(_ resourceCreator: AnyICanvasResourceCreator!, _ buffer: UWP.AnyIBuffer!, _ widthInPixels: Int32, _ heightInPixels: Int32, _ format: UWP.DirectXPixelFormat) throws -> CanvasBitmap! {
        return try _ICanvasBitmapStatics.CreateFromBytesWithBuffer(resourceCreator, buffer, widthInPixels, heightInPixels, format)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.createfrombytes)
    public class func createFromBytes(_ resourceCreator: AnyICanvasResourceCreator!, _ buffer: UWP.AnyIBuffer!, _ widthInPixels: Int32, _ heightInPixels: Int32, _ format: UWP.DirectXPixelFormat, _ dpi: Float) throws -> CanvasBitmap! {
        return try _ICanvasBitmapStatics.CreateFromBytesWithBufferAndDpi(resourceCreator, buffer, widthInPixels, heightInPixels, format, dpi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.createfrombytes)
    public class func createFromBytes(_ resourceCreator: AnyICanvasResourceCreator!, _ buffer: UWP.AnyIBuffer!, _ widthInPixels: Int32, _ heightInPixels: Int32, _ format: UWP.DirectXPixelFormat, _ dpi: Float, _ alpha: CanvasAlphaMode) throws -> CanvasBitmap! {
        return try _ICanvasBitmapStatics.CreateFromBytesWithBufferAndDpiAndAlpha(resourceCreator, buffer, widthInPixels, heightInPixels, format, dpi, alpha)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.createfromcolors)
    public class func createFromColors(_ resourceCreator: AnyICanvasResourceCreator!, _ colors: [UWP.Color], _ widthInPixels: Int32, _ heightInPixels: Int32) throws -> CanvasBitmap! {
        return try _ICanvasBitmapStatics.CreateFromColors(resourceCreator, colors, widthInPixels, heightInPixels)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.createfromcolors)
    public class func createFromColors(_ resourceCreator: AnyICanvasResourceCreator!, _ colors: [UWP.Color], _ widthInPixels: Int32, _ heightInPixels: Int32, _ dpi: Float) throws -> CanvasBitmap! {
        return try _ICanvasBitmapStatics.CreateFromColorsWithDpi(resourceCreator, colors, widthInPixels, heightInPixels, dpi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.createfromcolors)
    public class func createFromColors(_ resourceCreator: AnyICanvasResourceCreator!, _ colors: [UWP.Color], _ widthInPixels: Int32, _ heightInPixels: Int32, _ dpi: Float, _ alpha: CanvasAlphaMode) throws -> CanvasBitmap! {
        return try _ICanvasBitmapStatics.CreateFromColorsWithDpiAndAlpha(resourceCreator, colors, widthInPixels, heightInPixels, dpi, alpha)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.createfromsoftwarebitmap)
    public class func createFromSoftwareBitmap(_ resourceCreator: AnyICanvasResourceCreator!, _ sourceBitmap: UWP.SoftwareBitmap!) throws -> CanvasBitmap! {
        return try _ICanvasBitmapStatics.CreateFromSoftwareBitmap(resourceCreator, sourceBitmap)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.loadasync)
    public class func loadAsync(_ resourceCreator: AnyICanvasResourceCreator!, _ fileName: String) throws -> WindowsFoundation.AnyIAsyncOperation<CanvasBitmap?>! {
        return try _ICanvasBitmapStatics.LoadAsyncFromHstring(resourceCreator, fileName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.loadasync)
    public class func loadAsync(_ resourceCreator: AnyICanvasResourceCreator!, _ fileName: String, _ dpi: Float) throws -> WindowsFoundation.AnyIAsyncOperation<CanvasBitmap?>! {
        return try _ICanvasBitmapStatics.LoadAsyncFromHstringWithDpi(resourceCreator, fileName, dpi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.loadasync)
    public class func loadAsync(_ resourceCreator: AnyICanvasResourceCreator!, _ fileName: String, _ dpi: Float, _ alpha: CanvasAlphaMode) throws -> WindowsFoundation.AnyIAsyncOperation<CanvasBitmap?>! {
        return try _ICanvasBitmapStatics.LoadAsyncFromHstringWithDpiAndAlpha(resourceCreator, fileName, dpi, alpha)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.loadasync)
    public class func loadAsync(_ resourceCreator: AnyICanvasResourceCreator!, _ uri: WindowsFoundation.Uri!) throws -> WindowsFoundation.AnyIAsyncOperation<CanvasBitmap?>! {
        return try _ICanvasBitmapStatics.LoadAsyncFromUri(resourceCreator, uri)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.loadasync)
    public class func loadAsync(_ resourceCreator: AnyICanvasResourceCreator!, _ uri: WindowsFoundation.Uri!, _ dpi: Float) throws -> WindowsFoundation.AnyIAsyncOperation<CanvasBitmap?>! {
        return try _ICanvasBitmapStatics.LoadAsyncFromUriWithDpi(resourceCreator, uri, dpi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.loadasync)
    public class func loadAsync(_ resourceCreator: AnyICanvasResourceCreator!, _ uri: WindowsFoundation.Uri!, _ dpi: Float, _ alpha: CanvasAlphaMode) throws -> WindowsFoundation.AnyIAsyncOperation<CanvasBitmap?>! {
        return try _ICanvasBitmapStatics.LoadAsyncFromUriWithDpiAndAlpha(resourceCreator, uri, dpi, alpha)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.loadasync)
    public class func loadAsync(_ resourceCreator: AnyICanvasResourceCreator!, _ stream: UWP.AnyIRandomAccessStream!) throws -> WindowsFoundation.AnyIAsyncOperation<CanvasBitmap?>! {
        return try _ICanvasBitmapStatics.LoadAsyncFromStream(resourceCreator, stream)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.loadasync)
    public class func loadAsync(_ resourceCreator: AnyICanvasResourceCreator!, _ stream: UWP.AnyIRandomAccessStream!, _ dpi: Float) throws -> WindowsFoundation.AnyIAsyncOperation<CanvasBitmap?>! {
        return try _ICanvasBitmapStatics.LoadAsyncFromStreamWithDpi(resourceCreator, stream, dpi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.loadasync)
    public class func loadAsync(_ resourceCreator: AnyICanvasResourceCreator!, _ stream: UWP.AnyIRandomAccessStream!, _ dpi: Float, _ alpha: CanvasAlphaMode) throws -> WindowsFoundation.AnyIAsyncOperation<CanvasBitmap?>! {
        return try _ICanvasBitmapStatics.LoadAsyncFromStreamWithDpiAndAlpha(resourceCreator, stream, dpi, alpha)
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.getbounds)
    public func getBounds(_ resourceCreator: AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.getbounds)
    public func getBounds(_ resourceCreator: AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _IDirect3DSurface: __ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DSurface! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.description)
    public var description : UWP.Direct3DSurfaceDescription {
        get { try! _IDirect3DSurface.get_Description() }
    }

    private lazy var _ICanvasResourceCreator: __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreator! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.device)
    public var device : CanvasDevice! {
        get { try! _ICanvasResourceCreator.get_Device() }
    }

    private lazy var _ICanvasResourceCreatorWithDpi: __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpi! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.convertpixelstodips)
    public func convertPixelsToDips(_ pixels: Int32) throws -> Float {
        try _ICanvasResourceCreatorWithDpi.ConvertPixelsToDips(pixels)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.convertdipstopixels)
    public func convertDipsToPixels(_ dips: Float, _ dpiRounding: CanvasDpiRounding) throws -> Int32 {
        try _ICanvasResourceCreatorWithDpi.ConvertDipsToPixels(dips, dpiRounding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.dpi)
    public var dpi : Float {
        get { try! _ICanvasResourceCreatorWithDpi.get_Dpi() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.saveasync)
    public func saveAsync(_ fileName: String) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.SaveToFileAsync(fileName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.saveasync)
    public func saveAsync(_ fileName: String, _ fileFormat: CanvasBitmapFileFormat) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.SaveToFileWithBitmapFileFormatAsync(fileName, fileFormat)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.saveasync)
    public func saveAsync(_ fileName: String, _ fileFormat: CanvasBitmapFileFormat, _ quality: Float) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.SaveToFileWithBitmapFileFormatAndQualityAsync(fileName, fileFormat, quality)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.saveasync)
    public func saveAsync(_ stream: UWP.AnyIRandomAccessStream!, _ fileFormat: CanvasBitmapFileFormat) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.SaveToStreamAsync(stream, fileFormat)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.saveasync)
    public func saveAsync(_ stream: UWP.AnyIRandomAccessStream!, _ fileFormat: CanvasBitmapFileFormat, _ quality: Float) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.SaveToStreamWithQualityAsync(stream, fileFormat, quality)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.getpixelbytes)
    public func getPixelBytes() throws -> [UInt8] {
        try _default.GetPixelBytes()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.getpixelbytes)
    public func getPixelBytes(_ left: Int32, _ top: Int32, _ width: Int32, _ height: Int32) throws -> [UInt8] {
        try _default.GetPixelBytesWithSubrectangle(left, top, width, height)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.getpixelbytes)
    public func getPixelBytes(_ buffer: UWP.AnyIBuffer!) throws {
        try _default.GetPixelBytesWithBuffer(buffer)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.getpixelbytes)
    public func getPixelBytes(_ buffer: UWP.AnyIBuffer!, _ left: Int32, _ top: Int32, _ width: Int32, _ height: Int32) throws {
        try _default.GetPixelBytesWithBufferAndSubrectangle(buffer, left, top, width, height)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.getpixelcolors)
    public func getPixelColors() throws -> [UWP.Color] {
        try _default.GetPixelColors()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.getpixelcolors)
    public func getPixelColors(_ left: Int32, _ top: Int32, _ width: Int32, _ height: Int32) throws -> [UWP.Color] {
        try _default.GetPixelColorsWithSubrectangle(left, top, width, height)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.setpixelbytes)
    public func setPixelBytes(_ valueElements: [UInt8]) throws {
        try _default.SetPixelBytes(valueElements)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.setpixelbytes)
    public func setPixelBytes(_ valueElements: [UInt8], _ left: Int32, _ top: Int32, _ width: Int32, _ height: Int32) throws {
        try _default.SetPixelBytesWithSubrectangle(valueElements, left, top, width, height)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.setpixelbytes)
    public func setPixelBytes(_ buffer: UWP.AnyIBuffer!) throws {
        try _default.SetPixelBytesWithBuffer(buffer)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.setpixelbytes)
    public func setPixelBytes(_ buffer: UWP.AnyIBuffer!, _ left: Int32, _ top: Int32, _ width: Int32, _ height: Int32) throws {
        try _default.SetPixelBytesWithBufferAndSubrectangle(buffer, left, top, width, height)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.setpixelcolors)
    public func setPixelColors(_ valueElements: [UWP.Color]) throws {
        try _default.SetPixelColors(valueElements)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.setpixelcolors)
    public func setPixelColors(_ valueElements: [UWP.Color], _ left: Int32, _ top: Int32, _ width: Int32, _ height: Int32) throws {
        try _default.SetPixelColorsWithSubrectangle(valueElements, left, top, width, height)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.copypixelsfrombitmap)
    public func copyPixelsFromBitmap(_ otherBitmap: CanvasBitmap!) throws {
        try _default.CopyPixelsFromBitmap(otherBitmap)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.copypixelsfrombitmap)
    public func copyPixelsFromBitmap(_ otherBitmap: CanvasBitmap!, _ destX: Int32, _ destY: Int32) throws {
        try _default.CopyPixelsFromBitmapWithDestPoint(otherBitmap, destX, destY)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.copypixelsfrombitmap)
    public func copyPixelsFromBitmap(_ otherBitmap: CanvasBitmap!, _ destX: Int32, _ destY: Int32, _ sourceRectLeft: Int32, _ sourceRectTop: Int32, _ sourceRectWidth: Int32, _ sourceRectHeight: Int32) throws {
        try _default.CopyPixelsFromBitmapWithDestPointAndSourceRect(otherBitmap, destX, destY, sourceRectLeft, sourceRectTop, sourceRectWidth, sourceRectHeight)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.alphamode)
    public var alphaMode : CanvasAlphaMode {
        get { try! _default.get_AlphaMode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.bounds)
    public var bounds : WindowsFoundation.Rect {
        get { try! _default.get_Bounds() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.format)
    public var format : UWP.DirectXPixelFormat {
        get { try! _default.get_Format() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.size)
    public var size : WindowsFoundation.Size {
        get { try! _default.get_Size() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasbitmap.sizeinpixels)
    public var sizeInPixels : UWP.BitmapSize {
        get { try! _default.get_SizeInPixels() }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IClosable = nil
        _ICanvasImage = nil
        _IDirect3DSurface = nil
        _ICanvasResourceCreator = nil
        _ICanvasResourceCreatorWithDpi = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvascommandlist)
public final class CanvasCommandList : WinRTClass, UWP.IGraphicsEffectSource, WindowsFoundation.IClosable, ICanvasImage {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas.ICanvasCommandList
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasCommandList
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _ICanvasCommandListFactory: __ABI_Microsoft_Graphics_Canvas.ICanvasCommandListFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.CanvasCommandList")
    public init(_ resourceCreator: AnyICanvasResourceCreator!) {
        super.init(try! Self._ICanvasCommandListFactory.Create(resourceCreator))
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvascommandlist.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvascommandlist.getbounds)
    public func getBounds(_ resourceCreator: AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvascommandlist.getbounds)
    public func getBounds(_ resourceCreator: AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvascommandlist.createdrawingsession)
    public func createDrawingSession() throws -> CanvasDrawingSession! {
        try _default.CreateDrawingSession()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvascommandlist.device)
    public var device : CanvasDevice! {
        get { try! _default.get_Device() }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IClosable = nil
        _ICanvasImage = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdevice)
public final class CanvasDevice : WinRTClass, WindowsFoundation.IClosable, ICanvasResourceCreator, UWP.IDirect3DDevice {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas.ICanvasDevice
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDevice
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.CanvasDevice")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private static let _ICanvasDeviceFactory: __ABI_Microsoft_Graphics_Canvas.ICanvasDeviceFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.CanvasDevice")
    public init(_ forceSoftwareRenderer: Bool) {
        super.init(try! Self._ICanvasDeviceFactory.CreateWithForceSoftwareRendererOption(forceSoftwareRenderer))
    }

    private static let _ICanvasDeviceStatics: __ABI_Microsoft_Graphics_Canvas.ICanvasDeviceStatics = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.CanvasDevice")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdevice.createfromdirect3d11device)
    public static func createFromDirect3D11Device(_ direct3DDevice: UWP.AnyIDirect3DDevice!) throws -> CanvasDevice! {
        return try _ICanvasDeviceStatics.CreateFromDirect3D11Device(direct3DDevice)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdevice.getshareddevice)
    public static func getSharedDevice() throws -> CanvasDevice! {
        return try _ICanvasDeviceStatics.GetSharedDevice()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdevice.getshareddevice)
    public static func getSharedDevice(_ forceSoftwareRenderer: Bool) throws -> CanvasDevice! {
        return try _ICanvasDeviceStatics.GetSharedDeviceWithForceSoftwareRenderer(forceSoftwareRenderer)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdevice.debuglevel)
    public static var debugLevel : CanvasDebugLevel {
        get { try! _ICanvasDeviceStatics.get_DebugLevel() }
        set { try! _ICanvasDeviceStatics.put_DebugLevel(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdevice.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasResourceCreator: __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreator! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdevice.device)
    public var device : CanvasDevice! {
        get { try! _ICanvasResourceCreator.get_Device() }
    }

    private lazy var _IDirect3DDevice: __ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DDevice! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdevice.trim)
    public func trim() throws {
        try _IDirect3DDevice.Trim()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdevice.ispixelformatsupported)
    public func isPixelFormatSupported(_ pixelFormat: UWP.DirectXPixelFormat) throws -> Bool {
        try _default.IsPixelFormatSupported(pixelFormat)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdevice.isbufferprecisionsupported)
    public func isBufferPrecisionSupported(_ bufferPrecision: CanvasBufferPrecision) throws -> Bool {
        try _default.IsBufferPrecisionSupported(bufferPrecision)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdevice.isdevicelost)
    public func isDeviceLost(_ hresult: Int32) throws -> Bool {
        try _default.IsDeviceLost(hresult)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdevice.raisedevicelost)
    public func raiseDeviceLost() throws {
        try _default.RaiseDeviceLost()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdevice.lock)
    public func lock() throws -> CanvasLock! {
        try _default.Lock()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdevice.isdevicelost)
    public func isDeviceLost() throws -> Bool {
        try _default.IsDeviceLost2()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdevice.getdevicelostreason)
    public func getDeviceLostReason() throws -> Int32 {
        try _default.GetDeviceLostReason()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdevice.forcesoftwarerenderer)
    public var forceSoftwareRenderer : Bool {
        get { try! _default.get_ForceSoftwareRenderer() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdevice.lowpriority)
    public var lowPriority : Bool {
        get { try! _default.get_LowPriority() }
        set { try! _default.put_LowPriority(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdevice.maximumbitmapsizeinpixels)
    public var maximumBitmapSizeInPixels : Int32 {
        get { try! _default.get_MaximumBitmapSizeInPixels() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdevice.maximumcachesize)
    public var maximumCacheSize : UInt64 {
        get { try! _default.get_MaximumCacheSize() }
        set { try! _default.put_MaximumCacheSize(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdevice.devicelost)
    public lazy var deviceLost : Event<TypedEventHandler<CanvasDevice?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_DeviceLost($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_DeviceLost($0)
       }
      )
    }()

    deinit {
        _IClosable = nil
        _ICanvasResourceCreator = nil
        _IDirect3DDevice = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession)
public final class CanvasDrawingSession : WinRTClass, WindowsFoundation.IClosable, ICanvasResourceCreator, ICanvasResourceCreatorWithDpi {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas.ICanvasDrawingSession
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasDrawingSession
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasResourceCreator: __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreator! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.device)
    public var device : CanvasDevice! {
        get { try! _ICanvasResourceCreator.get_Device() }
    }

    private lazy var _ICanvasResourceCreatorWithDpi: __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpi! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.convertpixelstodips)
    public func convertPixelsToDips(_ pixels: Int32) throws -> Float {
        try _ICanvasResourceCreatorWithDpi.ConvertPixelsToDips(pixels)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.convertdipstopixels)
    public func convertDipsToPixels(_ dips: Float, _ dpiRounding: CanvasDpiRounding) throws -> Int32 {
        try _ICanvasResourceCreatorWithDpi.ConvertDipsToPixels(dips, dpiRounding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.dpi)
    public var dpi : Float {
        get { try! _ICanvasResourceCreatorWithDpi.get_Dpi() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.clear)
    public func clear(_ color: UWP.Color) throws {
        try _default.Clear(color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.clear)
    public func clear(_ color: WindowsFoundation.Vector4) throws {
        try _default.ClearHdr(color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.flush)
    public func flush() throws {
        try _default.Flush()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawimage)
    public func drawImage(_ image: AnyICanvasImage!) throws {
        try _default.DrawImageAtOrigin(image)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawimage)
    public func drawImage(_ image: AnyICanvasImage!, _ offset: WindowsFoundation.Vector2) throws {
        try _default.DrawImageAtOffset(image, offset)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawimage)
    public func drawImage(_ image: AnyICanvasImage!, _ x: Float, _ y: Float) throws {
        try _default.DrawImageAtCoords(image, x, y)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawimage)
    public func drawImage(_ bitmap: CanvasBitmap!, _ destinationRectangle: WindowsFoundation.Rect) throws {
        try _default.DrawImageToRect(bitmap, destinationRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawimage)
    public func drawImage(_ image: AnyICanvasImage!, _ offset: WindowsFoundation.Vector2, _ sourceRectangle: WindowsFoundation.Rect) throws {
        try _default.DrawImageAtOffsetWithSourceRect(image, offset, sourceRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawimage)
    public func drawImage(_ image: AnyICanvasImage!, _ x: Float, _ y: Float, _ sourceRectangle: WindowsFoundation.Rect) throws {
        try _default.DrawImageAtCoordsWithSourceRect(image, x, y, sourceRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawimage)
    public func drawImage(_ image: AnyICanvasImage!, _ destinationRectangle: WindowsFoundation.Rect, _ sourceRectangle: WindowsFoundation.Rect) throws {
        try _default.DrawImageToRectWithSourceRect(image, destinationRectangle, sourceRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawimage)
    public func drawImage(_ image: AnyICanvasImage!, _ offset: WindowsFoundation.Vector2, _ sourceRectangle: WindowsFoundation.Rect, _ opacity: Float) throws {
        try _default.DrawImageAtOffsetWithSourceRectAndOpacity(image, offset, sourceRectangle, opacity)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawimage)
    public func drawImage(_ image: AnyICanvasImage!, _ x: Float, _ y: Float, _ sourceRectangle: WindowsFoundation.Rect, _ opacity: Float) throws {
        try _default.DrawImageAtCoordsWithSourceRectAndOpacity(image, x, y, sourceRectangle, opacity)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawimage)
    public func drawImage(_ image: AnyICanvasImage!, _ destinationRectangle: WindowsFoundation.Rect, _ sourceRectangle: WindowsFoundation.Rect, _ opacity: Float) throws {
        try _default.DrawImageToRectWithSourceRectAndOpacity(image, destinationRectangle, sourceRectangle, opacity)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawimage)
    public func drawImage(_ image: AnyICanvasImage!, _ offset: WindowsFoundation.Vector2, _ sourceRectangle: WindowsFoundation.Rect, _ opacity: Float, _ interpolation: CanvasImageInterpolation) throws {
        try _default.DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolation(image, offset, sourceRectangle, opacity, interpolation)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawimage)
    public func drawImage(_ image: AnyICanvasImage!, _ x: Float, _ y: Float, _ sourceRectangle: WindowsFoundation.Rect, _ opacity: Float, _ interpolation: CanvasImageInterpolation) throws {
        try _default.DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolation(image, x, y, sourceRectangle, opacity, interpolation)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawimage)
    public func drawImage(_ image: AnyICanvasImage!, _ destinationRectangle: WindowsFoundation.Rect, _ sourceRectangle: WindowsFoundation.Rect, _ opacity: Float, _ interpolation: CanvasImageInterpolation) throws {
        try _default.DrawImageToRectWithSourceRectAndOpacityAndInterpolation(image, destinationRectangle, sourceRectangle, opacity, interpolation)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawimage)
    public func drawImage(_ image: AnyICanvasImage!, _ offset: WindowsFoundation.Vector2, _ sourceRectangle: WindowsFoundation.Rect, _ opacity: Float, _ interpolation: CanvasImageInterpolation, _ composite: CanvasComposite) throws {
        try _default.DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndComposite(image, offset, sourceRectangle, opacity, interpolation, composite)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawimage)
    public func drawImage(_ image: AnyICanvasImage!, _ x: Float, _ y: Float, _ sourceRectangle: WindowsFoundation.Rect, _ opacity: Float, _ interpolation: CanvasImageInterpolation, _ composite: CanvasComposite) throws {
        try _default.DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndComposite(image, x, y, sourceRectangle, opacity, interpolation, composite)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawimage)
    public func drawImage(_ image: AnyICanvasImage!, _ destinationRectangle: WindowsFoundation.Rect, _ sourceRectangle: WindowsFoundation.Rect, _ opacity: Float, _ interpolation: CanvasImageInterpolation, _ composite: CanvasComposite) throws {
        try _default.DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndComposite(image, destinationRectangle, sourceRectangle, opacity, interpolation, composite)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawimage)
    public func drawImage(_ bitmap: CanvasBitmap!, _ offset: WindowsFoundation.Vector2, _ sourceRectangle: WindowsFoundation.Rect, _ opacity: Float, _ interpolation: CanvasImageInterpolation, _ perspective: WindowsFoundation.Matrix4x4) throws {
        try _default.DrawImageAtOffsetWithSourceRectAndOpacityAndInterpolationAndPerspective(bitmap, offset, sourceRectangle, opacity, interpolation, perspective)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawimage)
    public func drawImage(_ bitmap: CanvasBitmap!, _ x: Float, _ y: Float, _ sourceRectangle: WindowsFoundation.Rect, _ opacity: Float, _ interpolation: CanvasImageInterpolation, _ perspective: WindowsFoundation.Matrix4x4) throws {
        try _default.DrawImageAtCoordsWithSourceRectAndOpacityAndInterpolationAndPerspective(bitmap, x, y, sourceRectangle, opacity, interpolation, perspective)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawimage)
    public func drawImage(_ bitmap: CanvasBitmap!, _ destinationRectangle: WindowsFoundation.Rect, _ sourceRectangle: WindowsFoundation.Rect, _ opacity: Float, _ interpolation: CanvasImageInterpolation, _ perspective: WindowsFoundation.Matrix4x4) throws {
        try _default.DrawImageToRectWithSourceRectAndOpacityAndInterpolationAndPerspective(bitmap, destinationRectangle, sourceRectangle, opacity, interpolation, perspective)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawline)
    public func drawLine(_ point0: WindowsFoundation.Vector2, _ point1: WindowsFoundation.Vector2, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.DrawLineWithBrush(point0, point1, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawline)
    public func drawLine(_ x0: Float, _ y0: Float, _ x1: Float, _ y1: Float, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.DrawLineAtCoordsWithBrush(x0, y0, x1, y1, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawline)
    public func drawLine(_ point0: WindowsFoundation.Vector2, _ point1: WindowsFoundation.Vector2, _ color: UWP.Color) throws {
        try _default.DrawLineWithColor(point0, point1, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawline)
    public func drawLine(_ x0: Float, _ y0: Float, _ x1: Float, _ y1: Float, _ color: UWP.Color) throws {
        try _default.DrawLineAtCoordsWithColor(x0, y0, x1, y1, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawline)
    public func drawLine(_ point0: WindowsFoundation.Vector2, _ point1: WindowsFoundation.Vector2, _ brush: Win2D.AnyICanvasBrush!, _ strokeWidth: Float) throws {
        try _default.DrawLineWithBrushAndStrokeWidth(point0, point1, brush, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawline)
    public func drawLine(_ x0: Float, _ y0: Float, _ x1: Float, _ y1: Float, _ brush: Win2D.AnyICanvasBrush!, _ strokeWidth: Float) throws {
        try _default.DrawLineAtCoordsWithBrushAndStrokeWidth(x0, y0, x1, y1, brush, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawline)
    public func drawLine(_ point0: WindowsFoundation.Vector2, _ point1: WindowsFoundation.Vector2, _ color: UWP.Color, _ strokeWidth: Float) throws {
        try _default.DrawLineWithColorAndStrokeWidth(point0, point1, color, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawline)
    public func drawLine(_ x0: Float, _ y0: Float, _ x1: Float, _ y1: Float, _ color: UWP.Color, _ strokeWidth: Float) throws {
        try _default.DrawLineAtCoordsWithColorAndStrokeWidth(x0, y0, x1, y1, color, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawline)
    public func drawLine(_ point0: WindowsFoundation.Vector2, _ point1: WindowsFoundation.Vector2, _ brush: Win2D.AnyICanvasBrush!, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle!) throws {
        try _default.DrawLineWithBrushAndStrokeWidthAndStrokeStyle(point0, point1, brush, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawline)
    public func drawLine(_ x0: Float, _ y0: Float, _ x1: Float, _ y1: Float, _ brush: Win2D.AnyICanvasBrush!, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle!) throws {
        try _default.DrawLineAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(x0, y0, x1, y1, brush, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawline)
    public func drawLine(_ point0: WindowsFoundation.Vector2, _ point1: WindowsFoundation.Vector2, _ color: UWP.Color, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle!) throws {
        try _default.DrawLineWithColorAndStrokeWidthAndStrokeStyle(point0, point1, color, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawline)
    public func drawLine(_ x0: Float, _ y0: Float, _ x1: Float, _ y1: Float, _ color: UWP.Color, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle!) throws {
        try _default.DrawLineAtCoordsWithColorAndStrokeWidthAndStrokeStyle(x0, y0, x1, y1, color, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawrectangle)
    public func drawRectangle(_ rect: WindowsFoundation.Rect, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.DrawRectangleWithBrush(rect, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawrectangle)
    public func drawRectangle(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.DrawRectangleAtCoordsWithBrush(x, y, w, h, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawrectangle)
    public func drawRectangle(_ rect: WindowsFoundation.Rect, _ color: UWP.Color) throws {
        try _default.DrawRectangleWithColor(rect, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawrectangle)
    public func drawRectangle(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ color: UWP.Color) throws {
        try _default.DrawRectangleAtCoordsWithColor(x, y, w, h, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawrectangle)
    public func drawRectangle(_ rect: WindowsFoundation.Rect, _ brush: Win2D.AnyICanvasBrush!, _ strokeWidth: Float) throws {
        try _default.DrawRectangleWithBrushAndStrokeWidth(rect, brush, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawrectangle)
    public func drawRectangle(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ brush: Win2D.AnyICanvasBrush!, _ strokeWidth: Float) throws {
        try _default.DrawRectangleAtCoordsWithBrushAndStrokeWidth(x, y, w, h, brush, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawrectangle)
    public func drawRectangle(_ rect: WindowsFoundation.Rect, _ color: UWP.Color, _ strokeWidth: Float) throws {
        try _default.DrawRectangleWithColorAndStrokeWidth(rect, color, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawrectangle)
    public func drawRectangle(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ color: UWP.Color, _ strokeWidth: Float) throws {
        try _default.DrawRectangleAtCoordsWithColorAndStrokeWidth(x, y, w, h, color, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawrectangle)
    public func drawRectangle(_ rect: WindowsFoundation.Rect, _ brush: Win2D.AnyICanvasBrush!, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle!) throws {
        try _default.DrawRectangleWithBrushAndStrokeWidthAndStrokeStyle(rect, brush, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawrectangle)
    public func drawRectangle(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ brush: Win2D.AnyICanvasBrush!, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle!) throws {
        try _default.DrawRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(x, y, w, h, brush, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawrectangle)
    public func drawRectangle(_ rect: WindowsFoundation.Rect, _ color: UWP.Color, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle!) throws {
        try _default.DrawRectangleWithColorAndStrokeWidthAndStrokeStyle(rect, color, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawrectangle)
    public func drawRectangle(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ color: UWP.Color, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle!) throws {
        try _default.DrawRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(x, y, w, h, color, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.fillrectangle)
    public func fillRectangle(_ rect: WindowsFoundation.Rect, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.FillRectangleWithBrush(rect, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.fillrectangle)
    public func fillRectangle(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.FillRectangleAtCoordsWithBrush(x, y, w, h, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.fillrectangle)
    public func fillRectangle(_ rect: WindowsFoundation.Rect, _ color: UWP.Color) throws {
        try _default.FillRectangleWithColor(rect, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.fillrectangle)
    public func fillRectangle(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ color: UWP.Color) throws {
        try _default.FillRectangleAtCoordsWithColor(x, y, w, h, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.fillrectangle)
    public func fillRectangle(_ rect: WindowsFoundation.Rect, _ brush: Win2D.AnyICanvasBrush!, _ opacityBrush: Win2D.AnyICanvasBrush!) throws {
        try _default.FillRectangleWithBrushAndOpacityBrush(rect, brush, opacityBrush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.fillrectangle)
    public func fillRectangle(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ brush: Win2D.AnyICanvasBrush!, _ opacityBrush: Win2D.AnyICanvasBrush!) throws {
        try _default.FillRectangleAtCoordsWithBrushAndOpacityBrush(x, y, w, h, brush, opacityBrush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawroundedrectangle)
    public func drawRoundedRectangle(_ rect: WindowsFoundation.Rect, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.DrawRoundedRectangleWithBrush(rect, radiusX, radiusY, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawroundedrectangle)
    public func drawRoundedRectangle(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.DrawRoundedRectangleAtCoordsWithBrush(x, y, w, h, radiusX, radiusY, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawroundedrectangle)
    public func drawRoundedRectangle(_ rect: WindowsFoundation.Rect, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color) throws {
        try _default.DrawRoundedRectangleWithColor(rect, radiusX, radiusY, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawroundedrectangle)
    public func drawRoundedRectangle(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color) throws {
        try _default.DrawRoundedRectangleAtCoordsWithColor(x, y, w, h, radiusX, radiusY, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawroundedrectangle)
    public func drawRoundedRectangle(_ rect: WindowsFoundation.Rect, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush!, _ strokeWidth: Float) throws {
        try _default.DrawRoundedRectangleWithBrushAndStrokeWidth(rect, radiusX, radiusY, brush, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawroundedrectangle)
    public func drawRoundedRectangle(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush!, _ strokeWidth: Float) throws {
        try _default.DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidth(x, y, w, h, radiusX, radiusY, brush, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawroundedrectangle)
    public func drawRoundedRectangle(_ rect: WindowsFoundation.Rect, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color, _ strokeWidth: Float) throws {
        try _default.DrawRoundedRectangleWithColorAndStrokeWidth(rect, radiusX, radiusY, color, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawroundedrectangle)
    public func drawRoundedRectangle(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color, _ strokeWidth: Float) throws {
        try _default.DrawRoundedRectangleAtCoordsWithColorAndStrokeWidth(x, y, w, h, radiusX, radiusY, color, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawroundedrectangle)
    public func drawRoundedRectangle(_ rect: WindowsFoundation.Rect, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush!, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle!) throws {
        try _default.DrawRoundedRectangleWithBrushAndStrokeWidthAndStrokeStyle(rect, radiusX, radiusY, brush, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawroundedrectangle)
    public func drawRoundedRectangle(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush!, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle!) throws {
        try _default.DrawRoundedRectangleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(x, y, w, h, radiusX, radiusY, brush, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawroundedrectangle)
    public func drawRoundedRectangle(_ rect: WindowsFoundation.Rect, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle!) throws {
        try _default.DrawRoundedRectangleWithColorAndStrokeWidthAndStrokeStyle(rect, radiusX, radiusY, color, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawroundedrectangle)
    public func drawRoundedRectangle(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle!) throws {
        try _default.DrawRoundedRectangleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(x, y, w, h, radiusX, radiusY, color, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.fillroundedrectangle)
    public func fillRoundedRectangle(_ rect: WindowsFoundation.Rect, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.FillRoundedRectangleWithBrush(rect, radiusX, radiusY, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.fillroundedrectangle)
    public func fillRoundedRectangle(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.FillRoundedRectangleAtCoordsWithBrush(x, y, w, h, radiusX, radiusY, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.fillroundedrectangle)
    public func fillRoundedRectangle(_ rect: WindowsFoundation.Rect, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color) throws {
        try _default.FillRoundedRectangleWithColor(rect, radiusX, radiusY, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.fillroundedrectangle)
    public func fillRoundedRectangle(_ x: Float, _ y: Float, _ w: Float, _ h: Float, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color) throws {
        try _default.FillRoundedRectangleAtCoordsWithColor(x, y, w, h, radiusX, radiusY, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawellipse)
    public func drawEllipse(_ centerPoint: WindowsFoundation.Vector2, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.DrawEllipseWithBrush(centerPoint, radiusX, radiusY, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawellipse)
    public func drawEllipse(_ x: Float, _ y: Float, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.DrawEllipseAtCoordsWithBrush(x, y, radiusX, radiusY, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawellipse)
    public func drawEllipse(_ centerPoint: WindowsFoundation.Vector2, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color) throws {
        try _default.DrawEllipseWithColor(centerPoint, radiusX, radiusY, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawellipse)
    public func drawEllipse(_ x: Float, _ y: Float, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color) throws {
        try _default.DrawEllipseAtCoordsWithColor(x, y, radiusX, radiusY, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawellipse)
    public func drawEllipse(_ centerPoint: WindowsFoundation.Vector2, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush!, _ strokeWidth: Float) throws {
        try _default.DrawEllipseWithBrushAndStrokeWidth(centerPoint, radiusX, radiusY, brush, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawellipse)
    public func drawEllipse(_ x: Float, _ y: Float, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush!, _ strokeWidth: Float) throws {
        try _default.DrawEllipseAtCoordsWithBrushAndStrokeWidth(x, y, radiusX, radiusY, brush, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawellipse)
    public func drawEllipse(_ centerPoint: WindowsFoundation.Vector2, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color, _ strokeWidth: Float) throws {
        try _default.DrawEllipseWithColorAndStrokeWidth(centerPoint, radiusX, radiusY, color, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawellipse)
    public func drawEllipse(_ x: Float, _ y: Float, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color, _ strokeWidth: Float) throws {
        try _default.DrawEllipseAtCoordsWithColorAndStrokeWidth(x, y, radiusX, radiusY, color, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawellipse)
    public func drawEllipse(_ centerPoint: WindowsFoundation.Vector2, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush!, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle!) throws {
        try _default.DrawEllipseWithBrushAndStrokeWidthAndStrokeStyle(centerPoint, radiusX, radiusY, brush, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawellipse)
    public func drawEllipse(_ x: Float, _ y: Float, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush!, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle!) throws {
        try _default.DrawEllipseAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(x, y, radiusX, radiusY, brush, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawellipse)
    public func drawEllipse(_ centerPoint: WindowsFoundation.Vector2, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle!) throws {
        try _default.DrawEllipseWithColorAndStrokeWidthAndStrokeStyle(centerPoint, radiusX, radiusY, color, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawellipse)
    public func drawEllipse(_ x: Float, _ y: Float, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle!) throws {
        try _default.DrawEllipseAtCoordsWithColorAndStrokeWidthAndStrokeStyle(x, y, radiusX, radiusY, color, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.fillellipse)
    public func fillEllipse(_ centerPoint: WindowsFoundation.Vector2, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.FillEllipseWithBrush(centerPoint, radiusX, radiusY, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.fillellipse)
    public func fillEllipse(_ x: Float, _ y: Float, _ radiusX: Float, _ radiusY: Float, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.FillEllipseAtCoordsWithBrush(x, y, radiusX, radiusY, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.fillellipse)
    public func fillEllipse(_ centerPoint: WindowsFoundation.Vector2, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color) throws {
        try _default.FillEllipseWithColor(centerPoint, radiusX, radiusY, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.fillellipse)
    public func fillEllipse(_ x: Float, _ y: Float, _ radiusX: Float, _ radiusY: Float, _ color: UWP.Color) throws {
        try _default.FillEllipseAtCoordsWithColor(x, y, radiusX, radiusY, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawcircle)
    public func drawCircle(_ centerPoint: WindowsFoundation.Vector2, _ radius: Float, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.DrawCircleWithBrush(centerPoint, radius, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawcircle)
    public func drawCircle(_ x: Float, _ y: Float, _ radius: Float, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.DrawCircleAtCoordsWithBrush(x, y, radius, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawcircle)
    public func drawCircle(_ centerPoint: WindowsFoundation.Vector2, _ radius: Float, _ color: UWP.Color) throws {
        try _default.DrawCircleWithColor(centerPoint, radius, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawcircle)
    public func drawCircle(_ x: Float, _ y: Float, _ radius: Float, _ color: UWP.Color) throws {
        try _default.DrawCircleAtCoordsWithColor(x, y, radius, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawcircle)
    public func drawCircle(_ centerPoint: WindowsFoundation.Vector2, _ radius: Float, _ brush: Win2D.AnyICanvasBrush!, _ strokeWidth: Float) throws {
        try _default.DrawCircleWithBrushAndStrokeWidth(centerPoint, radius, brush, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawcircle)
    public func drawCircle(_ x: Float, _ y: Float, _ radius: Float, _ brush: Win2D.AnyICanvasBrush!, _ strokeWidth: Float) throws {
        try _default.DrawCircleAtCoordsWithBrushAndStrokeWidth(x, y, radius, brush, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawcircle)
    public func drawCircle(_ centerPoint: WindowsFoundation.Vector2, _ radius: Float, _ color: UWP.Color, _ strokeWidth: Float) throws {
        try _default.DrawCircleWithColorAndStrokeWidth(centerPoint, radius, color, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawcircle)
    public func drawCircle(_ x: Float, _ y: Float, _ radius: Float, _ color: UWP.Color, _ strokeWidth: Float) throws {
        try _default.DrawCircleAtCoordsWithColorAndStrokeWidth(x, y, radius, color, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawcircle)
    public func drawCircle(_ centerPoint: WindowsFoundation.Vector2, _ radius: Float, _ brush: Win2D.AnyICanvasBrush!, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle!) throws {
        try _default.DrawCircleWithBrushAndStrokeWidthAndStrokeStyle(centerPoint, radius, brush, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawcircle)
    public func drawCircle(_ x: Float, _ y: Float, _ radius: Float, _ brush: Win2D.AnyICanvasBrush!, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle!) throws {
        try _default.DrawCircleAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(x, y, radius, brush, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawcircle)
    public func drawCircle(_ centerPoint: WindowsFoundation.Vector2, _ radius: Float, _ color: UWP.Color, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle!) throws {
        try _default.DrawCircleWithColorAndStrokeWidthAndStrokeStyle(centerPoint, radius, color, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawcircle)
    public func drawCircle(_ x: Float, _ y: Float, _ radius: Float, _ color: UWP.Color, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle!) throws {
        try _default.DrawCircleAtCoordsWithColorAndStrokeWidthAndStrokeStyle(x, y, radius, color, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.fillcircle)
    public func fillCircle(_ centerPoint: WindowsFoundation.Vector2, _ radius: Float, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.FillCircleWithBrush(centerPoint, radius, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.fillcircle)
    public func fillCircle(_ x: Float, _ y: Float, _ radius: Float, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.FillCircleAtCoordsWithBrush(x, y, radius, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.fillcircle)
    public func fillCircle(_ centerPoint: WindowsFoundation.Vector2, _ radius: Float, _ color: UWP.Color) throws {
        try _default.FillCircleWithColor(centerPoint, radius, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.fillcircle)
    public func fillCircle(_ x: Float, _ y: Float, _ radius: Float, _ color: UWP.Color) throws {
        try _default.FillCircleAtCoordsWithColor(x, y, radius, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawtext)
    public func drawText(_ text: String, _ point: WindowsFoundation.Vector2, _ color: UWP.Color) throws {
        try _default.DrawTextAtPointWithColor(text, point, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawtext)
    public func drawText(_ text: String, _ x: Float, _ y: Float, _ color: UWP.Color) throws {
        try _default.DrawTextAtPointCoordsWithColor(text, x, y, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawtext)
    public func drawText(_ text: String, _ point: WindowsFoundation.Vector2, _ brush: Win2D.AnyICanvasBrush!, _ format: Win2D.CanvasTextFormat!) throws {
        try _default.DrawTextAtPointWithBrushAndFormat(text, point, brush, format)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawtext)
    public func drawText(_ text: String, _ rectangle: WindowsFoundation.Rect, _ brush: Win2D.AnyICanvasBrush!, _ format: Win2D.CanvasTextFormat!) throws {
        try _default.DrawTextAtRectWithBrushAndFormat(text, rectangle, brush, format)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawtext)
    public func drawText(_ text: String, _ x: Float, _ y: Float, _ brush: Win2D.AnyICanvasBrush!, _ format: Win2D.CanvasTextFormat!) throws {
        try _default.DrawTextAtPointCoordsWithBrushAndFormat(text, x, y, brush, format)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawtext)
    public func drawText(_ text: String, _ x: Float, _ y: Float, _ w: Float, _ h: Float, _ brush: Win2D.AnyICanvasBrush!, _ format: Win2D.CanvasTextFormat!) throws {
        try _default.DrawTextAtRectCoordsWithBrushAndFormat(text, x, y, w, h, brush, format)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawtext)
    public func drawText(_ text: String, _ point: WindowsFoundation.Vector2, _ color: UWP.Color, _ format: Win2D.CanvasTextFormat!) throws {
        try _default.DrawTextAtPointWithColorAndFormat(text, point, color, format)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawtext)
    public func drawText(_ text: String, _ rectangle: WindowsFoundation.Rect, _ color: UWP.Color, _ format: Win2D.CanvasTextFormat!) throws {
        try _default.DrawTextAtRectWithColorAndFormat(text, rectangle, color, format)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawtext)
    public func drawText(_ text: String, _ x: Float, _ y: Float, _ color: UWP.Color, _ format: Win2D.CanvasTextFormat!) throws {
        try _default.DrawTextAtPointCoordsWithColorAndFormat(text, x, y, color, format)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawtext)
    public func drawText(_ text: String, _ x: Float, _ y: Float, _ w: Float, _ h: Float, _ color: UWP.Color, _ format: Win2D.CanvasTextFormat!) throws {
        try _default.DrawTextAtRectCoordsWithColorAndFormat(text, x, y, w, h, color, format)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawgeometry)
    public func drawGeometry(_ geometry: Win2D.CanvasGeometry!, _ offset: WindowsFoundation.Vector2, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.DrawGeometryWithBrush(geometry, offset, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawgeometry)
    public func drawGeometry(_ geometry: Win2D.CanvasGeometry!, _ offset: WindowsFoundation.Vector2, _ color: UWP.Color) throws {
        try _default.DrawGeometryWithColor(geometry, offset, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawgeometry)
    public func drawGeometry(_ geometry: Win2D.CanvasGeometry!, _ x: Float, _ y: Float, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.DrawGeometryAtCoordsWithBrush(geometry, x, y, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawgeometry)
    public func drawGeometry(_ geometry: Win2D.CanvasGeometry!, _ x: Float, _ y: Float, _ color: UWP.Color) throws {
        try _default.DrawGeometryAtCoordsWithColor(geometry, x, y, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawgeometry)
    public func drawGeometry(_ geometry: Win2D.CanvasGeometry!, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.DrawGeometryAtOriginWithBrush(geometry, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawgeometry)
    public func drawGeometry(_ geometry: Win2D.CanvasGeometry!, _ color: UWP.Color) throws {
        try _default.DrawGeometryAtOriginWithColor(geometry, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawgeometry)
    public func drawGeometry(_ geometry: Win2D.CanvasGeometry!, _ offset: WindowsFoundation.Vector2, _ brush: Win2D.AnyICanvasBrush!, _ strokeWidth: Float) throws {
        try _default.DrawGeometryWithBrushAndStrokeWidth(geometry, offset, brush, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawgeometry)
    public func drawGeometry(_ geometry: Win2D.CanvasGeometry!, _ offset: WindowsFoundation.Vector2, _ color: UWP.Color, _ strokeWidth: Float) throws {
        try _default.DrawGeometryWithColorAndStrokeWidth(geometry, offset, color, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawgeometry)
    public func drawGeometry(_ geometry: Win2D.CanvasGeometry!, _ x: Float, _ y: Float, _ brush: Win2D.AnyICanvasBrush!, _ strokeWidth: Float) throws {
        try _default.DrawGeometryAtCoordsWithBrushAndStrokeWidth(geometry, x, y, brush, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawgeometry)
    public func drawGeometry(_ geometry: Win2D.CanvasGeometry!, _ x: Float, _ y: Float, _ color: UWP.Color, _ strokeWidth: Float) throws {
        try _default.DrawGeometryAtCoordsWithColorAndStrokeWidth(geometry, x, y, color, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawgeometry)
    public func drawGeometry(_ geometry: Win2D.CanvasGeometry!, _ brush: Win2D.AnyICanvasBrush!, _ strokeWidth: Float) throws {
        try _default.DrawGeometryAtOriginWithBrushAndStrokeWidth(geometry, brush, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawgeometry)
    public func drawGeometry(_ geometry: Win2D.CanvasGeometry!, _ color: UWP.Color, _ strokeWidth: Float) throws {
        try _default.DrawGeometryAtOriginWithColorAndStrokeWidth(geometry, color, strokeWidth)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawgeometry)
    public func drawGeometry(_ geometry: Win2D.CanvasGeometry!, _ offset: WindowsFoundation.Vector2, _ brush: Win2D.AnyICanvasBrush!, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle!) throws {
        try _default.DrawGeometryWithBrushAndStrokeWidthAndStrokeStyle(geometry, offset, brush, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawgeometry)
    public func drawGeometry(_ geometry: Win2D.CanvasGeometry!, _ offset: WindowsFoundation.Vector2, _ color: UWP.Color, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle!) throws {
        try _default.DrawGeometryWithColorAndStrokeWidthAndStrokeStyle(geometry, offset, color, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawgeometry)
    public func drawGeometry(_ geometry: Win2D.CanvasGeometry!, _ x: Float, _ y: Float, _ brush: Win2D.AnyICanvasBrush!, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle!) throws {
        try _default.DrawGeometryAtCoordsWithBrushAndStrokeWidthAndStrokeStyle(geometry, x, y, brush, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawgeometry)
    public func drawGeometry(_ geometry: Win2D.CanvasGeometry!, _ x: Float, _ y: Float, _ color: UWP.Color, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle!) throws {
        try _default.DrawGeometryAtCoordsWithColorAndStrokeWidthAndStrokeStyle(geometry, x, y, color, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawgeometry)
    public func drawGeometry(_ geometry: Win2D.CanvasGeometry!, _ brush: Win2D.AnyICanvasBrush!, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle!) throws {
        try _default.DrawGeometryAtOriginWithBrushAndStrokeWidthAndStrokeStyle(geometry, brush, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawgeometry)
    public func drawGeometry(_ geometry: Win2D.CanvasGeometry!, _ color: UWP.Color, _ strokeWidth: Float, _ strokeStyle: Win2D.CanvasStrokeStyle!) throws {
        try _default.DrawGeometryAtOriginWithColorAndStrokeWidthAndStrokeStyle(geometry, color, strokeWidth, strokeStyle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.fillgeometry)
    public func fillGeometry(_ geometry: Win2D.CanvasGeometry!, _ offset: WindowsFoundation.Vector2, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.FillGeometryWithBrush(geometry, offset, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.fillgeometry)
    public func fillGeometry(_ geometry: Win2D.CanvasGeometry!, _ offset: WindowsFoundation.Vector2, _ brush: Win2D.AnyICanvasBrush!, _ opacityBrush: Win2D.AnyICanvasBrush!) throws {
        try _default.FillGeometryWithBrushAndOpacityBrush(geometry, offset, brush, opacityBrush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.fillgeometry)
    public func fillGeometry(_ geometry: Win2D.CanvasGeometry!, _ offset: WindowsFoundation.Vector2, _ color: UWP.Color) throws {
        try _default.FillGeometryWithColor(geometry, offset, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.fillgeometry)
    public func fillGeometry(_ geometry: Win2D.CanvasGeometry!, _ x: Float, _ y: Float, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.FillGeometryAtCoordsWithBrush(geometry, x, y, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.fillgeometry)
    public func fillGeometry(_ geometry: Win2D.CanvasGeometry!, _ x: Float, _ y: Float, _ brush: Win2D.AnyICanvasBrush!, _ opacityBrush: Win2D.AnyICanvasBrush!) throws {
        try _default.FillGeometryAtCoordsWithBrushAndOpacityBrush(geometry, x, y, brush, opacityBrush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.fillgeometry)
    public func fillGeometry(_ geometry: Win2D.CanvasGeometry!, _ x: Float, _ y: Float, _ color: UWP.Color) throws {
        try _default.FillGeometryAtCoordsWithColor(geometry, x, y, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.fillgeometry)
    public func fillGeometry(_ geometry: Win2D.CanvasGeometry!, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.FillGeometryAtOriginWithBrush(geometry, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.fillgeometry)
    public func fillGeometry(_ geometry: Win2D.CanvasGeometry!, _ brush: Win2D.AnyICanvasBrush!, _ opacityBrush: Win2D.AnyICanvasBrush!) throws {
        try _default.FillGeometryAtOriginWithBrushAndOpacityBrush(geometry, brush, opacityBrush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.fillgeometry)
    public func fillGeometry(_ geometry: Win2D.CanvasGeometry!, _ color: UWP.Color) throws {
        try _default.FillGeometryAtOriginWithColor(geometry, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawcachedgeometry)
    public func drawCachedGeometry(_ geometry: Win2D.CanvasCachedGeometry!, _ offset: WindowsFoundation.Vector2, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.DrawCachedGeometryWithBrush(geometry, offset, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawcachedgeometry)
    public func drawCachedGeometry(_ geometry: Win2D.CanvasCachedGeometry!, _ offset: WindowsFoundation.Vector2, _ color: UWP.Color) throws {
        try _default.DrawCachedGeometryWithColor(geometry, offset, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawcachedgeometry)
    public func drawCachedGeometry(_ geometry: Win2D.CanvasCachedGeometry!, _ x: Float, _ y: Float, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.DrawCachedGeometryAtCoordsWithBrush(geometry, x, y, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawcachedgeometry)
    public func drawCachedGeometry(_ geometry: Win2D.CanvasCachedGeometry!, _ x: Float, _ y: Float, _ color: UWP.Color) throws {
        try _default.DrawCachedGeometryAtCoordsWithColor(geometry, x, y, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawcachedgeometry)
    public func drawCachedGeometry(_ geometry: Win2D.CanvasCachedGeometry!, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.DrawCachedGeometryAtOriginWithBrush(geometry, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawcachedgeometry)
    public func drawCachedGeometry(_ geometry: Win2D.CanvasCachedGeometry!, _ color: UWP.Color) throws {
        try _default.DrawCachedGeometryAtOriginWithColor(geometry, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawtextlayout)
    public func drawTextLayout(_ textLayout: Win2D.CanvasTextLayout!, _ point: WindowsFoundation.Vector2, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.DrawTextLayoutWithBrush(textLayout, point, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawtextlayout)
    public func drawTextLayout(_ textLayout: Win2D.CanvasTextLayout!, _ x: Float, _ y: Float, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.DrawTextLayoutAtCoordsWithBrush(textLayout, x, y, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawtextlayout)
    public func drawTextLayout(_ textLayout: Win2D.CanvasTextLayout!, _ point: WindowsFoundation.Vector2, _ color: UWP.Color) throws {
        try _default.DrawTextLayoutWithColor(textLayout, point, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawtextlayout)
    public func drawTextLayout(_ textLayout: Win2D.CanvasTextLayout!, _ x: Float, _ y: Float, _ color: UWP.Color) throws {
        try _default.DrawTextLayoutAtCoordsWithColor(textLayout, x, y, color)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawgradientmesh)
    public func drawGradientMesh(_ gradientMesh: Win2D.CanvasGradientMesh!) throws {
        try _default.DrawGradientMeshAtOrigin(gradientMesh)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawgradientmesh)
    public func drawGradientMesh(_ gradientMesh: Win2D.CanvasGradientMesh!, _ point: WindowsFoundation.Vector2) throws {
        try _default.DrawGradientMesh(gradientMesh, point)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawgradientmesh)
    public func drawGradientMesh(_ gradientMesh: Win2D.CanvasGradientMesh!, _ x: Float, _ y: Float) throws {
        try _default.DrawGradientMeshAtCoords(gradientMesh, x, y)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawsvg)
    public func drawSvg(_ svgDocument: Win2D.CanvasSvgDocument!, _ viewportSize: WindowsFoundation.Size) throws {
        try _default.DrawSvgAtOrigin(svgDocument, viewportSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawsvg)
    public func drawSvg(_ svgDocument: Win2D.CanvasSvgDocument!, _ viewportSize: WindowsFoundation.Size, _ point: WindowsFoundation.Vector2) throws {
        try _default.DrawSvgAtPoint(svgDocument, viewportSize, point)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawsvg)
    public func drawSvg(_ svgDocument: Win2D.CanvasSvgDocument!, _ viewportSize: WindowsFoundation.Size, _ x: Float, _ y: Float) throws {
        try _default.DrawSvgAtCoords(svgDocument, viewportSize, x, y)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.createlayer)
    public func createLayer(_ opacity: Float) throws -> CanvasActiveLayer! {
        try _default.CreateLayerWithOpacity(opacity)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.createlayer)
    public func createLayer(_ opacityBrush: Win2D.AnyICanvasBrush!) throws -> CanvasActiveLayer! {
        try _default.CreateLayerWithOpacityBrush(opacityBrush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.createlayer)
    public func createLayer(_ opacity: Float, _ clipRectangle: WindowsFoundation.Rect) throws -> CanvasActiveLayer! {
        try _default.CreateLayerWithOpacityAndClipRectangle(opacity, clipRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.createlayer)
    public func createLayer(_ opacityBrush: Win2D.AnyICanvasBrush!, _ clipRectangle: WindowsFoundation.Rect) throws -> CanvasActiveLayer! {
        try _default.CreateLayerWithOpacityBrushAndClipRectangle(opacityBrush, clipRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.createlayer)
    public func createLayer(_ opacity: Float, _ clipGeometry: Win2D.CanvasGeometry!) throws -> CanvasActiveLayer! {
        try _default.CreateLayerWithOpacityAndClipGeometry(opacity, clipGeometry)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.createlayer)
    public func createLayer(_ opacityBrush: Win2D.AnyICanvasBrush!, _ clipGeometry: Win2D.CanvasGeometry!) throws -> CanvasActiveLayer! {
        try _default.CreateLayerWithOpacityBrushAndClipGeometry(opacityBrush, clipGeometry)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.createlayer)
    public func createLayer(_ opacity: Float, _ clipGeometry: Win2D.CanvasGeometry!, _ geometryTransform: WindowsFoundation.Matrix3x2) throws -> CanvasActiveLayer! {
        try _default.CreateLayerWithOpacityAndClipGeometryAndTransform(opacity, clipGeometry, geometryTransform)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.createlayer)
    public func createLayer(_ opacityBrush: Win2D.AnyICanvasBrush!, _ clipGeometry: Win2D.CanvasGeometry!, _ geometryTransform: WindowsFoundation.Matrix3x2) throws -> CanvasActiveLayer! {
        try _default.CreateLayerWithOpacityBrushAndClipGeometryAndTransform(opacityBrush, clipGeometry, geometryTransform)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.createlayer)
    public func createLayer(_ opacity: Float, _ opacityBrush: Win2D.AnyICanvasBrush!, _ clipRectangle: WindowsFoundation.Rect, _ clipGeometry: Win2D.CanvasGeometry!, _ geometryTransform: WindowsFoundation.Matrix3x2, _ options: CanvasLayerOptions) throws -> CanvasActiveLayer! {
        try _default.CreateLayerWithAllOptions(opacity, opacityBrush, clipRectangle, clipGeometry, geometryTransform, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawglyphrun)
    public func drawGlyphRun(_ point: WindowsFoundation.Vector2, _ fontFace: Win2D.CanvasFontFace!, _ fontSize: Float, _ glyphs: [Win2D.CanvasGlyph], _ isSideways: Bool, _ bidiLevel: UInt32, _ brush: Win2D.AnyICanvasBrush!) throws {
        try _default.DrawGlyphRun(point, fontFace, fontSize, glyphs, isSideways, bidiLevel, brush)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawglyphrun)
    public func drawGlyphRun(_ point: WindowsFoundation.Vector2, _ fontFace: Win2D.CanvasFontFace!, _ fontSize: Float, _ glyphs: [Win2D.CanvasGlyph], _ isSideways: Bool, _ bidiLevel: UInt32, _ brush: Win2D.AnyICanvasBrush!, _ measuringMode: Win2D.CanvasTextMeasuringMode) throws {
        try _default.DrawGlyphRunWithMeasuringMode(point, fontFace, fontSize, glyphs, isSideways, bidiLevel, brush, measuringMode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.drawglyphrun)
    public func drawGlyphRun(_ point: WindowsFoundation.Vector2, _ fontFace: Win2D.CanvasFontFace!, _ fontSize: Float, _ glyphs: [Win2D.CanvasGlyph], _ isSideways: Bool, _ bidiLevel: UInt32, _ brush: Win2D.AnyICanvasBrush!, _ measuringMode: Win2D.CanvasTextMeasuringMode, _ localeName: String, _ textString: String, _ clusterMapIndices: [Int32], _ textPosition: UInt32) throws {
        try _default.DrawGlyphRunWithMeasuringModeAndDescription(point, fontFace, fontSize, glyphs, isSideways, bidiLevel, brush, measuringMode, localeName, textString, clusterMapIndices, textPosition)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.createspritebatch)
    public func createSpriteBatch() throws -> CanvasSpriteBatch! {
        try _default.CreateSpriteBatch()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.createspritebatch)
    public func createSpriteBatch(_ sortMode: CanvasSpriteSortMode) throws -> CanvasSpriteBatch! {
        try _default.CreateSpriteBatchWithSortMode(sortMode)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.createspritebatch)
    public func createSpriteBatch(_ sortMode: CanvasSpriteSortMode, _ interpolation: CanvasImageInterpolation) throws -> CanvasSpriteBatch! {
        try _default.CreateSpriteBatchWithSortModeAndInterpolation(sortMode, interpolation)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.createspritebatch)
    public func createSpriteBatch(_ sortMode: CanvasSpriteSortMode, _ interpolation: CanvasImageInterpolation, _ options: CanvasSpriteOptions) throws -> CanvasSpriteBatch! {
        try _default.CreateSpriteBatchWithSortModeAndInterpolationAndOptions(sortMode, interpolation, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.antialiasing)
    public var antialiasing : CanvasAntialiasing {
        get { try! _default.get_Antialiasing() }
        set { try! _default.put_Antialiasing(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.blend)
    public var blend : CanvasBlend {
        get { try! _default.get_Blend() }
        set { try! _default.put_Blend(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.effectbufferprecision)
    public var effectBufferPrecision : CanvasBufferPrecision? {
        get { try! _default.get_EffectBufferPrecision() }
        set { try! _default.put_EffectBufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.effecttilesize)
    public var effectTileSize : UWP.BitmapSize {
        get { try! _default.get_EffectTileSize() }
        set { try! _default.put_EffectTileSize(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.textantialiasing)
    public var textAntialiasing : Win2D.CanvasTextAntialiasing {
        get { try! _default.get_TextAntialiasing() }
        set { try! _default.put_TextAntialiasing(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.textrenderingparameters)
    public var textRenderingParameters : Win2D.CanvasTextRenderingParameters! {
        get { try! _default.get_TextRenderingParameters() }
        set { try! _default.put_TextRenderingParameters(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.transform)
    public var transform : WindowsFoundation.Matrix3x2 {
        get { try! _default.get_Transform() }
        set { try! _default.put_Transform(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasdrawingsession.units)
    public var units : CanvasUnits {
        get { try! _default.get_Units() }
        set { try! _default.put_Units(newValue) }
    }

    deinit {
        _IClosable = nil
        _ICanvasResourceCreator = nil
        _ICanvasResourceCreatorWithDpi = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasimage)
public final class CanvasImage {
    private static let _ICanvasImageStatics: __ABI_Microsoft_Graphics_Canvas.ICanvasImageStatics = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.CanvasImage")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasimage.saveasync)
    public static func saveAsync(_ image: AnyICanvasImage!, _ sourceRectangle: WindowsFoundation.Rect, _ dpi: Float, _ resourceCreator: AnyICanvasResourceCreator!, _ stream: UWP.AnyIRandomAccessStream!, _ fileFormat: CanvasBitmapFileFormat) throws -> WindowsFoundation.AnyIAsyncAction! {
        return try _ICanvasImageStatics.SaveAsync(image, sourceRectangle, dpi, resourceCreator, stream, fileFormat)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasimage.saveasync)
    public static func saveAsync(_ image: AnyICanvasImage!, _ sourceRectangle: WindowsFoundation.Rect, _ dpi: Float, _ resourceCreator: AnyICanvasResourceCreator!, _ stream: UWP.AnyIRandomAccessStream!, _ fileFormat: CanvasBitmapFileFormat, _ quality: Float) throws -> WindowsFoundation.AnyIAsyncAction! {
        return try _ICanvasImageStatics.SaveWithQualityAsync(image, sourceRectangle, dpi, resourceCreator, stream, fileFormat, quality)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasimage.saveasync)
    public static func saveAsync(_ image: AnyICanvasImage!, _ sourceRectangle: WindowsFoundation.Rect, _ dpi: Float, _ resourceCreator: AnyICanvasResourceCreator!, _ stream: UWP.AnyIRandomAccessStream!, _ fileFormat: CanvasBitmapFileFormat, _ quality: Float, _ bufferPrecision: CanvasBufferPrecision) throws -> WindowsFoundation.AnyIAsyncAction! {
        return try _ICanvasImageStatics.SaveWithQualityAndBufferPrecisionAsync(image, sourceRectangle, dpi, resourceCreator, stream, fileFormat, quality, bufferPrecision)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasimage.computehistogram)
    public static func computeHistogram(_ image: AnyICanvasImage!, _ sourceRectangle: WindowsFoundation.Rect, _ resourceCreator: AnyICanvasResourceCreator!, _ channelSelect: Win2D.EffectChannelSelect, _ numberOfBins: Int32) throws -> [Float] {
        return try _ICanvasImageStatics.ComputeHistogram(image, sourceRectangle, resourceCreator, channelSelect, numberOfBins)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasimage.ishistogramsupported)
    public static func isHistogramSupported(_ device: CanvasDevice!) throws -> Bool {
        return try _ICanvasImageStatics.IsHistogramSupported(device)
    }

}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvaslock)
public final class CanvasLock : WinRTClass, WindowsFoundation.IClosable {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas.ICanvasLock
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasLock
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvaslock.close)
    public func close() throws {
        try _IClosable.Close()
    }

    deinit {
        _default = nil
        _IClosable = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasrendertarget)
public final class CanvasRenderTarget : Win2D.CanvasBitmap {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas.ICanvasRenderTarget
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasRenderTarget
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    override public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi: fromAbi)
    }

    private static let _ICanvasRenderTargetFactory: __ABI_Microsoft_Graphics_Canvas.ICanvasRenderTargetFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.CanvasRenderTarget")
    public init(_ resourceCreator: AnyICanvasResourceCreatorWithDpi!, _ size: WindowsFoundation.Size) {
        super.init(fromAbi: try! Self._ICanvasRenderTargetFactory.CreateWithSize(resourceCreator, size))
    }

    public init(_ resourceCreator: AnyICanvasResourceCreatorWithDpi!, _ width: Float, _ height: Float) {
        super.init(fromAbi: try! Self._ICanvasRenderTargetFactory.CreateWithWidthAndHeight(resourceCreator, width, height))
    }

    public init(_ resourceCreator: AnyICanvasResourceCreator!, _ width: Float, _ height: Float, _ dpi: Float) {
        super.init(fromAbi: try! Self._ICanvasRenderTargetFactory.CreateWithWidthAndHeightAndDpi(resourceCreator, width, height, dpi))
    }

    public init(_ resourceCreator: AnyICanvasResourceCreator!, _ width: Float, _ height: Float, _ dpi: Float, _ format: UWP.DirectXPixelFormat, _ alpha: CanvasAlphaMode) {
        super.init(fromAbi: try! Self._ICanvasRenderTargetFactory.CreateWithWidthAndHeightAndDpiAndFormatAndAlpha(resourceCreator, width, height, dpi, format, alpha))
    }

    private static let _ICanvasRenderTargetStatics: __ABI_Microsoft_Graphics_Canvas.ICanvasRenderTargetStatics = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.CanvasRenderTarget")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasrendertarget.createfromdirect3d11surface)
    override public static func createFromDirect3D11Surface(_ resourceCreator: AnyICanvasResourceCreator!, _ surface: UWP.AnyIDirect3DSurface!) throws -> CanvasRenderTarget! {
        return try _ICanvasRenderTargetStatics.CreateFromDirect3D11Surface(resourceCreator, surface)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasrendertarget.createfromdirect3d11surface)
    override public static func createFromDirect3D11Surface(_ resourceCreator: AnyICanvasResourceCreator!, _ surface: UWP.AnyIDirect3DSurface!, _ dpi: Float) throws -> CanvasRenderTarget! {
        return try _ICanvasRenderTargetStatics.CreateFromDirect3D11SurfaceWithDpi(resourceCreator, surface, dpi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasrendertarget.createfromdirect3d11surface)
    override public static func createFromDirect3D11Surface(_ resourceCreator: AnyICanvasResourceCreator!, _ surface: UWP.AnyIDirect3DSurface!, _ dpi: Float, _ alpha: CanvasAlphaMode) throws -> CanvasRenderTarget! {
        return try _ICanvasRenderTargetStatics.CreateFromDirect3D11SurfaceWithDpiAndAlpha(resourceCreator, surface, dpi, alpha)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasrendertarget.createdrawingsession)
    public func createDrawingSession() throws -> CanvasDrawingSession! {
        try _default.CreateDrawingSession()
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspritebatch)
public final class CanvasSpriteBatch : WinRTClass, WindowsFoundation.IClosable, ICanvasResourceCreator, ICanvasResourceCreatorWithDpi {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas.ICanvasSpriteBatch
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSpriteBatch
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _ICanvasSpriteBatchStatics: __ABI_Microsoft_Graphics_Canvas.ICanvasSpriteBatchStatics = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.CanvasSpriteBatch")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspritebatch.issupported)
    public static func isSupported(_ device: CanvasDevice!) throws -> Bool {
        return try _ICanvasSpriteBatchStatics.IsSupported(device)
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspritebatch.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasResourceCreator: __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreator! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspritebatch.device)
    public var device : CanvasDevice! {
        get { try! _ICanvasResourceCreator.get_Device() }
    }

    private lazy var _ICanvasResourceCreatorWithDpi: __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpi! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspritebatch.convertpixelstodips)
    public func convertPixelsToDips(_ pixels: Int32) throws -> Float {
        try _ICanvasResourceCreatorWithDpi.ConvertPixelsToDips(pixels)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspritebatch.convertdipstopixels)
    public func convertDipsToPixels(_ dips: Float, _ dpiRounding: CanvasDpiRounding) throws -> Int32 {
        try _ICanvasResourceCreatorWithDpi.ConvertDipsToPixels(dips, dpiRounding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspritebatch.dpi)
    public var dpi : Float {
        get { try! _ICanvasResourceCreatorWithDpi.get_Dpi() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspritebatch.draw)
    public func draw(_ bitmap: CanvasBitmap!, _ destRect: WindowsFoundation.Rect) throws {
        try _default.DrawToRect(bitmap, destRect)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspritebatch.draw)
    public func draw(_ bitmap: CanvasBitmap!, _ offset: WindowsFoundation.Vector2) throws {
        try _default.DrawAtOffset(bitmap, offset)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspritebatch.draw)
    public func draw(_ bitmap: CanvasBitmap!, _ transform: WindowsFoundation.Matrix3x2) throws {
        try _default.DrawWithTransform(bitmap, transform)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspritebatch.draw)
    public func draw(_ bitmap: CanvasBitmap!, _ destRect: WindowsFoundation.Rect, _ tint: WindowsFoundation.Vector4) throws {
        try _default.DrawToRectWithTint(bitmap, destRect, tint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspritebatch.draw)
    public func draw(_ bitmap: CanvasBitmap!, _ offset: WindowsFoundation.Vector2, _ tint: WindowsFoundation.Vector4) throws {
        try _default.DrawAtOffsetWithTint(bitmap, offset, tint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspritebatch.draw)
    public func draw(_ bitmap: CanvasBitmap!, _ transform: WindowsFoundation.Matrix3x2, _ tint: WindowsFoundation.Vector4) throws {
        try _default.DrawWithTransformAndTint(bitmap, transform, tint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspritebatch.draw)
    public func draw(_ bitmap: CanvasBitmap!, _ destRect: WindowsFoundation.Rect, _ tint: WindowsFoundation.Vector4, _ flip: CanvasSpriteFlip) throws {
        try _default.DrawToRectWithTintAndFlip(bitmap, destRect, tint, flip)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspritebatch.draw)
    public func draw(_ bitmap: CanvasBitmap!, _ transform: WindowsFoundation.Matrix3x2, _ tint: WindowsFoundation.Vector4, _ flip: CanvasSpriteFlip) throws {
        try _default.DrawWithTransformAndTintAndFlip(bitmap, transform, tint, flip)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspritebatch.draw)
    public func draw(_ bitmap: CanvasBitmap!, _ offset: WindowsFoundation.Vector2, _ tint: WindowsFoundation.Vector4, _ origin: WindowsFoundation.Vector2, _ rotation: Float, _ scale: WindowsFoundation.Vector2, _ flip: CanvasSpriteFlip) throws {
        try _default.DrawAtOffsetWithTintAndTransform(bitmap, offset, tint, origin, rotation, scale, flip)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspritebatch.drawfromspritesheet)
    public func drawFromSpriteSheet(_ bitmap: CanvasBitmap!, _ destRect: WindowsFoundation.Rect, _ sourceRect: WindowsFoundation.Rect) throws {
        try _default.DrawFromSpriteSheetToRect(bitmap, destRect, sourceRect)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspritebatch.drawfromspritesheet)
    public func drawFromSpriteSheet(_ bitmap: CanvasBitmap!, _ offset: WindowsFoundation.Vector2, _ sourceRect: WindowsFoundation.Rect) throws {
        try _default.DrawFromSpriteSheetAtOffset(bitmap, offset, sourceRect)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspritebatch.drawfromspritesheet)
    public func drawFromSpriteSheet(_ bitmap: CanvasBitmap!, _ transform: WindowsFoundation.Matrix3x2, _ sourceRect: WindowsFoundation.Rect) throws {
        try _default.DrawFromSpriteSheetWithTransform(bitmap, transform, sourceRect)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspritebatch.drawfromspritesheet)
    public func drawFromSpriteSheet(_ bitmap: CanvasBitmap!, _ destRect: WindowsFoundation.Rect, _ sourceRect: WindowsFoundation.Rect, _ tint: WindowsFoundation.Vector4) throws {
        try _default.DrawFromSpriteSheetToRectWithTint(bitmap, destRect, sourceRect, tint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspritebatch.drawfromspritesheet)
    public func drawFromSpriteSheet(_ bitmap: CanvasBitmap!, _ offset: WindowsFoundation.Vector2, _ sourceRect: WindowsFoundation.Rect, _ tint: WindowsFoundation.Vector4) throws {
        try _default.DrawFromSpriteSheetAtOffsetWithTint(bitmap, offset, sourceRect, tint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspritebatch.drawfromspritesheet)
    public func drawFromSpriteSheet(_ bitmap: CanvasBitmap!, _ transform: WindowsFoundation.Matrix3x2, _ sourceRect: WindowsFoundation.Rect, _ tint: WindowsFoundation.Vector4) throws {
        try _default.DrawFromSpriteSheetWithTransformAndTint(bitmap, transform, sourceRect, tint)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspritebatch.drawfromspritesheet)
    public func drawFromSpriteSheet(_ bitmap: CanvasBitmap!, _ destRect: WindowsFoundation.Rect, _ sourceRect: WindowsFoundation.Rect, _ tint: WindowsFoundation.Vector4, _ flip: CanvasSpriteFlip) throws {
        try _default.DrawFromSpriteSheetToRectWithTintAndFlip(bitmap, destRect, sourceRect, tint, flip)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspritebatch.drawfromspritesheet)
    public func drawFromSpriteSheet(_ bitmap: CanvasBitmap!, _ transform: WindowsFoundation.Matrix3x2, _ sourceRect: WindowsFoundation.Rect, _ tint: WindowsFoundation.Vector4, _ flip: CanvasSpriteFlip) throws {
        try _default.DrawFromSpriteSheetWithTransformAndTintAndFlip(bitmap, transform, sourceRect, tint, flip)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasspritebatch.drawfromspritesheet)
    public func drawFromSpriteSheet(_ bitmap: CanvasBitmap!, _ offset: WindowsFoundation.Vector2, _ sourceRect: WindowsFoundation.Rect, _ tint: WindowsFoundation.Vector4, _ origin: WindowsFoundation.Vector2, _ rotation: Float, _ scale: WindowsFoundation.Vector2, _ flip: CanvasSpriteFlip) throws {
        try _default.DrawFromSpriteSheetAtOffsetWithTintAndTransform(bitmap, offset, sourceRect, tint, origin, rotation, scale, flip)
    }

    deinit {
        _IClosable = nil
        _ICanvasResourceCreator = nil
        _ICanvasResourceCreatorWithDpi = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasswapchain)
public final class CanvasSwapChain : WinRTClass, WindowsFoundation.IClosable, ICanvasResourceCreator, ICanvasResourceCreatorWithDpi {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas.ICanvasSwapChain
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasSwapChain
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _ICanvasSwapChainFactory: __ABI_Microsoft_Graphics_Canvas.ICanvasSwapChainFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.CanvasSwapChain")
    public init(_ resourceCreator: AnyICanvasResourceCreatorWithDpi!, _ size: WindowsFoundation.Size) {
        super.init(try! Self._ICanvasSwapChainFactory.CreateWithSize(resourceCreator, size))
    }

    public init(_ resourceCreator: AnyICanvasResourceCreatorWithDpi!, _ width: Float, _ height: Float) {
        super.init(try! Self._ICanvasSwapChainFactory.CreateWithWidthAndHeight(resourceCreator, width, height))
    }

    public init(_ resourceCreator: AnyICanvasResourceCreator!, _ width: Float, _ height: Float, _ dpi: Float) {
        super.init(try! Self._ICanvasSwapChainFactory.CreateWithWidthAndHeightAndDpi(resourceCreator, width, height, dpi))
    }

    public init(_ resourceCreator: AnyICanvasResourceCreator!, _ width: Float, _ height: Float, _ dpi: Float, _ format: UWP.DirectXPixelFormat, _ bufferCount: Int32, _ alphaMode: CanvasAlphaMode) {
        super.init(try! Self._ICanvasSwapChainFactory.CreateWithAllOptions(resourceCreator, width, height, dpi, format, bufferCount, alphaMode))
    }

    private static let _ICanvasSwapChainStatics: __ABI_Microsoft_Graphics_Canvas.ICanvasSwapChainStatics = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.CanvasSwapChain")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasswapchain.createforcorewindow)
    public static func createForCoreWindow(_ resourceCreator: AnyICanvasResourceCreator!, _ coreWindow: UWP.CoreWindow!, _ dpi: Float) throws -> CanvasSwapChain! {
        return try _ICanvasSwapChainStatics.CreateForCoreWindowWithDpi(resourceCreator, coreWindow, dpi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasswapchain.createforcorewindow)
    public static func createForCoreWindow(_ resourceCreator: AnyICanvasResourceCreator!, _ coreWindow: UWP.CoreWindow!, _ width: Float, _ height: Float, _ dpi: Float, _ format: UWP.DirectXPixelFormat, _ bufferCount: Int32) throws -> CanvasSwapChain! {
        return try _ICanvasSwapChainStatics.CreateForCoreWindowWithAllOptions(resourceCreator, coreWindow, width, height, dpi, format, bufferCount)
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasswapchain.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasResourceCreator: __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreator! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasswapchain.device)
    public var device : CanvasDevice! {
        get { try! _ICanvasResourceCreator.get_Device() }
    }

    private lazy var _ICanvasResourceCreatorWithDpi: __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpi! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasswapchain.convertpixelstodips)
    public func convertPixelsToDips(_ pixels: Int32) throws -> Float {
        try _ICanvasResourceCreatorWithDpi.ConvertPixelsToDips(pixels)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasswapchain.convertdipstopixels)
    public func convertDipsToPixels(_ dips: Float, _ dpiRounding: CanvasDpiRounding) throws -> Int32 {
        try _ICanvasResourceCreatorWithDpi.ConvertDipsToPixels(dips, dpiRounding)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasswapchain.dpi)
    public var dpi : Float {
        get { try! _ICanvasResourceCreatorWithDpi.get_Dpi() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasswapchain.present)
    public func present() throws {
        try _default.Present()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasswapchain.present)
    public func present(_ syncInterval: Int32) throws {
        try _default.PresentWithSyncInterval(syncInterval)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasswapchain.resizebuffers)
    public func resizeBuffers(_ newSize: WindowsFoundation.Size) throws {
        try _default.ResizeBuffersWithSize(newSize)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasswapchain.resizebuffers)
    public func resizeBuffers(_ newWidth: Float, _ newHeight: Float) throws {
        try _default.ResizeBuffersWithWidthAndHeight(newWidth, newHeight)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasswapchain.resizebuffers)
    public func resizeBuffers(_ newWidth: Float, _ newHeight: Float, _ newDpi: Float) throws {
        try _default.ResizeBuffersWithWidthAndHeightAndDpi(newWidth, newHeight, newDpi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasswapchain.resizebuffers)
    public func resizeBuffers(_ newWidth: Float, _ newHeight: Float, _ newDpi: Float, _ newFormat: UWP.DirectXPixelFormat, _ bufferCount: Int32) throws {
        try _default.ResizeBuffersWithAllOptions(newWidth, newHeight, newDpi, newFormat, bufferCount)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasswapchain.createdrawingsession)
    public func createDrawingSession(_ clearColor: UWP.Color) throws -> CanvasDrawingSession! {
        try _default.CreateDrawingSession(clearColor)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasswapchain.waitforverticalblank)
    public func waitForVerticalBlank() throws {
        try _default.WaitForVerticalBlank()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasswapchain.alphamode)
    public var alphaMode : CanvasAlphaMode {
        get { try! _default.get_AlphaMode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasswapchain.buffercount)
    public var bufferCount : Int32 {
        get { try! _default.get_BufferCount() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasswapchain.format)
    public var format : UWP.DirectXPixelFormat {
        get { try! _default.get_Format() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasswapchain.rotation)
    public var rotation : CanvasSwapChainRotation {
        get { try! _default.get_Rotation() }
        set { try! _default.put_Rotation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasswapchain.size)
    public var size : WindowsFoundation.Size {
        get { try! _default.get_Size() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasswapchain.sizeinpixels)
    public var sizeInPixels : UWP.BitmapSize {
        get { try! _default.get_SizeInPixels() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasswapchain.sourcesize)
    public var sourceSize : WindowsFoundation.Size {
        get { try! _default.get_SourceSize() }
        set { try! _default.put_SourceSize(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasswapchain.transformmatrix)
    public var transformMatrix : WindowsFoundation.Matrix3x2 {
        get { try! _default.get_TransformMatrix() }
        set { try! _default.put_TransformMatrix(newValue) }
    }

    deinit {
        _IClosable = nil
        _ICanvasResourceCreator = nil
        _ICanvasResourceCreatorWithDpi = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasvirtualbitmap)
public final class CanvasVirtualBitmap : WinRTClass, WindowsFoundation.IClosable, UWP.IGraphicsEffectSource, ICanvasImage {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas.ICanvasVirtualBitmap
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CICanvasVirtualBitmap
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _ICanvasVirtualBitmapStatics: __ABI_Microsoft_Graphics_Canvas.ICanvasVirtualBitmapStatics = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.CanvasVirtualBitmap")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasvirtualbitmap.loadasync)
    public static func loadAsync(_ resourceCreator: AnyICanvasResourceCreator!, _ fileName: String) throws -> WindowsFoundation.AnyIAsyncOperation<CanvasVirtualBitmap?>! {
        return try _ICanvasVirtualBitmapStatics.LoadAsyncFromFileName(resourceCreator, fileName)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasvirtualbitmap.loadasync)
    public static func loadAsync(_ resourceCreator: AnyICanvasResourceCreator!, _ fileName: String, _ options: CanvasVirtualBitmapOptions) throws -> WindowsFoundation.AnyIAsyncOperation<CanvasVirtualBitmap?>! {
        return try _ICanvasVirtualBitmapStatics.LoadAsyncFromFileNameWithOptions(resourceCreator, fileName, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasvirtualbitmap.loadasync)
    public static func loadAsync(_ resourceCreator: AnyICanvasResourceCreator!, _ fileName: String, _ options: CanvasVirtualBitmapOptions, _ alpha: CanvasAlphaMode) throws -> WindowsFoundation.AnyIAsyncOperation<CanvasVirtualBitmap?>! {
        return try _ICanvasVirtualBitmapStatics.LoadAsyncFromFileNameWithOptionsAndAlpha(resourceCreator, fileName, options, alpha)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasvirtualbitmap.loadasync)
    public static func loadAsync(_ resourceCreator: AnyICanvasResourceCreator!, _ uri: WindowsFoundation.Uri!) throws -> WindowsFoundation.AnyIAsyncOperation<CanvasVirtualBitmap?>! {
        return try _ICanvasVirtualBitmapStatics.LoadAsyncFromUri(resourceCreator, uri)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasvirtualbitmap.loadasync)
    public static func loadAsync(_ resourceCreator: AnyICanvasResourceCreator!, _ uri: WindowsFoundation.Uri!, _ options: CanvasVirtualBitmapOptions) throws -> WindowsFoundation.AnyIAsyncOperation<CanvasVirtualBitmap?>! {
        return try _ICanvasVirtualBitmapStatics.LoadAsyncFromUriWithOptions(resourceCreator, uri, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasvirtualbitmap.loadasync)
    public static func loadAsync(_ resourceCreator: AnyICanvasResourceCreator!, _ uri: WindowsFoundation.Uri!, _ options: CanvasVirtualBitmapOptions, _ alpha: CanvasAlphaMode) throws -> WindowsFoundation.AnyIAsyncOperation<CanvasVirtualBitmap?>! {
        return try _ICanvasVirtualBitmapStatics.LoadAsyncFromUriWithOptionsAndAlpha(resourceCreator, uri, options, alpha)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasvirtualbitmap.loadasync)
    public static func loadAsync(_ resourceCreator: AnyICanvasResourceCreator!, _ stream: UWP.AnyIRandomAccessStream!) throws -> WindowsFoundation.AnyIAsyncOperation<CanvasVirtualBitmap?>! {
        return try _ICanvasVirtualBitmapStatics.LoadAsyncFromStream(resourceCreator, stream)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasvirtualbitmap.loadasync)
    public static func loadAsync(_ resourceCreator: AnyICanvasResourceCreator!, _ stream: UWP.AnyIRandomAccessStream!, _ options: CanvasVirtualBitmapOptions) throws -> WindowsFoundation.AnyIAsyncOperation<CanvasVirtualBitmap?>! {
        return try _ICanvasVirtualBitmapStatics.LoadAsyncFromStreamWithOptions(resourceCreator, stream, options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasvirtualbitmap.loadasync)
    public static func loadAsync(_ resourceCreator: AnyICanvasResourceCreator!, _ stream: UWP.AnyIRandomAccessStream!, _ options: CanvasVirtualBitmapOptions, _ alpha: CanvasAlphaMode) throws -> WindowsFoundation.AnyIAsyncOperation<CanvasVirtualBitmap?>! {
        return try _ICanvasVirtualBitmapStatics.LoadAsyncFromStreamWithOptionsAndAlpha(resourceCreator, stream, options, alpha)
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasvirtualbitmap.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasvirtualbitmap.getbounds)
    public func getBounds(_ resourceCreator: AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasvirtualbitmap.getbounds)
    public func getBounds(_ resourceCreator: AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasvirtualbitmap.bounds)
    public var bounds : WindowsFoundation.Rect {
        get { try! _default.get_Bounds() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasvirtualbitmap.device)
    public var device : CanvasDevice! {
        get { try! _default.get_Device() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasvirtualbitmap.iscachedondemand)
    public var isCachedOnDemand : Bool {
        get { try! _default.get_IsCachedOnDemand() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasvirtualbitmap.size)
    public var size : WindowsFoundation.Size {
        get { try! _default.get_Size() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.canvasvirtualbitmap.sizeinpixels)
    public var sizeInPixels : UWP.BitmapSize {
        get { try! _default.get_SizeInPixels() }
    }

    deinit {
        _IClosable = nil
        _IGraphicsEffectSource = nil
        _ICanvasImage = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.icanvasimage)
public protocol ICanvasImage : UWP.IGraphicsEffectSource, WindowsFoundation.IClosable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.icanvasimage.getbounds)
    func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.icanvasimage.getbounds)
    func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect
}

extension ICanvasImage {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_Graphics_Canvas.ICanvasImageWrapper.IID:
                let wrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasImageWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.IID:
                let wrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Foundation.IClosableWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IClosableWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyICanvasImage = any ICanvasImage

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.icanvasresourcecreator)
public protocol ICanvasResourceCreator : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.icanvasresourcecreator.device)
    var device: Win2D.CanvasDevice! { get }
}

extension ICanvasResourceCreator {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper.IID:
                let wrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyICanvasResourceCreator = any ICanvasResourceCreator

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.icanvasresourcecreatorwithdpi)
public protocol ICanvasResourceCreatorWithDpi : ICanvasResourceCreator {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.icanvasresourcecreatorwithdpi.convertpixelstodips)
    func convertPixelsToDips(_ pixels: Int32) throws -> Float
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.icanvasresourcecreatorwithdpi.convertdipstopixels)
    func convertDipsToPixels(_ dips: Float, _ dpiRounding: Win2D.CanvasDpiRounding) throws -> Int32
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.icanvasresourcecreatorwithdpi.dpi)
    var dpi: Float { get }
}

extension ICanvasResourceCreatorWithDpi {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpiWrapper.IID:
                let wrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpiWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper.IID:
                let wrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyICanvasResourceCreatorWithDpi = any ICanvasResourceCreatorWithDpi

extension Win2D.CanvasAlphaMode {
    public static var premultiplied : Win2D.CanvasAlphaMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode_Premultiplied
    }
    public static var straight : Win2D.CanvasAlphaMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode_Straight
    }
    public static var ignore : Win2D.CanvasAlphaMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode_Ignore
    }
}
extension Win2D.CanvasAlphaMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasAntialiasing {
    public static var antialiased : Win2D.CanvasAntialiasing {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing_Antialiased
    }
    public static var aliased : Win2D.CanvasAntialiasing {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAntialiasing_Aliased
    }
}
extension Win2D.CanvasAntialiasing: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasBitmapFileFormat {
    public static var auto : Win2D.CanvasBitmapFileFormat {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_Auto
    }
    public static var bmp : Win2D.CanvasBitmapFileFormat {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_Bmp
    }
    public static var png : Win2D.CanvasBitmapFileFormat {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_Png
    }
    public static var jpeg : Win2D.CanvasBitmapFileFormat {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_Jpeg
    }
    public static var tiff : Win2D.CanvasBitmapFileFormat {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_Tiff
    }
    public static var gif : Win2D.CanvasBitmapFileFormat {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_Gif
    }
    public static var jpegXR : Win2D.CanvasBitmapFileFormat {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBitmapFileFormat_JpegXR
    }
}
extension Win2D.CanvasBitmapFileFormat: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasBlend {
    public static var sourceOver : Win2D.CanvasBlend {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend_SourceOver
    }
    public static var copy : Win2D.CanvasBlend {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend_Copy
    }
    public static var min : Win2D.CanvasBlend {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend_Min
    }
    public static var add : Win2D.CanvasBlend {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBlend_Add
    }
}
extension Win2D.CanvasBlend: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasBufferPrecision {
    public static var precision8UIntNormalized : Win2D.CanvasBufferPrecision {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision_Precision8UIntNormalized
    }
    public static var precision8UIntNormalizedSrgb : Win2D.CanvasBufferPrecision {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision_Precision8UIntNormalizedSrgb
    }
    public static var precision16UIntNormalized : Win2D.CanvasBufferPrecision {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision_Precision16UIntNormalized
    }
    public static var precision16Float : Win2D.CanvasBufferPrecision {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision_Precision16Float
    }
    public static var precision32Float : Win2D.CanvasBufferPrecision {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision_Precision32Float
    }
}
extension Win2D.CanvasBufferPrecision: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasColorSpace {
    public static var custom : Win2D.CanvasColorSpace {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace_Custom
    }
    public static var srgb : Win2D.CanvasColorSpace {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace_Srgb
    }
    public static var scRgb : Win2D.CanvasColorSpace {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace_ScRgb
    }
}
extension Win2D.CanvasColorSpace: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasComposite {
    public static var sourceOver : Win2D.CanvasComposite {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_SourceOver
    }
    public static var destinationOver : Win2D.CanvasComposite {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_DestinationOver
    }
    public static var sourceIn : Win2D.CanvasComposite {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_SourceIn
    }
    public static var destinationIn : Win2D.CanvasComposite {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_DestinationIn
    }
    public static var sourceOut : Win2D.CanvasComposite {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_SourceOut
    }
    public static var destinationOut : Win2D.CanvasComposite {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_DestinationOut
    }
    public static var sourceAtop : Win2D.CanvasComposite {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_SourceAtop
    }
    public static var destinationAtop : Win2D.CanvasComposite {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_DestinationAtop
    }
    public static var xor : Win2D.CanvasComposite {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_Xor
    }
    public static var add : Win2D.CanvasComposite {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_Add
    }
    public static var copy : Win2D.CanvasComposite {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_Copy
    }
    public static var boundedCopy : Win2D.CanvasComposite {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_BoundedCopy
    }
    public static var maskInvert : Win2D.CanvasComposite {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite_MaskInvert
    }
}
extension Win2D.CanvasComposite: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasDebugLevel {
    public static var none : Win2D.CanvasDebugLevel {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel_None
    }
    public static var error : Win2D.CanvasDebugLevel {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel_Error
    }
    public static var warning : Win2D.CanvasDebugLevel {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel_Warning
    }
    public static var information : Win2D.CanvasDebugLevel {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDebugLevel_Information
    }
}
extension Win2D.CanvasDebugLevel: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasDpiRounding {
    public static var floor : Win2D.CanvasDpiRounding {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding_Floor
    }
    public static var round : Win2D.CanvasDpiRounding {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding_Round
    }
    public static var ceiling : Win2D.CanvasDpiRounding {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasDpiRounding_Ceiling
    }
}
extension Win2D.CanvasDpiRounding: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasEdgeBehavior {
    public static var clamp : Win2D.CanvasEdgeBehavior {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior_Clamp
    }
    public static var wrap : Win2D.CanvasEdgeBehavior {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior_Wrap
    }
    public static var mirror : Win2D.CanvasEdgeBehavior {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior_Mirror
    }
}
extension Win2D.CanvasEdgeBehavior: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasImageInterpolation {
    public static var nearestNeighbor : Win2D.CanvasImageInterpolation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_NearestNeighbor
    }
    public static var linear : Win2D.CanvasImageInterpolation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_Linear
    }
    public static var cubic : Win2D.CanvasImageInterpolation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_Cubic
    }
    public static var multiSampleLinear : Win2D.CanvasImageInterpolation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_MultiSampleLinear
    }
    public static var anisotropic : Win2D.CanvasImageInterpolation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_Anisotropic
    }
    public static var highQualityCubic : Win2D.CanvasImageInterpolation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation_HighQualityCubic
    }
}
extension Win2D.CanvasImageInterpolation: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasLayerOptions {
    public static var none : Win2D.CanvasLayerOptions {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions_None
    }
    public static var initializeFromBackground : Win2D.CanvasLayerOptions {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions_InitializeFromBackground
    }
    public static var ignoreAlpha : Win2D.CanvasLayerOptions {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasLayerOptions_IgnoreAlpha
    }
}
extension Win2D.CanvasLayerOptions: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasSpriteFlip {
    public static var none : Win2D.CanvasSpriteFlip {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip_None
    }
    public static var horizontal : Win2D.CanvasSpriteFlip {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip_Horizontal
    }
    public static var vertical : Win2D.CanvasSpriteFlip {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip_Vertical
    }
    public static var both : Win2D.CanvasSpriteFlip {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteFlip_Both
    }
}
extension Win2D.CanvasSpriteFlip: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasSpriteOptions {
    public static var none : Win2D.CanvasSpriteOptions {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions_None
    }
    public static var clampToSourceRect : Win2D.CanvasSpriteOptions {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteOptions_ClampToSourceRect
    }
}
extension Win2D.CanvasSpriteOptions: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasSpriteSortMode {
    public static var none : Win2D.CanvasSpriteSortMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode_None
    }
    public static var bitmap : Win2D.CanvasSpriteSortMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSpriteSortMode_Bitmap
    }
}
extension Win2D.CanvasSpriteSortMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasSwapChainRotation {
    public static var none : Win2D.CanvasSwapChainRotation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation_None
    }
    public static var rotate90 : Win2D.CanvasSwapChainRotation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation_Rotate90
    }
    public static var rotate180 : Win2D.CanvasSwapChainRotation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation_Rotate180
    }
    public static var rotate270 : Win2D.CanvasSwapChainRotation {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasSwapChainRotation_Rotate270
    }
}
extension Win2D.CanvasSwapChainRotation: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasUnits {
    public static var dips : Win2D.CanvasUnits {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasUnits_Dips
    }
    public static var pixels : Win2D.CanvasUnits {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasUnits_Pixels
    }
}
extension Win2D.CanvasUnits: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.CanvasVirtualBitmapOptions {
    public static var none : Win2D.CanvasVirtualBitmapOptions {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions_None
    }
    public static var releaseSource : Win2D.CanvasVirtualBitmapOptions {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions_ReleaseSource
    }
    public static var cacheOnDemand : Win2D.CanvasVirtualBitmapOptions {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasVirtualBitmapOptions_CacheOnDemand
    }
}
extension Win2D.CanvasVirtualBitmapOptions: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

