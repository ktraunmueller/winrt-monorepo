// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.blendeffectmode)
public typealias BlendEffectMode = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementeffectquality)
public typealias ColorManagementEffectQuality = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementEffectQuality
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementgamma)
public typealias ColorManagementGamma = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementGamma
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementprofiletype)
public typealias ColorManagementProfileType = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementProfileType
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementrenderingintent)
public typealias ColorManagementRenderingIntent = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.edgedetectioneffectmode)
public typealias EdgeDetectionEffectMode = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEdgeDetectionEffectMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.effectbordermode)
public typealias EffectBorderMode = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.effectchannelselect)
public typealias EffectChannelSelect = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.effecthuecolorspace)
public typealias EffectHueColorSpace = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.effectoptimization)
public typealias EffectOptimization = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.extendedcolorspace)
public typealias ExtendedColorSpace = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.morphologyeffectmode)
public typealias MorphologyEffectMode = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMorphologyEffectMode
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.samplercoordinatemapping)
public typealias SamplerCoordinateMapping = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.turbulenceeffectnoise)
public typealias TurbulenceEffectNoise = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CTurbulenceEffectNoise
/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.alphamaskeffect)
public final class AlphaMaskEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IAlphaMaskEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.AlphaMaskEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IAlphaMaskEffectStatics: __ABI_Microsoft_Graphics_Canvas_Effects.IAlphaMaskEffectStatics = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.AlphaMaskEffect")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.alphamaskeffect.issupported)
    public static var isSupported : Bool {
        get { try! _IAlphaMaskEffectStatics.get_IsSupported() }
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.alphamaskeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.alphamaskeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.alphamaskeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.alphamaskeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.alphamaskeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.alphamaskeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.alphamaskeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.alphamaskeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.alphamaskeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.alphamaskeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.alphamaskeffect.alphamask)
    public var alphaMask : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_AlphaMask() }
        set { try! _default.put_AlphaMask(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.alphamaskeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.arithmeticcompositeeffect)
public final class ArithmeticCompositeEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IArithmeticCompositeEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.ArithmeticCompositeEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.arithmeticcompositeeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.arithmeticcompositeeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.arithmeticcompositeeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.arithmeticcompositeeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.arithmeticcompositeeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.arithmeticcompositeeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.arithmeticcompositeeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.arithmeticcompositeeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.arithmeticcompositeeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.arithmeticcompositeeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.arithmeticcompositeeffect.clampoutput)
    public var clampOutput : Bool {
        get { try! _default.get_ClampOutput() }
        set { try! _default.put_ClampOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.arithmeticcompositeeffect.multiplyamount)
    public var multiplyAmount : Float {
        get { try! _default.get_MultiplyAmount() }
        set { try! _default.put_MultiplyAmount(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.arithmeticcompositeeffect.offset)
    public var offset : Float {
        get { try! _default.get_Offset() }
        set { try! _default.put_Offset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.arithmeticcompositeeffect.source1)
    public var source1 : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source1() }
        set { try! _default.put_Source1(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.arithmeticcompositeeffect.source1amount)
    public var source1Amount : Float {
        get { try! _default.get_Source1Amount() }
        set { try! _default.put_Source1Amount(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.arithmeticcompositeeffect.source2)
    public var source2 : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source2() }
        set { try! _default.put_Source2(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.arithmeticcompositeeffect.source2amount)
    public var source2Amount : Float {
        get { try! _default.get_Source2Amount() }
        set { try! _default.put_Source2Amount(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.atlaseffect)
public final class AtlasEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IAtlasEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.AtlasEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.atlaseffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.atlaseffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.atlaseffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.atlaseffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.atlaseffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.atlaseffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.atlaseffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.atlaseffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.atlaseffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.atlaseffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.atlaseffect.paddingrectangle)
    public var paddingRectangle : WindowsFoundation.Rect {
        get { try! _default.get_PaddingRectangle() }
        set { try! _default.put_PaddingRectangle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.atlaseffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.atlaseffect.sourcerectangle)
    public var sourceRectangle : WindowsFoundation.Rect {
        get { try! _default.get_SourceRectangle() }
        set { try! _default.put_SourceRectangle(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.blendeffect)
public final class BlendEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IBlendEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.BlendEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.blendeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.blendeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.blendeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.blendeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.blendeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.blendeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.blendeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.blendeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.blendeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.blendeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.blendeffect.background)
    public var background : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Background() }
        set { try! _default.put_Background(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.blendeffect.foreground)
    public var foreground : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Foreground() }
        set { try! _default.put_Foreground(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.blendeffect.mode)
    public var mode : BlendEffectMode {
        get { try! _default.get_Mode() }
        set { try! _default.put_Mode(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.bordereffect)
public final class BorderEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IBorderEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.BorderEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.bordereffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.bordereffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.bordereffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.bordereffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.bordereffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.bordereffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.bordereffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.bordereffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.bordereffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.bordereffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.bordereffect.extendx)
    public var extendX : Win2D.CanvasEdgeBehavior {
        get { try! _default.get_ExtendX() }
        set { try! _default.put_ExtendX(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.bordereffect.extendy)
    public var extendY : Win2D.CanvasEdgeBehavior {
        get { try! _default.get_ExtendY() }
        set { try! _default.put_ExtendY(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.bordereffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.brightnesseffect)
public final class BrightnessEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IBrightnessEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.BrightnessEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.brightnesseffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.brightnesseffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.brightnesseffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.brightnesseffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.brightnesseffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.brightnesseffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.brightnesseffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.brightnesseffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.brightnesseffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.brightnesseffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.brightnesseffect.blackpoint)
    public var blackPoint : WindowsFoundation.Vector2 {
        get { try! _default.get_BlackPoint() }
        set { try! _default.put_BlackPoint(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.brightnesseffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.brightnesseffect.whitepoint)
    public var whitePoint : WindowsFoundation.Vector2 {
        get { try! _default.get_WhitePoint() }
        set { try! _default.put_WhitePoint(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.chromakeyeffect)
public final class ChromaKeyEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IChromaKeyEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.ChromaKeyEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.chromakeyeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.chromakeyeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.chromakeyeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.chromakeyeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.chromakeyeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.chromakeyeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.chromakeyeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.chromakeyeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.chromakeyeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.chromakeyeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.chromakeyeffect.color)
    public var color : UWP.Color {
        get { try! _default.get_Color() }
        set { try! _default.put_Color(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.chromakeyeffect.colorhdr)
    public var colorHdr : WindowsFoundation.Vector4 {
        get { try! _default.get_ColorHdr() }
        set { try! _default.put_ColorHdr(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.chromakeyeffect.feather)
    public var feather : Bool {
        get { try! _default.get_Feather() }
        set { try! _default.put_Feather(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.chromakeyeffect.invertalpha)
    public var invertAlpha : Bool {
        get { try! _default.get_InvertAlpha() }
        set { try! _default.put_InvertAlpha(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.chromakeyeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.chromakeyeffect.tolerance)
    public var tolerance : Float {
        get { try! _default.get_Tolerance() }
        set { try! _default.put_Tolerance(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementeffect)
public final class ColorManagementEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IColorManagementEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.ColorManagementEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IColorManagementEffectStatics: __ABI_Microsoft_Graphics_Canvas_Effects.IColorManagementEffectStatics = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.ColorManagementEffect")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementeffect.isbestqualitysupported)
    public static func isBestQualitySupported(_ device: Win2D.CanvasDevice!) throws -> Bool {
        return try _IColorManagementEffectStatics.IsBestQualitySupported(device)
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementeffect.alphamode)
    public var alphaMode : Win2D.CanvasAlphaMode {
        get { try! _default.get_AlphaMode() }
        set { try! _default.put_AlphaMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementeffect.outputcolorprofile)
    public var outputColorProfile : ColorManagementProfile! {
        get { try! _default.get_OutputColorProfile() }
        set { try! _default.put_OutputColorProfile(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementeffect.outputrenderingintent)
    public var outputRenderingIntent : ColorManagementRenderingIntent {
        get { try! _default.get_OutputRenderingIntent() }
        set { try! _default.put_OutputRenderingIntent(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementeffect.quality)
    public var quality : ColorManagementEffectQuality {
        get { try! _default.get_Quality() }
        set { try! _default.put_Quality(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementeffect.sourcecolorprofile)
    public var sourceColorProfile : ColorManagementProfile! {
        get { try! _default.get_SourceColorProfile() }
        set { try! _default.put_SourceColorProfile(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementeffect.sourcerenderingintent)
    public var sourceRenderingIntent : ColorManagementRenderingIntent {
        get { try! _default.get_SourceRenderingIntent() }
        set { try! _default.put_SourceRenderingIntent(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementprofile)
public final class ColorManagementProfile : WinRTClass, WindowsFoundation.IClosable {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IColorManagementProfile
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _IColorManagementProfileFactory: __ABI_Microsoft_Graphics_Canvas_Effects.IColorManagementProfileFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.ColorManagementProfile")
    public init(_ colorSpace: Win2D.CanvasColorSpace) {
        super.init(try! Self._IColorManagementProfileFactory.Create(colorSpace))
    }

    private static let _IColorManagementProfileStatics: __ABI_Microsoft_Graphics_Canvas_Effects.IColorManagementProfileStatics = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.ColorManagementProfile")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementprofile.createcustom)
    public static func createCustom(_ iccProfile: [UInt8]) throws -> ColorManagementProfile! {
        return try _IColorManagementProfileStatics.CreateCustom(iccProfile)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementprofile.createsimple)
    public static func createSimple(_ simpleProfile: ColorManagementSimpleProfile) throws -> ColorManagementProfile! {
        return try _IColorManagementProfileStatics.CreateSimple(simpleProfile)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementprofile.createextended)
    public static func createExtended(_ colorSpace: ExtendedColorSpace) throws -> ColorManagementProfile! {
        return try _IColorManagementProfileStatics.CreateExtended(colorSpace)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementprofile.issupported)
    public static func isSupported(_ type: ColorManagementProfileType, _ device: Win2D.CanvasDevice!) throws -> Bool {
        return try _IColorManagementProfileStatics.IsSupported(type, device)
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementprofile.close)
    public func close() throws {
        try _IClosable.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementprofile.colorspace)
    public var colorSpace : Win2D.CanvasColorSpace {
        get { try! _default.get_ColorSpace() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementprofile.extendedcolorspace)
    public var extendedColorSpace : ExtendedColorSpace {
        get { try! _default.get_ExtendedColorSpace() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementprofile.iccprofile)
    public var iccProfile : [UInt8] {
        get { try! _default.get_IccProfile() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementprofile.simpleprofile)
    public var simpleProfile : ColorManagementSimpleProfile? {
        get { try! _default.get_SimpleProfile() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementprofile.type)
    public var type : ColorManagementProfileType {
        get { try! _default.get_Type() }
    }

    deinit {
        _IClosable = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormatrixeffect)
public final class ColorMatrixEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IColorMatrixEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.ColorMatrixEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormatrixeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormatrixeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormatrixeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormatrixeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormatrixeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormatrixeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormatrixeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormatrixeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormatrixeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormatrixeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormatrixeffect.alphamode)
    public var alphaMode : Win2D.CanvasAlphaMode {
        get { try! _default.get_AlphaMode() }
        set { try! _default.put_AlphaMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormatrixeffect.clampoutput)
    public var clampOutput : Bool {
        get { try! _default.get_ClampOutput() }
        set { try! _default.put_ClampOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormatrixeffect.colormatrix)
    public var colorMatrix : Matrix5x4 {
        get { try! _default.get_ColorMatrix() }
        set { try! _default.put_ColorMatrix(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormatrixeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colorsourceeffect)
public final class ColorSourceEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IColorSourceEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.ColorSourceEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colorsourceeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colorsourceeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colorsourceeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colorsourceeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colorsourceeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colorsourceeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colorsourceeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colorsourceeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colorsourceeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colorsourceeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colorsourceeffect.color)
    public var color : UWP.Color {
        get { try! _default.get_Color() }
        set { try! _default.put_Color(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colorsourceeffect.colorhdr)
    public var colorHdr : WindowsFoundation.Vector4 {
        get { try! _default.get_ColorHdr() }
        set { try! _default.put_ColorHdr(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.compositeeffect)
public final class CompositeEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.ICompositeEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.CompositeEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.compositeeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.compositeeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.compositeeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.compositeeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.compositeeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.compositeeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.compositeeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.compositeeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.compositeeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.compositeeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.compositeeffect.mode)
    public var mode : Win2D.CanvasComposite {
        get { try! _default.get_Mode() }
        set { try! _default.put_Mode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.compositeeffect.sources)
    public var sources : WindowsFoundation.AnyIVector<UWP.AnyIGraphicsEffectSource?>! {
        get { try! _default.get_Sources() }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.contrasteffect)
public final class ContrastEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IContrastEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.ContrastEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.contrasteffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.contrasteffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.contrasteffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.contrasteffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.contrasteffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.contrasteffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.contrasteffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.contrasteffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.contrasteffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.contrasteffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.contrasteffect.clampsource)
    public var clampSource : Bool {
        get { try! _default.get_ClampSource() }
        set { try! _default.put_ClampSource(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.contrasteffect.contrast)
    public var contrast : Float {
        get { try! _default.get_Contrast() }
        set { try! _default.put_Contrast(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.contrasteffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.convolvematrixeffect)
public final class ConvolveMatrixEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IConvolveMatrixEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.ConvolveMatrixEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.convolvematrixeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.convolvematrixeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.convolvematrixeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.convolvematrixeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.convolvematrixeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.convolvematrixeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.convolvematrixeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.convolvematrixeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.convolvematrixeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.convolvematrixeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.convolvematrixeffect.bordermode)
    public var borderMode : EffectBorderMode {
        get { try! _default.get_BorderMode() }
        set { try! _default.put_BorderMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.convolvematrixeffect.clampoutput)
    public var clampOutput : Bool {
        get { try! _default.get_ClampOutput() }
        set { try! _default.put_ClampOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.convolvematrixeffect.divisor)
    public var divisor : Float {
        get { try! _default.get_Divisor() }
        set { try! _default.put_Divisor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.convolvematrixeffect.interpolationmode)
    public var interpolationMode : Win2D.CanvasImageInterpolation {
        get { try! _default.get_InterpolationMode() }
        set { try! _default.put_InterpolationMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.convolvematrixeffect.kernelheight)
    public var kernelHeight : Int32 {
        get { try! _default.get_KernelHeight() }
        set { try! _default.put_KernelHeight(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.convolvematrixeffect.kernelmatrix)
    public var kernelMatrix : [Float] {
        get { try! _default.get_KernelMatrix() }
        set { try! _default.put_KernelMatrix(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.convolvematrixeffect.kerneloffset)
    public var kernelOffset : WindowsFoundation.Vector2 {
        get { try! _default.get_KernelOffset() }
        set { try! _default.put_KernelOffset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.convolvematrixeffect.kernelscale)
    public var kernelScale : WindowsFoundation.Vector2 {
        get { try! _default.get_KernelScale() }
        set { try! _default.put_KernelScale(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.convolvematrixeffect.kernelwidth)
    public var kernelWidth : Int32 {
        get { try! _default.get_KernelWidth() }
        set { try! _default.put_KernelWidth(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.convolvematrixeffect.offset)
    public var offset : Float {
        get { try! _default.get_Offset() }
        set { try! _default.put_Offset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.convolvematrixeffect.preservealpha)
    public var preserveAlpha : Bool {
        get { try! _default.get_PreserveAlpha() }
        set { try! _default.put_PreserveAlpha(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.convolvematrixeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.cropeffect)
public final class CropEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.ICropEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.CropEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.cropeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.cropeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.cropeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.cropeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.cropeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.cropeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.cropeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.cropeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.cropeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.cropeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.cropeffect.bordermode)
    public var borderMode : EffectBorderMode {
        get { try! _default.get_BorderMode() }
        set { try! _default.put_BorderMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.cropeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.cropeffect.sourcerectangle)
    public var sourceRectangle : WindowsFoundation.Rect {
        get { try! _default.get_SourceRectangle() }
        set { try! _default.put_SourceRectangle(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.crossfadeeffect)
public final class CrossFadeEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.ICrossFadeEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.CrossFadeEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private static let _ICrossFadeEffectStatics: __ABI_Microsoft_Graphics_Canvas_Effects.ICrossFadeEffectStatics = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.CrossFadeEffect")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.crossfadeeffect.issupported)
    public static var isSupported : Bool {
        get { try! _ICrossFadeEffectStatics.get_IsSupported() }
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.crossfadeeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.crossfadeeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.crossfadeeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.crossfadeeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.crossfadeeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.crossfadeeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.crossfadeeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.crossfadeeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.crossfadeeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.crossfadeeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.crossfadeeffect.crossfade)
    public var crossFade : Float {
        get { try! _default.get_CrossFade() }
        set { try! _default.put_CrossFade(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.crossfadeeffect.source1)
    public var source1 : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source1() }
        set { try! _default.put_Source1(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.crossfadeeffect.source2)
    public var source2 : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source2() }
        set { try! _default.put_Source2(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.directionalblureffect)
public final class DirectionalBlurEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IDirectionalBlurEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.DirectionalBlurEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.directionalblureffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.directionalblureffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.directionalblureffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.directionalblureffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.directionalblureffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.directionalblureffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.directionalblureffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.directionalblureffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.directionalblureffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.directionalblureffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.directionalblureffect.angle)
    public var angle : Float {
        get { try! _default.get_Angle() }
        set { try! _default.put_Angle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.directionalblureffect.bluramount)
    public var blurAmount : Float {
        get { try! _default.get_BlurAmount() }
        set { try! _default.put_BlurAmount(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.directionalblureffect.bordermode)
    public var borderMode : EffectBorderMode {
        get { try! _default.get_BorderMode() }
        set { try! _default.put_BorderMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.directionalblureffect.optimization)
    public var optimization : EffectOptimization {
        get { try! _default.get_Optimization() }
        set { try! _default.put_Optimization(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.directionalblureffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.discretetransfereffect)
public final class DiscreteTransferEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IDiscreteTransferEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.DiscreteTransferEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.discretetransfereffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.discretetransfereffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.discretetransfereffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.discretetransfereffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.discretetransfereffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.discretetransfereffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.discretetransfereffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.discretetransfereffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.discretetransfereffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.discretetransfereffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.discretetransfereffect.alphadisable)
    public var alphaDisable : Bool {
        get { try! _default.get_AlphaDisable() }
        set { try! _default.put_AlphaDisable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.discretetransfereffect.alphatable)
    public var alphaTable : [Float] {
        get { try! _default.get_AlphaTable() }
        set { try! _default.put_AlphaTable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.discretetransfereffect.bluedisable)
    public var blueDisable : Bool {
        get { try! _default.get_BlueDisable() }
        set { try! _default.put_BlueDisable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.discretetransfereffect.bluetable)
    public var blueTable : [Float] {
        get { try! _default.get_BlueTable() }
        set { try! _default.put_BlueTable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.discretetransfereffect.clampoutput)
    public var clampOutput : Bool {
        get { try! _default.get_ClampOutput() }
        set { try! _default.put_ClampOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.discretetransfereffect.greendisable)
    public var greenDisable : Bool {
        get { try! _default.get_GreenDisable() }
        set { try! _default.put_GreenDisable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.discretetransfereffect.greentable)
    public var greenTable : [Float] {
        get { try! _default.get_GreenTable() }
        set { try! _default.put_GreenTable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.discretetransfereffect.reddisable)
    public var redDisable : Bool {
        get { try! _default.get_RedDisable() }
        set { try! _default.put_RedDisable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.discretetransfereffect.redtable)
    public var redTable : [Float] {
        get { try! _default.get_RedTable() }
        set { try! _default.put_RedTable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.discretetransfereffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.displacementmapeffect)
public final class DisplacementMapEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IDisplacementMapEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.DisplacementMapEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.displacementmapeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.displacementmapeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.displacementmapeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.displacementmapeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.displacementmapeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.displacementmapeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.displacementmapeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.displacementmapeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.displacementmapeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.displacementmapeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.displacementmapeffect.amount)
    public var amount : Float {
        get { try! _default.get_Amount() }
        set { try! _default.put_Amount(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.displacementmapeffect.displacement)
    public var displacement : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Displacement() }
        set { try! _default.put_Displacement(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.displacementmapeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.displacementmapeffect.xchannelselect)
    public var xchannelSelect : EffectChannelSelect {
        get { try! _default.get_XChannelSelect() }
        set { try! _default.put_XChannelSelect(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.displacementmapeffect.ychannelselect)
    public var ychannelSelect : EffectChannelSelect {
        get { try! _default.get_YChannelSelect() }
        set { try! _default.put_YChannelSelect(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantdiffuseeffect)
public final class DistantDiffuseEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IDistantDiffuseEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.DistantDiffuseEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantdiffuseeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantdiffuseeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantdiffuseeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantdiffuseeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantdiffuseeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantdiffuseeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantdiffuseeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantdiffuseeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantdiffuseeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantdiffuseeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantdiffuseeffect.azimuth)
    public var azimuth : Float {
        get { try! _default.get_Azimuth() }
        set { try! _default.put_Azimuth(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantdiffuseeffect.diffuseamount)
    public var diffuseAmount : Float {
        get { try! _default.get_DiffuseAmount() }
        set { try! _default.put_DiffuseAmount(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantdiffuseeffect.elevation)
    public var elevation : Float {
        get { try! _default.get_Elevation() }
        set { try! _default.put_Elevation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantdiffuseeffect.heightmapinterpolationmode)
    public var heightMapInterpolationMode : Win2D.CanvasImageInterpolation {
        get { try! _default.get_HeightMapInterpolationMode() }
        set { try! _default.put_HeightMapInterpolationMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantdiffuseeffect.heightmapkernelsize)
    public var heightMapKernelSize : WindowsFoundation.Vector2 {
        get { try! _default.get_HeightMapKernelSize() }
        set { try! _default.put_HeightMapKernelSize(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantdiffuseeffect.heightmapscale)
    public var heightMapScale : Float {
        get { try! _default.get_HeightMapScale() }
        set { try! _default.put_HeightMapScale(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantdiffuseeffect.lightcolor)
    public var lightColor : UWP.Color {
        get { try! _default.get_LightColor() }
        set { try! _default.put_LightColor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantdiffuseeffect.lightcolorhdr)
    public var lightColorHdr : WindowsFoundation.Vector4 {
        get { try! _default.get_LightColorHdr() }
        set { try! _default.put_LightColorHdr(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantdiffuseeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantspeculareffect)
public final class DistantSpecularEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IDistantSpecularEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.DistantSpecularEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantspeculareffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantspeculareffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantspeculareffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantspeculareffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantspeculareffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantspeculareffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantspeculareffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantspeculareffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantspeculareffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantspeculareffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantspeculareffect.azimuth)
    public var azimuth : Float {
        get { try! _default.get_Azimuth() }
        set { try! _default.put_Azimuth(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantspeculareffect.elevation)
    public var elevation : Float {
        get { try! _default.get_Elevation() }
        set { try! _default.put_Elevation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantspeculareffect.heightmapinterpolationmode)
    public var heightMapInterpolationMode : Win2D.CanvasImageInterpolation {
        get { try! _default.get_HeightMapInterpolationMode() }
        set { try! _default.put_HeightMapInterpolationMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantspeculareffect.heightmapkernelsize)
    public var heightMapKernelSize : WindowsFoundation.Vector2 {
        get { try! _default.get_HeightMapKernelSize() }
        set { try! _default.put_HeightMapKernelSize(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantspeculareffect.heightmapscale)
    public var heightMapScale : Float {
        get { try! _default.get_HeightMapScale() }
        set { try! _default.put_HeightMapScale(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantspeculareffect.lightcolor)
    public var lightColor : UWP.Color {
        get { try! _default.get_LightColor() }
        set { try! _default.put_LightColor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantspeculareffect.lightcolorhdr)
    public var lightColorHdr : WindowsFoundation.Vector4 {
        get { try! _default.get_LightColorHdr() }
        set { try! _default.put_LightColorHdr(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantspeculareffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantspeculareffect.specularamount)
    public var specularAmount : Float {
        get { try! _default.get_SpecularAmount() }
        set { try! _default.put_SpecularAmount(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.distantspeculareffect.specularexponent)
    public var specularExponent : Float {
        get { try! _default.get_SpecularExponent() }
        set { try! _default.put_SpecularExponent(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.dpicompensationeffect)
public final class DpiCompensationEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IDpiCompensationEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.DpiCompensationEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.dpicompensationeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.dpicompensationeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.dpicompensationeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.dpicompensationeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.dpicompensationeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.dpicompensationeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.dpicompensationeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.dpicompensationeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.dpicompensationeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.dpicompensationeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.dpicompensationeffect.bordermode)
    public var borderMode : EffectBorderMode {
        get { try! _default.get_BorderMode() }
        set { try! _default.put_BorderMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.dpicompensationeffect.interpolationmode)
    public var interpolationMode : Win2D.CanvasImageInterpolation {
        get { try! _default.get_InterpolationMode() }
        set { try! _default.put_InterpolationMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.dpicompensationeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.dpicompensationeffect.sourcedpi)
    public var sourceDpi : WindowsFoundation.Vector2 {
        get { try! _default.get_SourceDpi() }
        set { try! _default.put_SourceDpi(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.edgedetectioneffect)
public final class EdgeDetectionEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IEdgeDetectionEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.EdgeDetectionEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.edgedetectioneffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.edgedetectioneffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.edgedetectioneffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.edgedetectioneffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.edgedetectioneffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.edgedetectioneffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.edgedetectioneffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.edgedetectioneffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.edgedetectioneffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.edgedetectioneffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.edgedetectioneffect.alphamode)
    public var alphaMode : Win2D.CanvasAlphaMode {
        get { try! _default.get_AlphaMode() }
        set { try! _default.put_AlphaMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.edgedetectioneffect.amount)
    public var amount : Float {
        get { try! _default.get_Amount() }
        set { try! _default.put_Amount(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.edgedetectioneffect.bluramount)
    public var blurAmount : Float {
        get { try! _default.get_BlurAmount() }
        set { try! _default.put_BlurAmount(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.edgedetectioneffect.mode)
    public var mode : EdgeDetectionEffectMode {
        get { try! _default.get_Mode() }
        set { try! _default.put_Mode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.edgedetectioneffect.overlayedges)
    public var overlayEdges : Bool {
        get { try! _default.get_OverlayEdges() }
        set { try! _default.put_OverlayEdges(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.edgedetectioneffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.effecttransfertable3d)
public final class EffectTransferTable3D : WinRTClass, WindowsFoundation.IClosable {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IEffectTransferTable3D
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _IEffectTransferTable3DStatics: __ABI_Microsoft_Graphics_Canvas_Effects.IEffectTransferTable3DStatics = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.EffectTransferTable3D")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.effecttransfertable3d.createfromcolors)
    public static func createFromColors(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ colors: [UWP.Color], _ sizeB: Int32, _ sizeG: Int32, _ sizeR: Int32) throws -> EffectTransferTable3D! {
        return try _IEffectTransferTable3DStatics.CreateFromColors(resourceCreator, colors, sizeB, sizeG, sizeR)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.effecttransfertable3d.createfrombytes)
    public static func createFromBytes(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ bytes: [UInt8], _ sizeB: Int32, _ sizeG: Int32, _ sizeR: Int32, _ format: UWP.DirectXPixelFormat) throws -> EffectTransferTable3D! {
        return try _IEffectTransferTable3DStatics.CreateFromBytes(resourceCreator, bytes, sizeB, sizeG, sizeR, format)
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.effecttransfertable3d.close)
    public func close() throws {
        try _IClosable.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.effecttransfertable3d.device)
    public var device : Win2D.CanvasDevice! {
        get { try! _default.get_Device() }
    }

    deinit {
        _IClosable = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.embosseffect)
public final class EmbossEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IEmbossEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.EmbossEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.embosseffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.embosseffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.embosseffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.embosseffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.embosseffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.embosseffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.embosseffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.embosseffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.embosseffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.embosseffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.embosseffect.amount)
    public var amount : Float {
        get { try! _default.get_Amount() }
        set { try! _default.put_Amount(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.embosseffect.angle)
    public var angle : Float {
        get { try! _default.get_Angle() }
        set { try! _default.put_Angle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.embosseffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.exposureeffect)
public final class ExposureEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IExposureEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.ExposureEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.exposureeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.exposureeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.exposureeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.exposureeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.exposureeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.exposureeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.exposureeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.exposureeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.exposureeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.exposureeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.exposureeffect.exposure)
    public var exposure : Float {
        get { try! _default.get_Exposure() }
        set { try! _default.put_Exposure(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.exposureeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect)
public final class GammaTransferEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IGammaTransferEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.GammaTransferEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.alphaamplitude)
    public var alphaAmplitude : Float {
        get { try! _default.get_AlphaAmplitude() }
        set { try! _default.put_AlphaAmplitude(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.alphadisable)
    public var alphaDisable : Bool {
        get { try! _default.get_AlphaDisable() }
        set { try! _default.put_AlphaDisable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.alphaexponent)
    public var alphaExponent : Float {
        get { try! _default.get_AlphaExponent() }
        set { try! _default.put_AlphaExponent(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.alphaoffset)
    public var alphaOffset : Float {
        get { try! _default.get_AlphaOffset() }
        set { try! _default.put_AlphaOffset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.blueamplitude)
    public var blueAmplitude : Float {
        get { try! _default.get_BlueAmplitude() }
        set { try! _default.put_BlueAmplitude(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.bluedisable)
    public var blueDisable : Bool {
        get { try! _default.get_BlueDisable() }
        set { try! _default.put_BlueDisable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.blueexponent)
    public var blueExponent : Float {
        get { try! _default.get_BlueExponent() }
        set { try! _default.put_BlueExponent(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.blueoffset)
    public var blueOffset : Float {
        get { try! _default.get_BlueOffset() }
        set { try! _default.put_BlueOffset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.clampoutput)
    public var clampOutput : Bool {
        get { try! _default.get_ClampOutput() }
        set { try! _default.put_ClampOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.greenamplitude)
    public var greenAmplitude : Float {
        get { try! _default.get_GreenAmplitude() }
        set { try! _default.put_GreenAmplitude(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.greendisable)
    public var greenDisable : Bool {
        get { try! _default.get_GreenDisable() }
        set { try! _default.put_GreenDisable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.greenexponent)
    public var greenExponent : Float {
        get { try! _default.get_GreenExponent() }
        set { try! _default.put_GreenExponent(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.greenoffset)
    public var greenOffset : Float {
        get { try! _default.get_GreenOffset() }
        set { try! _default.put_GreenOffset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.redamplitude)
    public var redAmplitude : Float {
        get { try! _default.get_RedAmplitude() }
        set { try! _default.put_RedAmplitude(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.reddisable)
    public var redDisable : Bool {
        get { try! _default.get_RedDisable() }
        set { try! _default.put_RedDisable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.redexponent)
    public var redExponent : Float {
        get { try! _default.get_RedExponent() }
        set { try! _default.put_RedExponent(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.redoffset)
    public var redOffset : Float {
        get { try! _default.get_RedOffset() }
        set { try! _default.put_RedOffset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gammatransfereffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gaussianblureffect)
public final class GaussianBlurEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IGaussianBlurEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.GaussianBlurEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gaussianblureffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gaussianblureffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gaussianblureffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gaussianblureffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gaussianblureffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gaussianblureffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gaussianblureffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gaussianblureffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gaussianblureffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gaussianblureffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gaussianblureffect.bluramount)
    public var blurAmount : Float {
        get { try! _default.get_BlurAmount() }
        set { try! _default.put_BlurAmount(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gaussianblureffect.bordermode)
    public var borderMode : EffectBorderMode {
        get { try! _default.get_BorderMode() }
        set { try! _default.put_BorderMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gaussianblureffect.optimization)
    public var optimization : EffectOptimization {
        get { try! _default.get_Optimization() }
        set { try! _default.put_Optimization(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.gaussianblureffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.grayscaleeffect)
public final class GrayscaleEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IGrayscaleEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.GrayscaleEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.grayscaleeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.grayscaleeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.grayscaleeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.grayscaleeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.grayscaleeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.grayscaleeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.grayscaleeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.grayscaleeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.grayscaleeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.grayscaleeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.grayscaleeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.highlightsandshadowseffect)
public final class HighlightsAndShadowsEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IHighlightsAndShadowsEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.HighlightsAndShadowsEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.highlightsandshadowseffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.highlightsandshadowseffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.highlightsandshadowseffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.highlightsandshadowseffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.highlightsandshadowseffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.highlightsandshadowseffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.highlightsandshadowseffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.highlightsandshadowseffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.highlightsandshadowseffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.highlightsandshadowseffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.highlightsandshadowseffect.clarity)
    public var clarity : Float {
        get { try! _default.get_Clarity() }
        set { try! _default.put_Clarity(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.highlightsandshadowseffect.highlights)
    public var highlights : Float {
        get { try! _default.get_Highlights() }
        set { try! _default.put_Highlights(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.highlightsandshadowseffect.maskbluramount)
    public var maskBlurAmount : Float {
        get { try! _default.get_MaskBlurAmount() }
        set { try! _default.put_MaskBlurAmount(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.highlightsandshadowseffect.shadows)
    public var shadows : Float {
        get { try! _default.get_Shadows() }
        set { try! _default.put_Shadows(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.highlightsandshadowseffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.highlightsandshadowseffect.sourceislineargamma)
    public var sourceIsLinearGamma : Bool {
        get { try! _default.get_SourceIsLinearGamma() }
        set { try! _default.put_SourceIsLinearGamma(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.huerotationeffect)
public final class HueRotationEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IHueRotationEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.HueRotationEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.huerotationeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.huerotationeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.huerotationeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.huerotationeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.huerotationeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.huerotationeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.huerotationeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.huerotationeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.huerotationeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.huerotationeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.huerotationeffect.angle)
    public var angle : Float {
        get { try! _default.get_Angle() }
        set { try! _default.put_Angle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.huerotationeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.huetorgbeffect)
public final class HueToRgbEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IHueToRgbEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.HueToRgbEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.huetorgbeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.huetorgbeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.huetorgbeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.huetorgbeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.huetorgbeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.huetorgbeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.huetorgbeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.huetorgbeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.huetorgbeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.huetorgbeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.huetorgbeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.huetorgbeffect.sourcecolorspace)
    public var sourceColorSpace : EffectHueColorSpace {
        get { try! _default.get_SourceColorSpace() }
        set { try! _default.put_SourceColorSpace(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.inverteffect)
public final class InvertEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IInvertEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.InvertEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.inverteffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.inverteffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.inverteffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.inverteffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.inverteffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.inverteffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.inverteffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.inverteffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.inverteffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.inverteffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.inverteffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.lineartransfereffect)
public final class LinearTransferEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.ILinearTransferEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.LinearTransferEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.lineartransfereffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.lineartransfereffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.lineartransfereffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.lineartransfereffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.lineartransfereffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.lineartransfereffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.lineartransfereffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.lineartransfereffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.lineartransfereffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.lineartransfereffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.lineartransfereffect.alphadisable)
    public var alphaDisable : Bool {
        get { try! _default.get_AlphaDisable() }
        set { try! _default.put_AlphaDisable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.lineartransfereffect.alphaoffset)
    public var alphaOffset : Float {
        get { try! _default.get_AlphaOffset() }
        set { try! _default.put_AlphaOffset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.lineartransfereffect.alphaslope)
    public var alphaSlope : Float {
        get { try! _default.get_AlphaSlope() }
        set { try! _default.put_AlphaSlope(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.lineartransfereffect.bluedisable)
    public var blueDisable : Bool {
        get { try! _default.get_BlueDisable() }
        set { try! _default.put_BlueDisable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.lineartransfereffect.blueoffset)
    public var blueOffset : Float {
        get { try! _default.get_BlueOffset() }
        set { try! _default.put_BlueOffset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.lineartransfereffect.blueslope)
    public var blueSlope : Float {
        get { try! _default.get_BlueSlope() }
        set { try! _default.put_BlueSlope(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.lineartransfereffect.clampoutput)
    public var clampOutput : Bool {
        get { try! _default.get_ClampOutput() }
        set { try! _default.put_ClampOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.lineartransfereffect.greendisable)
    public var greenDisable : Bool {
        get { try! _default.get_GreenDisable() }
        set { try! _default.put_GreenDisable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.lineartransfereffect.greenoffset)
    public var greenOffset : Float {
        get { try! _default.get_GreenOffset() }
        set { try! _default.put_GreenOffset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.lineartransfereffect.greenslope)
    public var greenSlope : Float {
        get { try! _default.get_GreenSlope() }
        set { try! _default.put_GreenSlope(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.lineartransfereffect.reddisable)
    public var redDisable : Bool {
        get { try! _default.get_RedDisable() }
        set { try! _default.put_RedDisable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.lineartransfereffect.redoffset)
    public var redOffset : Float {
        get { try! _default.get_RedOffset() }
        set { try! _default.put_RedOffset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.lineartransfereffect.redslope)
    public var redSlope : Float {
        get { try! _default.get_RedSlope() }
        set { try! _default.put_RedSlope(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.lineartransfereffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.luminancetoalphaeffect)
public final class LuminanceToAlphaEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.ILuminanceToAlphaEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.LuminanceToAlphaEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.luminancetoalphaeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.luminancetoalphaeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.luminancetoalphaeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.luminancetoalphaeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.luminancetoalphaeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.luminancetoalphaeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.luminancetoalphaeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.luminancetoalphaeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.luminancetoalphaeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.luminancetoalphaeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.luminancetoalphaeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.morphologyeffect)
public final class MorphologyEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IMorphologyEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.MorphologyEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.morphologyeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.morphologyeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.morphologyeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.morphologyeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.morphologyeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.morphologyeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.morphologyeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.morphologyeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.morphologyeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.morphologyeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.morphologyeffect.height)
    public var height : Int32 {
        get { try! _default.get_Height() }
        set { try! _default.put_Height(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.morphologyeffect.mode)
    public var mode : MorphologyEffectMode {
        get { try! _default.get_Mode() }
        set { try! _default.put_Mode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.morphologyeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.morphologyeffect.width)
    public var width : Int32 {
        get { try! _default.get_Width() }
        set { try! _default.put_Width(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.opacityeffect)
public final class OpacityEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IOpacityEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.OpacityEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private static let _IOpacityEffectStatics: __ABI_Microsoft_Graphics_Canvas_Effects.IOpacityEffectStatics = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.OpacityEffect")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.opacityeffect.issupported)
    public static var isSupported : Bool {
        get { try! _IOpacityEffectStatics.get_IsSupported() }
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.opacityeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.opacityeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.opacityeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.opacityeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.opacityeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.opacityeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.opacityeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.opacityeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.opacityeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.opacityeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.opacityeffect.opacity)
    public var opacity : Float {
        get { try! _default.get_Opacity() }
        set { try! _default.put_Opacity(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.opacityeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.opacitymetadataeffect)
public final class OpacityMetadataEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IOpacityMetadataEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.OpacityMetadataEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.opacitymetadataeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.opacitymetadataeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.opacitymetadataeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.opacitymetadataeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.opacitymetadataeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.opacitymetadataeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.opacitymetadataeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.opacitymetadataeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.opacitymetadataeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.opacitymetadataeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.opacitymetadataeffect.opaquerectangle)
    public var opaqueRectangle : WindowsFoundation.Rect {
        get { try! _default.get_OpaqueRectangle() }
        set { try! _default.put_OpaqueRectangle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.opacitymetadataeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect)
public final class PixelShaderEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IPixelShaderEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _IPixelShaderEffectFactory: __ABI_Microsoft_Graphics_Canvas_Effects.IPixelShaderEffectFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.PixelShaderEffect")
    public init(_ shaderCode: [UInt8]) {
        super.init(try! Self._IPixelShaderEffectFactory.Create(shaderCode))
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.issupported)
    public func isSupported(_ device: Win2D.CanvasDevice!) throws -> Bool {
        try _default.IsSupported(device)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.maxsampleroffset)
    public var maxSamplerOffset : Int32 {
        get { try! _default.get_MaxSamplerOffset() }
        set { try! _default.put_MaxSamplerOffset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.properties)
    public var properties : WindowsFoundation.AnyIMap<String, Any?>! {
        get { try! _default.get_Properties() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source1)
    public var source1 : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source1() }
        set { try! _default.put_Source1(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source1bordermode)
    public var source1BorderMode : EffectBorderMode {
        get { try! _default.get_Source1BorderMode() }
        set { try! _default.put_Source1BorderMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source1interpolation)
    public var source1Interpolation : Win2D.CanvasImageInterpolation {
        get { try! _default.get_Source1Interpolation() }
        set { try! _default.put_Source1Interpolation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source1mapping)
    public var source1Mapping : SamplerCoordinateMapping {
        get { try! _default.get_Source1Mapping() }
        set { try! _default.put_Source1Mapping(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source2)
    public var source2 : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source2() }
        set { try! _default.put_Source2(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source2bordermode)
    public var source2BorderMode : EffectBorderMode {
        get { try! _default.get_Source2BorderMode() }
        set { try! _default.put_Source2BorderMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source2interpolation)
    public var source2Interpolation : Win2D.CanvasImageInterpolation {
        get { try! _default.get_Source2Interpolation() }
        set { try! _default.put_Source2Interpolation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source2mapping)
    public var source2Mapping : SamplerCoordinateMapping {
        get { try! _default.get_Source2Mapping() }
        set { try! _default.put_Source2Mapping(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source3)
    public var source3 : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source3() }
        set { try! _default.put_Source3(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source3bordermode)
    public var source3BorderMode : EffectBorderMode {
        get { try! _default.get_Source3BorderMode() }
        set { try! _default.put_Source3BorderMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source3interpolation)
    public var source3Interpolation : Win2D.CanvasImageInterpolation {
        get { try! _default.get_Source3Interpolation() }
        set { try! _default.put_Source3Interpolation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source3mapping)
    public var source3Mapping : SamplerCoordinateMapping {
        get { try! _default.get_Source3Mapping() }
        set { try! _default.put_Source3Mapping(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source4)
    public var source4 : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source4() }
        set { try! _default.put_Source4(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source4bordermode)
    public var source4BorderMode : EffectBorderMode {
        get { try! _default.get_Source4BorderMode() }
        set { try! _default.put_Source4BorderMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source4interpolation)
    public var source4Interpolation : Win2D.CanvasImageInterpolation {
        get { try! _default.get_Source4Interpolation() }
        set { try! _default.put_Source4Interpolation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source4mapping)
    public var source4Mapping : SamplerCoordinateMapping {
        get { try! _default.get_Source4Mapping() }
        set { try! _default.put_Source4Mapping(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source5)
    public var source5 : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source5() }
        set { try! _default.put_Source5(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source5bordermode)
    public var source5BorderMode : EffectBorderMode {
        get { try! _default.get_Source5BorderMode() }
        set { try! _default.put_Source5BorderMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source5interpolation)
    public var source5Interpolation : Win2D.CanvasImageInterpolation {
        get { try! _default.get_Source5Interpolation() }
        set { try! _default.put_Source5Interpolation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source5mapping)
    public var source5Mapping : SamplerCoordinateMapping {
        get { try! _default.get_Source5Mapping() }
        set { try! _default.put_Source5Mapping(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source6)
    public var source6 : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source6() }
        set { try! _default.put_Source6(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source6bordermode)
    public var source6BorderMode : EffectBorderMode {
        get { try! _default.get_Source6BorderMode() }
        set { try! _default.put_Source6BorderMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source6interpolation)
    public var source6Interpolation : Win2D.CanvasImageInterpolation {
        get { try! _default.get_Source6Interpolation() }
        set { try! _default.put_Source6Interpolation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source6mapping)
    public var source6Mapping : SamplerCoordinateMapping {
        get { try! _default.get_Source6Mapping() }
        set { try! _default.put_Source6Mapping(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source7)
    public var source7 : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source7() }
        set { try! _default.put_Source7(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source7bordermode)
    public var source7BorderMode : EffectBorderMode {
        get { try! _default.get_Source7BorderMode() }
        set { try! _default.put_Source7BorderMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source7interpolation)
    public var source7Interpolation : Win2D.CanvasImageInterpolation {
        get { try! _default.get_Source7Interpolation() }
        set { try! _default.put_Source7Interpolation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source7mapping)
    public var source7Mapping : SamplerCoordinateMapping {
        get { try! _default.get_Source7Mapping() }
        set { try! _default.put_Source7Mapping(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source8)
    public var source8 : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source8() }
        set { try! _default.put_Source8(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source8bordermode)
    public var source8BorderMode : EffectBorderMode {
        get { try! _default.get_Source8BorderMode() }
        set { try! _default.put_Source8BorderMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source8interpolation)
    public var source8Interpolation : Win2D.CanvasImageInterpolation {
        get { try! _default.get_Source8Interpolation() }
        set { try! _default.put_Source8Interpolation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pixelshadereffect.source8mapping)
    public var source8Mapping : SamplerCoordinateMapping {
        get { try! _default.get_Source8Mapping() }
        set { try! _default.put_Source8Mapping(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointdiffuseeffect)
public final class PointDiffuseEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IPointDiffuseEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.PointDiffuseEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointdiffuseeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointdiffuseeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointdiffuseeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointdiffuseeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointdiffuseeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointdiffuseeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointdiffuseeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointdiffuseeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointdiffuseeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointdiffuseeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointdiffuseeffect.diffuseamount)
    public var diffuseAmount : Float {
        get { try! _default.get_DiffuseAmount() }
        set { try! _default.put_DiffuseAmount(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointdiffuseeffect.heightmapinterpolationmode)
    public var heightMapInterpolationMode : Win2D.CanvasImageInterpolation {
        get { try! _default.get_HeightMapInterpolationMode() }
        set { try! _default.put_HeightMapInterpolationMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointdiffuseeffect.heightmapkernelsize)
    public var heightMapKernelSize : WindowsFoundation.Vector2 {
        get { try! _default.get_HeightMapKernelSize() }
        set { try! _default.put_HeightMapKernelSize(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointdiffuseeffect.heightmapscale)
    public var heightMapScale : Float {
        get { try! _default.get_HeightMapScale() }
        set { try! _default.put_HeightMapScale(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointdiffuseeffect.lightcolor)
    public var lightColor : UWP.Color {
        get { try! _default.get_LightColor() }
        set { try! _default.put_LightColor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointdiffuseeffect.lightcolorhdr)
    public var lightColorHdr : WindowsFoundation.Vector4 {
        get { try! _default.get_LightColorHdr() }
        set { try! _default.put_LightColorHdr(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointdiffuseeffect.lightposition)
    public var lightPosition : WindowsFoundation.Vector3 {
        get { try! _default.get_LightPosition() }
        set { try! _default.put_LightPosition(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointdiffuseeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointspeculareffect)
public final class PointSpecularEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IPointSpecularEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.PointSpecularEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointspeculareffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointspeculareffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointspeculareffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointspeculareffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointspeculareffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointspeculareffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointspeculareffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointspeculareffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointspeculareffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointspeculareffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointspeculareffect.heightmapinterpolationmode)
    public var heightMapInterpolationMode : Win2D.CanvasImageInterpolation {
        get { try! _default.get_HeightMapInterpolationMode() }
        set { try! _default.put_HeightMapInterpolationMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointspeculareffect.heightmapkernelsize)
    public var heightMapKernelSize : WindowsFoundation.Vector2 {
        get { try! _default.get_HeightMapKernelSize() }
        set { try! _default.put_HeightMapKernelSize(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointspeculareffect.heightmapscale)
    public var heightMapScale : Float {
        get { try! _default.get_HeightMapScale() }
        set { try! _default.put_HeightMapScale(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointspeculareffect.lightcolor)
    public var lightColor : UWP.Color {
        get { try! _default.get_LightColor() }
        set { try! _default.put_LightColor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointspeculareffect.lightcolorhdr)
    public var lightColorHdr : WindowsFoundation.Vector4 {
        get { try! _default.get_LightColorHdr() }
        set { try! _default.put_LightColorHdr(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointspeculareffect.lightposition)
    public var lightPosition : WindowsFoundation.Vector3 {
        get { try! _default.get_LightPosition() }
        set { try! _default.put_LightPosition(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointspeculareffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointspeculareffect.specularamount)
    public var specularAmount : Float {
        get { try! _default.get_SpecularAmount() }
        set { try! _default.put_SpecularAmount(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.pointspeculareffect.specularexponent)
    public var specularExponent : Float {
        get { try! _default.get_SpecularExponent() }
        set { try! _default.put_SpecularExponent(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.posterizeeffect)
public final class PosterizeEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IPosterizeEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.PosterizeEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.posterizeeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.posterizeeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.posterizeeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.posterizeeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.posterizeeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.posterizeeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.posterizeeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.posterizeeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.posterizeeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.posterizeeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.posterizeeffect.bluevaluecount)
    public var blueValueCount : Int32 {
        get { try! _default.get_BlueValueCount() }
        set { try! _default.put_BlueValueCount(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.posterizeeffect.greenvaluecount)
    public var greenValueCount : Int32 {
        get { try! _default.get_GreenValueCount() }
        set { try! _default.put_GreenValueCount(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.posterizeeffect.redvaluecount)
    public var redValueCount : Int32 {
        get { try! _default.get_RedValueCount() }
        set { try! _default.put_RedValueCount(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.posterizeeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.premultiplyeffect)
public final class PremultiplyEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IPremultiplyEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.PremultiplyEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.premultiplyeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.premultiplyeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.premultiplyeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.premultiplyeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.premultiplyeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.premultiplyeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.premultiplyeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.premultiplyeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.premultiplyeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.premultiplyeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.premultiplyeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.rgbtohueeffect)
public final class RgbToHueEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IRgbToHueEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.RgbToHueEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.rgbtohueeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.rgbtohueeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.rgbtohueeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.rgbtohueeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.rgbtohueeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.rgbtohueeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.rgbtohueeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.rgbtohueeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.rgbtohueeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.rgbtohueeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.rgbtohueeffect.outputcolorspace)
    public var outputColorSpace : EffectHueColorSpace {
        get { try! _default.get_OutputColorSpace() }
        set { try! _default.put_OutputColorSpace(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.rgbtohueeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.saturationeffect)
public final class SaturationEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.ISaturationEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.SaturationEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.saturationeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.saturationeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.saturationeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.saturationeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.saturationeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.saturationeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.saturationeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.saturationeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.saturationeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.saturationeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.saturationeffect.saturation)
    public var saturation : Float {
        get { try! _default.get_Saturation() }
        set { try! _default.put_Saturation(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.saturationeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.scaleeffect)
public final class ScaleEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IScaleEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.ScaleEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.scaleeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.scaleeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.scaleeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.scaleeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.scaleeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.scaleeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.scaleeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.scaleeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.scaleeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.scaleeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.scaleeffect.bordermode)
    public var borderMode : EffectBorderMode {
        get { try! _default.get_BorderMode() }
        set { try! _default.put_BorderMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.scaleeffect.centerpoint)
    public var centerPoint : WindowsFoundation.Vector2 {
        get { try! _default.get_CenterPoint() }
        set { try! _default.put_CenterPoint(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.scaleeffect.interpolationmode)
    public var interpolationMode : Win2D.CanvasImageInterpolation {
        get { try! _default.get_InterpolationMode() }
        set { try! _default.put_InterpolationMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.scaleeffect.scale)
    public var scale : WindowsFoundation.Vector2 {
        get { try! _default.get_Scale() }
        set { try! _default.put_Scale(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.scaleeffect.sharpness)
    public var sharpness : Float {
        get { try! _default.get_Sharpness() }
        set { try! _default.put_Sharpness(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.scaleeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sepiaeffect)
public final class SepiaEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.ISepiaEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.SepiaEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sepiaeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sepiaeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sepiaeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sepiaeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sepiaeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sepiaeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sepiaeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sepiaeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sepiaeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sepiaeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sepiaeffect.alphamode)
    public var alphaMode : Win2D.CanvasAlphaMode {
        get { try! _default.get_AlphaMode() }
        set { try! _default.put_AlphaMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sepiaeffect.intensity)
    public var intensity : Float {
        get { try! _default.get_Intensity() }
        set { try! _default.put_Intensity(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sepiaeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.shadoweffect)
public final class ShadowEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IShadowEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.ShadowEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.shadoweffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.shadoweffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.shadoweffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.shadoweffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.shadoweffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.shadoweffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.shadoweffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.shadoweffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.shadoweffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.shadoweffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.shadoweffect.bluramount)
    public var blurAmount : Float {
        get { try! _default.get_BlurAmount() }
        set { try! _default.put_BlurAmount(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.shadoweffect.optimization)
    public var optimization : EffectOptimization {
        get { try! _default.get_Optimization() }
        set { try! _default.put_Optimization(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.shadoweffect.shadowcolor)
    public var shadowColor : UWP.Color {
        get { try! _default.get_ShadowColor() }
        set { try! _default.put_ShadowColor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.shadoweffect.shadowcolorhdr)
    public var shadowColorHdr : WindowsFoundation.Vector4 {
        get { try! _default.get_ShadowColorHdr() }
        set { try! _default.put_ShadowColorHdr(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.shadoweffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sharpeneffect)
public final class SharpenEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.ISharpenEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.SharpenEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sharpeneffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sharpeneffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sharpeneffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sharpeneffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sharpeneffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sharpeneffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sharpeneffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sharpeneffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sharpeneffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sharpeneffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sharpeneffect.amount)
    public var amount : Float {
        get { try! _default.get_Amount() }
        set { try! _default.put_Amount(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sharpeneffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.sharpeneffect.threshold)
    public var threshold : Float {
        get { try! _default.get_Threshold() }
        set { try! _default.put_Threshold(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotdiffuseeffect)
public final class SpotDiffuseEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.ISpotDiffuseEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.SpotDiffuseEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotdiffuseeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotdiffuseeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotdiffuseeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotdiffuseeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotdiffuseeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotdiffuseeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotdiffuseeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotdiffuseeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotdiffuseeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotdiffuseeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotdiffuseeffect.diffuseamount)
    public var diffuseAmount : Float {
        get { try! _default.get_DiffuseAmount() }
        set { try! _default.put_DiffuseAmount(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotdiffuseeffect.focus)
    public var focus : Float {
        get { try! _default.get_Focus() }
        set { try! _default.put_Focus(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotdiffuseeffect.heightmapinterpolationmode)
    public var heightMapInterpolationMode : Win2D.CanvasImageInterpolation {
        get { try! _default.get_HeightMapInterpolationMode() }
        set { try! _default.put_HeightMapInterpolationMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotdiffuseeffect.heightmapkernelsize)
    public var heightMapKernelSize : WindowsFoundation.Vector2 {
        get { try! _default.get_HeightMapKernelSize() }
        set { try! _default.put_HeightMapKernelSize(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotdiffuseeffect.heightmapscale)
    public var heightMapScale : Float {
        get { try! _default.get_HeightMapScale() }
        set { try! _default.put_HeightMapScale(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotdiffuseeffect.lightcolor)
    public var lightColor : UWP.Color {
        get { try! _default.get_LightColor() }
        set { try! _default.put_LightColor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotdiffuseeffect.lightcolorhdr)
    public var lightColorHdr : WindowsFoundation.Vector4 {
        get { try! _default.get_LightColorHdr() }
        set { try! _default.put_LightColorHdr(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotdiffuseeffect.lightposition)
    public var lightPosition : WindowsFoundation.Vector3 {
        get { try! _default.get_LightPosition() }
        set { try! _default.put_LightPosition(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotdiffuseeffect.lighttarget)
    public var lightTarget : WindowsFoundation.Vector3 {
        get { try! _default.get_LightTarget() }
        set { try! _default.put_LightTarget(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotdiffuseeffect.limitingconeangle)
    public var limitingConeAngle : Float {
        get { try! _default.get_LimitingConeAngle() }
        set { try! _default.put_LimitingConeAngle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotdiffuseeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotspeculareffect)
public final class SpotSpecularEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.ISpotSpecularEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.SpotSpecularEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotspeculareffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotspeculareffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotspeculareffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotspeculareffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotspeculareffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotspeculareffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotspeculareffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotspeculareffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotspeculareffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotspeculareffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotspeculareffect.focus)
    public var focus : Float {
        get { try! _default.get_Focus() }
        set { try! _default.put_Focus(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotspeculareffect.heightmapinterpolationmode)
    public var heightMapInterpolationMode : Win2D.CanvasImageInterpolation {
        get { try! _default.get_HeightMapInterpolationMode() }
        set { try! _default.put_HeightMapInterpolationMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotspeculareffect.heightmapkernelsize)
    public var heightMapKernelSize : WindowsFoundation.Vector2 {
        get { try! _default.get_HeightMapKernelSize() }
        set { try! _default.put_HeightMapKernelSize(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotspeculareffect.heightmapscale)
    public var heightMapScale : Float {
        get { try! _default.get_HeightMapScale() }
        set { try! _default.put_HeightMapScale(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotspeculareffect.lightcolor)
    public var lightColor : UWP.Color {
        get { try! _default.get_LightColor() }
        set { try! _default.put_LightColor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotspeculareffect.lightcolorhdr)
    public var lightColorHdr : WindowsFoundation.Vector4 {
        get { try! _default.get_LightColorHdr() }
        set { try! _default.put_LightColorHdr(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotspeculareffect.lightposition)
    public var lightPosition : WindowsFoundation.Vector3 {
        get { try! _default.get_LightPosition() }
        set { try! _default.put_LightPosition(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotspeculareffect.lighttarget)
    public var lightTarget : WindowsFoundation.Vector3 {
        get { try! _default.get_LightTarget() }
        set { try! _default.put_LightTarget(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotspeculareffect.limitingconeangle)
    public var limitingConeAngle : Float {
        get { try! _default.get_LimitingConeAngle() }
        set { try! _default.put_LimitingConeAngle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotspeculareffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotspeculareffect.specularamount)
    public var specularAmount : Float {
        get { try! _default.get_SpecularAmount() }
        set { try! _default.put_SpecularAmount(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.spotspeculareffect.specularexponent)
    public var specularExponent : Float {
        get { try! _default.get_SpecularExponent() }
        set { try! _default.put_SpecularExponent(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.straighteneffect)
public final class StraightenEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IStraightenEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.StraightenEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.straighteneffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.straighteneffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.straighteneffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.straighteneffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.straighteneffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.straighteneffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.straighteneffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.straighteneffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.straighteneffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.straighteneffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.straighteneffect.angle)
    public var angle : Float {
        get { try! _default.get_Angle() }
        set { try! _default.put_Angle(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.straighteneffect.interpolationmode)
    public var interpolationMode : Win2D.CanvasImageInterpolation {
        get { try! _default.get_InterpolationMode() }
        set { try! _default.put_InterpolationMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.straighteneffect.maintainsize)
    public var maintainSize : Bool {
        get { try! _default.get_MaintainSize() }
        set { try! _default.put_MaintainSize(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.straighteneffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfer3deffect)
public final class TableTransfer3DEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.ITableTransfer3DEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.TableTransfer3DEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfer3deffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfer3deffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfer3deffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfer3deffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfer3deffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfer3deffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfer3deffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfer3deffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfer3deffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfer3deffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfer3deffect.alphamode)
    public var alphaMode : Win2D.CanvasAlphaMode {
        get { try! _default.get_AlphaMode() }
        set { try! _default.put_AlphaMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfer3deffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfer3deffect.table)
    public var table : EffectTransferTable3D! {
        get { try! _default.get_Table() }
        set { try! _default.put_Table(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfereffect)
public final class TableTransferEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.ITableTransferEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.TableTransferEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfereffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfereffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfereffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfereffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfereffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfereffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfereffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfereffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfereffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfereffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfereffect.alphadisable)
    public var alphaDisable : Bool {
        get { try! _default.get_AlphaDisable() }
        set { try! _default.put_AlphaDisable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfereffect.alphatable)
    public var alphaTable : [Float] {
        get { try! _default.get_AlphaTable() }
        set { try! _default.put_AlphaTable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfereffect.bluedisable)
    public var blueDisable : Bool {
        get { try! _default.get_BlueDisable() }
        set { try! _default.put_BlueDisable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfereffect.bluetable)
    public var blueTable : [Float] {
        get { try! _default.get_BlueTable() }
        set { try! _default.put_BlueTable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfereffect.clampoutput)
    public var clampOutput : Bool {
        get { try! _default.get_ClampOutput() }
        set { try! _default.put_ClampOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfereffect.greendisable)
    public var greenDisable : Bool {
        get { try! _default.get_GreenDisable() }
        set { try! _default.put_GreenDisable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfereffect.greentable)
    public var greenTable : [Float] {
        get { try! _default.get_GreenTable() }
        set { try! _default.put_GreenTable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfereffect.reddisable)
    public var redDisable : Bool {
        get { try! _default.get_RedDisable() }
        set { try! _default.put_RedDisable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfereffect.redtable)
    public var redTable : [Float] {
        get { try! _default.get_RedTable() }
        set { try! _default.put_RedTable(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tabletransfereffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.temperatureandtinteffect)
public final class TemperatureAndTintEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.ITemperatureAndTintEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.TemperatureAndTintEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.temperatureandtinteffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.temperatureandtinteffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.temperatureandtinteffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.temperatureandtinteffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.temperatureandtinteffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.temperatureandtinteffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.temperatureandtinteffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.temperatureandtinteffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.temperatureandtinteffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.temperatureandtinteffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.temperatureandtinteffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.temperatureandtinteffect.temperature)
    public var temperature : Float {
        get { try! _default.get_Temperature() }
        set { try! _default.put_Temperature(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.temperatureandtinteffect.tint)
    public var tint : Float {
        get { try! _default.get_Tint() }
        set { try! _default.put_Tint(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tileeffect)
public final class TileEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.ITileEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.TileEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tileeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tileeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tileeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tileeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tileeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tileeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tileeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tileeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tileeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tileeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tileeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tileeffect.sourcerectangle)
    public var sourceRectangle : WindowsFoundation.Rect {
        get { try! _default.get_SourceRectangle() }
        set { try! _default.put_SourceRectangle(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tinteffect)
public final class TintEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.ITintEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.TintEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private static let _ITintEffectStatics: __ABI_Microsoft_Graphics_Canvas_Effects.ITintEffectStatics = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.TintEffect")
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tinteffect.issupported)
    public static var isSupported : Bool {
        get { try! _ITintEffectStatics.get_IsSupported() }
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tinteffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tinteffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tinteffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tinteffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tinteffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tinteffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tinteffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tinteffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tinteffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tinteffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tinteffect.clampoutput)
    public var clampOutput : Bool {
        get { try! _default.get_ClampOutput() }
        set { try! _default.put_ClampOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tinteffect.color)
    public var color : UWP.Color {
        get { try! _default.get_Color() }
        set { try! _default.put_Color(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tinteffect.colorhdr)
    public var colorHdr : WindowsFoundation.Vector4 {
        get { try! _default.get_ColorHdr() }
        set { try! _default.put_ColorHdr(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.tinteffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform2deffect)
public final class Transform2DEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.ITransform2DEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.Transform2DEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform2deffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform2deffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform2deffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform2deffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform2deffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform2deffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform2deffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform2deffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform2deffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform2deffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform2deffect.bordermode)
    public var borderMode : EffectBorderMode {
        get { try! _default.get_BorderMode() }
        set { try! _default.put_BorderMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform2deffect.interpolationmode)
    public var interpolationMode : Win2D.CanvasImageInterpolation {
        get { try! _default.get_InterpolationMode() }
        set { try! _default.put_InterpolationMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform2deffect.sharpness)
    public var sharpness : Float {
        get { try! _default.get_Sharpness() }
        set { try! _default.put_Sharpness(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform2deffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform2deffect.transformmatrix)
    public var transformMatrix : WindowsFoundation.Matrix3x2 {
        get { try! _default.get_TransformMatrix() }
        set { try! _default.put_TransformMatrix(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform3deffect)
public final class Transform3DEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.ITransform3DEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.Transform3DEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform3deffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform3deffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform3deffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform3deffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform3deffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform3deffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform3deffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform3deffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform3deffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform3deffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform3deffect.bordermode)
    public var borderMode : EffectBorderMode {
        get { try! _default.get_BorderMode() }
        set { try! _default.put_BorderMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform3deffect.interpolationmode)
    public var interpolationMode : Win2D.CanvasImageInterpolation {
        get { try! _default.get_InterpolationMode() }
        set { try! _default.put_InterpolationMode(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform3deffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.transform3deffect.transformmatrix)
    public var transformMatrix : WindowsFoundation.Matrix4x4 {
        get { try! _default.get_TransformMatrix() }
        set { try! _default.put_TransformMatrix(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.turbulenceeffect)
public final class TurbulenceEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.ITurbulenceEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.TurbulenceEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.turbulenceeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.turbulenceeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.turbulenceeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.turbulenceeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.turbulenceeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.turbulenceeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.turbulenceeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.turbulenceeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.turbulenceeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.turbulenceeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.turbulenceeffect.frequency)
    public var frequency : WindowsFoundation.Vector2 {
        get { try! _default.get_Frequency() }
        set { try! _default.put_Frequency(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.turbulenceeffect.noise)
    public var noise : TurbulenceEffectNoise {
        get { try! _default.get_Noise() }
        set { try! _default.put_Noise(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.turbulenceeffect.octaves)
    public var octaves : Int32 {
        get { try! _default.get_Octaves() }
        set { try! _default.put_Octaves(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.turbulenceeffect.offset)
    public var offset : WindowsFoundation.Vector2 {
        get { try! _default.get_Offset() }
        set { try! _default.put_Offset(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.turbulenceeffect.seed)
    public var seed : Int32 {
        get { try! _default.get_Seed() }
        set { try! _default.put_Seed(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.turbulenceeffect.size)
    public var size : WindowsFoundation.Vector2 {
        get { try! _default.get_Size() }
        set { try! _default.put_Size(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.turbulenceeffect.tileable)
    public var tileable : Bool {
        get { try! _default.get_Tileable() }
        set { try! _default.put_Tileable(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.unpremultiplyeffect)
public final class UnPremultiplyEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IUnPremultiplyEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.UnPremultiplyEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.unpremultiplyeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.unpremultiplyeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.unpremultiplyeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.unpremultiplyeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.unpremultiplyeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.unpremultiplyeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.unpremultiplyeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.unpremultiplyeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.unpremultiplyeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.unpremultiplyeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.unpremultiplyeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.vignetteeffect)
public final class VignetteEffect : WinRTClass, UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage, ICanvasEffect {
    private typealias SwiftABI = __ABI_Microsoft_Graphics_Canvas_Effects.IVignetteEffect
    private typealias CABI = __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _defaultFactory: WindowsFoundation.IActivationFactory = try! RoGetActivationFactory("Microsoft.Graphics.Canvas.Effects.VignetteEffect")
    override public init() {
        super.init(try! Self._defaultFactory.ActivateInstance())
    }

    private lazy var _IGraphicsEffectSource: __ABI_Windows_Graphics_Effects.IGraphicsEffectSource! = getInterfaceForCaching()
    private lazy var _IGraphicsEffect: __ABI_Windows_Graphics_Effects.IGraphicsEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.vignetteeffect.name)
    public var name : String {
        get { try! _IGraphicsEffect.get_Name() }
        set { try! _IGraphicsEffect.put_Name(newValue) }
    }

    private lazy var _IClosable: __ABI_Windows_Foundation.IClosable! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.vignetteeffect.close)
    public func close() throws {
        try _IClosable.Close()
    }

    private lazy var _ICanvasImage: __ABI_Microsoft_Graphics_Canvas.ICanvasImage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.vignetteeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBounds(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.vignetteeffect.getbounds)
    public func getBounds(_ resourceCreator: Win2D.AnyICanvasResourceCreator!, _ transform: WindowsFoundation.Matrix3x2) throws -> WindowsFoundation.Rect {
        try _ICanvasImage.GetBoundsWithTransform(resourceCreator, transform)
    }

    private lazy var _ICanvasEffect: __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffect! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.vignetteeffect.invalidatesourcerectangle)
    public func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
        try _ICanvasEffect.InvalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.vignetteeffect.getinvalidrectangles)
    public func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetInvalidRectangles(resourceCreator)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.vignetteeffect.getrequiredsourcerectangle)
    public func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
        try _ICanvasEffect.GetRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.vignetteeffect.getrequiredsourcerectangles)
    public func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
        try _ICanvasEffect.GetRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.vignetteeffect.bufferprecision)
    public var bufferPrecision : Win2D.CanvasBufferPrecision? {
        get { try! _ICanvasEffect.get_BufferPrecision() }
        set { try! _ICanvasEffect.put_BufferPrecision(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.vignetteeffect.cacheoutput)
    public var cacheOutput : Bool {
        get { try! _ICanvasEffect.get_CacheOutput() }
        set { try! _ICanvasEffect.put_CacheOutput(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.vignetteeffect.amount)
    public var amount : Float {
        get { try! _default.get_Amount() }
        set { try! _default.put_Amount(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.vignetteeffect.color)
    public var color : UWP.Color {
        get { try! _default.get_Color() }
        set { try! _default.put_Color(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.vignetteeffect.colorhdr)
    public var colorHdr : WindowsFoundation.Vector4 {
        get { try! _default.get_ColorHdr() }
        set { try! _default.put_ColorHdr(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.vignetteeffect.curve)
    public var curve : Float {
        get { try! _default.get_Curve() }
        set { try! _default.put_Curve(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.vignetteeffect.source)
    public var source : UWP.AnyIGraphicsEffectSource! {
        get { try! _default.get_Source() }
        set { try! _default.put_Source(newValue) }
    }

    deinit {
        _IGraphicsEffectSource = nil
        _IGraphicsEffect = nil
        _IClosable = nil
        _ICanvasImage = nil
        _ICanvasEffect = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementsimpleprofile)
public struct ColorManagementSimpleProfile: Hashable, Codable, Sendable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementsimpleprofile.redprimary)
    public var redPrimary: WindowsFoundation.Vector2 = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementsimpleprofile.greenprimary)
    public var greenPrimary: WindowsFoundation.Vector2 = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementsimpleprofile.blueprimary)
    public var bluePrimary: WindowsFoundation.Vector2 = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementsimpleprofile.whitepointxz)
    public var whitePointXZ: WindowsFoundation.Vector2 = .init()
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.colormanagementsimpleprofile.gamma)
    public var gamma: ColorManagementGamma = .init(0)
    public init() {}
    public init(redPrimary: WindowsFoundation.Vector2, greenPrimary: WindowsFoundation.Vector2, bluePrimary: WindowsFoundation.Vector2, whitePointXZ: WindowsFoundation.Vector2, gamma: ColorManagementGamma) {
        self.redPrimary = redPrimary
        self.greenPrimary = greenPrimary
        self.bluePrimary = bluePrimary
        self.whitePointXZ = whitePointXZ
        self.gamma = gamma
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.matrix5x4)
public struct Matrix5x4: Hashable, Codable, Sendable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.matrix5x4.m11)
    public var m11: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.matrix5x4.m12)
    public var m12: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.matrix5x4.m13)
    public var m13: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.matrix5x4.m14)
    public var m14: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.matrix5x4.m21)
    public var m21: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.matrix5x4.m22)
    public var m22: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.matrix5x4.m23)
    public var m23: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.matrix5x4.m24)
    public var m24: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.matrix5x4.m31)
    public var m31: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.matrix5x4.m32)
    public var m32: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.matrix5x4.m33)
    public var m33: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.matrix5x4.m34)
    public var m34: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.matrix5x4.m41)
    public var m41: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.matrix5x4.m42)
    public var m42: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.matrix5x4.m43)
    public var m43: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.matrix5x4.m44)
    public var m44: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.matrix5x4.m51)
    public var m51: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.matrix5x4.m52)
    public var m52: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.matrix5x4.m53)
    public var m53: Float = 0.0
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.matrix5x4.m54)
    public var m54: Float = 0.0
    public init() {}
    public init(m11: Float, m12: Float, m13: Float, m14: Float, m21: Float, m22: Float, m23: Float, m24: Float, m31: Float, m32: Float, m33: Float, m34: Float, m41: Float, m42: Float, m43: Float, m44: Float, m51: Float, m52: Float, m53: Float, m54: Float) {
        self.m11 = m11
        self.m12 = m12
        self.m13 = m13
        self.m14 = m14
        self.m21 = m21
        self.m22 = m22
        self.m23 = m23
        self.m24 = m24
        self.m31 = m31
        self.m32 = m32
        self.m33 = m33
        self.m34 = m34
        self.m41 = m41
        self.m42 = m42
        self.m43 = m43
        self.m44 = m44
        self.m51 = m51
        self.m52 = m52
        self.m53 = m53
        self.m54 = m54
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.icanvaseffect)
public protocol ICanvasEffect : UWP.IGraphicsEffectSource, UWP.IGraphicsEffect, WindowsFoundation.IClosable, Win2D.ICanvasImage {
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.icanvaseffect.invalidatesourcerectangle)
    func invalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.icanvaseffect.getinvalidrectangles)
    func getInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!) throws -> [WindowsFoundation.Rect]
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.icanvaseffect.getrequiredsourcerectangle)
    func getRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: Win2D.AnyICanvasEffect!, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.icanvaseffect.getrequiredsourcerectangles)
    func getRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi!, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [Win2D.AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect]
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.icanvaseffect.bufferprecision)
    var bufferPrecision: Win2D.CanvasBufferPrecision? { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/windows/windows-app-sdk/api/winrt/microsoft.graphics.canvas.effects.icanvaseffect.cacheoutput)
    var cacheOutput: Bool { get set }
}

extension ICanvasEffect {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffectWrapper.IID:
                let wrapper = __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffectWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.IID:
                let wrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Graphics_Effects.IGraphicsEffectWrapper.IID:
                let wrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Windows_Foundation.IClosableWrapper.IID:
                let wrapper = __ABI_Windows_Foundation.IClosableWrapper(self)
                return wrapper!.queryInterface(iid)
            case __ABI_Microsoft_Graphics_Canvas.ICanvasImageWrapper.IID:
                let wrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasImageWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyICanvasEffect = any ICanvasEffect

extension Win2D.BlendEffectMode {
    public static var multiply : Win2D.BlendEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Multiply
    }
    public static var screen : Win2D.BlendEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Screen
    }
    public static var darken : Win2D.BlendEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Darken
    }
    public static var lighten : Win2D.BlendEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Lighten
    }
    public static var dissolve : Win2D.BlendEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Dissolve
    }
    public static var colorBurn : Win2D.BlendEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_ColorBurn
    }
    public static var linearBurn : Win2D.BlendEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_LinearBurn
    }
    public static var darkerColor : Win2D.BlendEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_DarkerColor
    }
    public static var lighterColor : Win2D.BlendEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_LighterColor
    }
    public static var colorDodge : Win2D.BlendEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_ColorDodge
    }
    public static var linearDodge : Win2D.BlendEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_LinearDodge
    }
    public static var overlay : Win2D.BlendEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Overlay
    }
    public static var softLight : Win2D.BlendEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_SoftLight
    }
    public static var hardLight : Win2D.BlendEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_HardLight
    }
    public static var vividLight : Win2D.BlendEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_VividLight
    }
    public static var linearLight : Win2D.BlendEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_LinearLight
    }
    public static var pinLight : Win2D.BlendEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_PinLight
    }
    public static var hardMix : Win2D.BlendEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_HardMix
    }
    public static var difference : Win2D.BlendEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Difference
    }
    public static var exclusion : Win2D.BlendEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Exclusion
    }
    public static var hue : Win2D.BlendEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Hue
    }
    public static var saturation : Win2D.BlendEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Saturation
    }
    public static var color : Win2D.BlendEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Color
    }
    public static var luminosity : Win2D.BlendEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Luminosity
    }
    public static var subtract : Win2D.BlendEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Subtract
    }
    public static var division : Win2D.BlendEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode_Division
    }
}
extension Win2D.BlendEffectMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.ColorManagementEffectQuality {
    public static var proof : Win2D.ColorManagementEffectQuality {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementEffectQuality_Proof
    }
    public static var normal : Win2D.ColorManagementEffectQuality {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementEffectQuality_Normal
    }
    public static var best : Win2D.ColorManagementEffectQuality {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementEffectQuality_Best
    }
}
extension Win2D.ColorManagementEffectQuality: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.ColorManagementGamma {
    public static var g22 : Win2D.ColorManagementGamma {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementGamma_G22
    }
    public static var g10 : Win2D.ColorManagementGamma {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementGamma_G10
    }
    public static var g2084 : Win2D.ColorManagementGamma {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementGamma_G2084
    }
}
extension Win2D.ColorManagementGamma: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.ColorManagementProfileType {
    public static var icc : Win2D.ColorManagementProfileType {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementProfileType_Icc
    }
    public static var simple : Win2D.ColorManagementProfileType {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementProfileType_Simple
    }
    public static var extended : Win2D.ColorManagementProfileType {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementProfileType_Extended
    }
}
extension Win2D.ColorManagementProfileType: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.ColorManagementRenderingIntent {
    public static var perceptual : Win2D.ColorManagementRenderingIntent {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent_Perceptual
    }
    public static var relativeColorimetric : Win2D.ColorManagementRenderingIntent {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent_RelativeColorimetric
    }
    public static var saturation : Win2D.ColorManagementRenderingIntent {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent_Saturation
    }
    public static var absoluteColorimetric : Win2D.ColorManagementRenderingIntent {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent_AbsoluteColorimetric
    }
}
extension Win2D.ColorManagementRenderingIntent: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.EdgeDetectionEffectMode {
    public static var sobel : Win2D.EdgeDetectionEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEdgeDetectionEffectMode_Sobel
    }
    public static var prewitt : Win2D.EdgeDetectionEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEdgeDetectionEffectMode_Prewitt
    }
}
extension Win2D.EdgeDetectionEffectMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.EffectBorderMode {
    public static var soft : Win2D.EffectBorderMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode_Soft
    }
    public static var hard : Win2D.EffectBorderMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode_Hard
    }
}
extension Win2D.EffectBorderMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.EffectChannelSelect {
    public static var red : Win2D.EffectChannelSelect {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect_Red
    }
    public static var green : Win2D.EffectChannelSelect {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect_Green
    }
    public static var blue : Win2D.EffectChannelSelect {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect_Blue
    }
    public static var alpha : Win2D.EffectChannelSelect {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect_Alpha
    }
}
extension Win2D.EffectChannelSelect: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.EffectHueColorSpace {
    public static var hsv : Win2D.EffectHueColorSpace {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace_Hsv
    }
    public static var hsl : Win2D.EffectHueColorSpace {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace_Hsl
    }
}
extension Win2D.EffectHueColorSpace: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.EffectOptimization {
    public static var speed : Win2D.EffectOptimization {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization_Speed
    }
    public static var balanced : Win2D.EffectOptimization {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization_Balanced
    }
    public static var quality : Win2D.EffectOptimization {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization_Quality
    }
}
extension Win2D.EffectOptimization: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.ExtendedColorSpace {
    public static var fullG22P709 : Win2D.ExtendedColorSpace {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace_FullG22P709
    }
    public static var fullG10P709 : Win2D.ExtendedColorSpace {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace_FullG10P709
    }
    public static var studioG22P709 : Win2D.ExtendedColorSpace {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace_StudioG22P709
    }
    public static var studioG22P2020 : Win2D.ExtendedColorSpace {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace_StudioG22P2020
    }
    public static var fullG2084P2020 : Win2D.ExtendedColorSpace {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace_FullG2084P2020
    }
    public static var studioG2084P2020 : Win2D.ExtendedColorSpace {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace_StudioG2084P2020
    }
    public static var fullG22P2020 : Win2D.ExtendedColorSpace {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace_FullG22P2020
    }
    public static var custom : Win2D.ExtendedColorSpace {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace_Custom
    }
}
extension Win2D.ExtendedColorSpace: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.MorphologyEffectMode {
    public static var erode : Win2D.MorphologyEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMorphologyEffectMode_Erode
    }
    public static var dilate : Win2D.MorphologyEffectMode {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMorphologyEffectMode_Dilate
    }
}
extension Win2D.MorphologyEffectMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.SamplerCoordinateMapping {
    public static var unknown : Win2D.SamplerCoordinateMapping {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping_Unknown
    }
    public static var oneToOne : Win2D.SamplerCoordinateMapping {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping_OneToOne
    }
    public static var offset : Win2D.SamplerCoordinateMapping {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping_Offset
    }
}
extension Win2D.SamplerCoordinateMapping: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension Win2D.TurbulenceEffectNoise {
    public static var fractalSum : Win2D.TurbulenceEffectNoise {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CTurbulenceEffectNoise_FractalSum
    }
    public static var turbulence : Win2D.TurbulenceEffectNoise {
        __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CTurbulenceEffectNoise_Turbulence
    }
}
extension Win2D.TurbulenceEffectNoise: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

