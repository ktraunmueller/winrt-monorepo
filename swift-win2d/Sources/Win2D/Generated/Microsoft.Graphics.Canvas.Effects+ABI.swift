// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect: WindowsFoundation.IID {
    .init(Data1: 0x9BA6607E, Data2: 0x75C9, Data3: 0x5388, Data4: ( 0x89,0x2F,0xDD,0x34,0x40,0x56,0x4D,0x98 ))// 9BA6607E-75C9-5388-892F-DD3440564D98
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics: WindowsFoundation.IID {
    .init(Data1: 0xCC31105C, Data2: 0x0377, Data3: 0x5708, Data4: ( 0x84,0x84,0x1A,0xD8,0xEE,0x3E,0x55,0x4B ))// CC31105C-0377-5708-8484-1AD8EE3E554B
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect: WindowsFoundation.IID {
    .init(Data1: 0xBEEB682B, Data2: 0xD64C, Data3: 0x5C8B, Data4: ( 0xA1,0xFB,0x33,0x21,0x62,0xED,0x09,0x9C ))// BEEB682B-D64C-5C8B-A1FB-332162ED099C
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect: WindowsFoundation.IID {
    .init(Data1: 0xF7F26EBA, Data2: 0xF015, Data3: 0x5EFF, Data4: ( 0x9A,0xF3,0x7B,0xD2,0xD4,0x49,0x04,0xBD ))// F7F26EBA-F015-5EFF-9AF3-7BD2D44904BD
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect: WindowsFoundation.IID {
    .init(Data1: 0x5673248E, Data2: 0x7266, Data3: 0x5E49, Data4: ( 0xB2,0xAB,0x25,0x89,0xD5,0xD8,0x75,0xC3 ))// 5673248E-7266-5E49-B2AB-2589D5D875C3
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect: WindowsFoundation.IID {
    .init(Data1: 0x31602441, Data2: 0x15DB, Data3: 0x5B4A, Data4: ( 0x98,0xDD,0xBA,0x42,0x47,0x54,0x8B,0x41 ))// 31602441-15DB-5B4A-98DD-BA4247548B41
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect: WindowsFoundation.IID {
    .init(Data1: 0xBECED347, Data2: 0x025F, Data3: 0x5727, Data4: ( 0x8F,0x7D,0x49,0x8D,0x67,0xDF,0x55,0x7E ))// BECED347-025F-5727-8F7D-498D67DF557E
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect: WindowsFoundation.IID {
    .init(Data1: 0x0EF96F8C, Data2: 0x9B5E, Data3: 0x4BF0, Data4: ( 0xA3,0x99,0xAA,0xD8,0xCE,0x53,0xDB,0x55 ))// 0EF96F8C-9B5E-4BF0-A399-AAD8CE53DB55
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect: WindowsFoundation.IID {
    .init(Data1: 0xF14B9464, Data2: 0x1871, Data3: 0x5EAA, Data4: ( 0x9D,0xB6,0xC0,0x90,0x11,0x40,0xE9,0xD3 ))// F14B9464-1871-5EAA-9DB6-C0901140E9D3
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect: WindowsFoundation.IID {
    .init(Data1: 0x6E8BBE37, Data2: 0xE1E4, Data3: 0x5AD0, Data4: ( 0xB9,0x8D,0x94,0x0E,0x32,0x13,0xA5,0x4E ))// 6E8BBE37-E1E4-5AD0-B98D-940E3213A54E
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics: WindowsFoundation.IID {
    .init(Data1: 0x31C7AF98, Data2: 0xF2D4, Data3: 0x55FC, Data4: ( 0xB1,0x29,0xA7,0x07,0x36,0xE6,0xDA,0x05 ))// 31C7AF98-F2D4-55FC-B129-A70736E6DA05
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile: WindowsFoundation.IID {
    .init(Data1: 0x5123A56B, Data2: 0xB199, Data3: 0x47AB, Data4: ( 0xAE,0xBE,0xD3,0x08,0x04,0x44,0x23,0xFE ))// 5123A56B-B199-47AB-AEBE-D308044423FE
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory: WindowsFoundation.IID {
    .init(Data1: 0x7A0F1C98, Data2: 0x94C6, Data3: 0x4621, Data4: ( 0x98,0x77,0xC5,0x1A,0x17,0x82,0x3E,0xDF ))// 7A0F1C98-94C6-4621-9877-C51A17823EDF
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics: WindowsFoundation.IID {
    .init(Data1: 0x94EEF610, Data2: 0x03BD, Data3: 0x4E82, Data4: ( 0x94,0x79,0x62,0xA6,0x16,0xBE,0x75,0xF1 ))// 94EEF610-03BD-4E82-9479-62A616BE75F1
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect: WindowsFoundation.IID {
    .init(Data1: 0xE6AE54C4, Data2: 0x883D, Data3: 0x588E, Data4: ( 0xB4,0x51,0xE9,0xEB,0xE3,0x83,0x04,0x37 ))// E6AE54C4-883D-588E-B451-E9EBE3830437
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect: WindowsFoundation.IID {
    .init(Data1: 0x25F942C7, Data2: 0x7FEE, Data3: 0x518A, Data4: ( 0xBA,0x7B,0x22,0xA0,0x06,0x0A,0xF7,0xF6 ))// 25F942C7-7FEE-518A-BA7B-22A0060AF7F6
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect: WindowsFoundation.IID {
    .init(Data1: 0xF8808C48, Data2: 0xCDC7, Data3: 0x5DB4, Data4: ( 0x80,0x7C,0xB9,0x34,0x4F,0xF7,0x19,0x84 ))// F8808C48-CDC7-5DB4-807C-B9344FF71984
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect: WindowsFoundation.IID {
    .init(Data1: 0xDA8A2B9F, Data2: 0x594E, Data3: 0x560A, Data4: ( 0x9E,0xAA,0x1F,0x91,0x24,0x08,0xFE,0x79 ))// DA8A2B9F-594E-560A-9EAA-1F912408FE79
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect: WindowsFoundation.IID {
    .init(Data1: 0x82961257, Data2: 0xA78D, Data3: 0x5440, Data4: ( 0x80,0x26,0xAF,0x57,0xD4,0xA7,0x6A,0x9E ))// 82961257-A78D-5440-8026-AF57D4A76A9E
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect: WindowsFoundation.IID {
    .init(Data1: 0xD8A1C2A5, Data2: 0xE031, Data3: 0x566D, Data4: ( 0x8F,0x7C,0xBA,0x07,0xCF,0xB5,0x8A,0xAE ))// D8A1C2A5-E031-566D-8F7C-BA07CFB58AAE
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect: WindowsFoundation.IID {
    .init(Data1: 0xBE161A9F, Data2: 0x43D2, Data3: 0x5613, Data4: ( 0x86,0x00,0xD5,0x1E,0x3D,0x7C,0xE2,0x88 ))// BE161A9F-43D2-5613-8600-D51E3D7CE288
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics: WindowsFoundation.IID {
    .init(Data1: 0xA3B67330, Data2: 0x6284, Data3: 0x5EF6, Data4: ( 0x99,0xE8,0xB4,0xB0,0x5D,0x2B,0x8B,0xFC ))// A3B67330-6284-5EF6-99E8-B4B05D2B8BFC
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect: WindowsFoundation.IID {
    .init(Data1: 0x5D155C4B, Data2: 0x0882, Data3: 0x506A, Data4: ( 0xA8,0xE1,0x12,0xE1,0xEA,0xD1,0x7F,0x0A ))// 5D155C4B-0882-506A-A8E1-12E1EAD17F0A
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect: WindowsFoundation.IID {
    .init(Data1: 0x7F1F54F9, Data2: 0x21B5, Data3: 0x5B91, Data4: ( 0x95,0x06,0x83,0x2C,0x53,0x6F,0xDD,0xFA ))// 7F1F54F9-21B5-5B91-9506-832C536FDDFA
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect: WindowsFoundation.IID {
    .init(Data1: 0x45F57C50, Data2: 0xD4D9, Data3: 0x5AF1, Data4: ( 0x8A,0x6B,0x50,0x37,0x8F,0x34,0x98,0xA2 ))// 45F57C50-D4D9-5AF1-8A6B-50378F3498A2
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect: WindowsFoundation.IID {
    .init(Data1: 0xD501B10B, Data2: 0xB445, Data3: 0x50F4, Data4: ( 0x8B,0x8F,0xCD,0xEC,0xFC,0xDD,0x13,0x21 ))// D501B10B-B445-50F4-8B8F-CDECFCDD1321
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect: WindowsFoundation.IID {
    .init(Data1: 0xA7A828DF, Data2: 0x3072, Data3: 0x545F, Data4: ( 0x8D,0x75,0x86,0xC1,0x00,0xF0,0x32,0x31 ))// A7A828DF-3072-545F-8D75-86C100F03231
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect: WindowsFoundation.IID {
    .init(Data1: 0x636597CD, Data2: 0xF94A, Data3: 0x55B6, Data4: ( 0x9C,0xF0,0x69,0x4A,0x53,0xD6,0x38,0xEA ))// 636597CD-F94A-55B6-9CF0-694A53D638EA
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect: WindowsFoundation.IID {
    .init(Data1: 0x69F6CF3A, Data2: 0xF38F, Data3: 0x5A88, Data4: ( 0x97,0x4A,0x29,0x39,0x0B,0x95,0x7E,0x5C ))// 69F6CF3A-F38F-5A88-974A-29390B957E5C
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D: WindowsFoundation.IID {
    .init(Data1: 0x7AF06B86, Data2: 0x2C45, Data3: 0x49C8, Data4: ( 0x8F,0x44,0xE1,0x5A,0x6D,0x4F,0xA4,0x4E ))// 7AF06B86-2C45-49C8-8F44-E15A6D4FA44E
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics: WindowsFoundation.IID {
    .init(Data1: 0x3CB83559, Data2: 0x216A, Data3: 0x4BCA, Data4: ( 0x9B,0xB6,0xE2,0x33,0xC5,0xAD,0x2C,0x48 ))// 3CB83559-216A-4BCA-9BB6-E233C5AD2C48
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect: WindowsFoundation.IID {
    .init(Data1: 0x617BFF35, Data2: 0x481C, Data3: 0x5596, Data4: ( 0xAB,0xA5,0x00,0xA1,0x62,0x34,0x9D,0x7B ))// 617BFF35-481C-5596-ABA5-00A162349D7B
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect: WindowsFoundation.IID {
    .init(Data1: 0xB9E20A03, Data2: 0x2232, Data3: 0x5FD3, Data4: ( 0xB4,0x08,0x15,0x78,0x4B,0x79,0xDB,0xB0 ))// B9E20A03-2232-5FD3-B408-15784B79DBB0
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect: WindowsFoundation.IID {
    .init(Data1: 0xB4576B6B, Data2: 0x6C3E, Data3: 0x534A, Data4: ( 0x85,0x76,0xD4,0x6D,0xF4,0xFC,0xE9,0x3D ))// B4576B6B-6C3E-534A-8576-D46DF4FCE93D
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect: WindowsFoundation.IID {
    .init(Data1: 0xA82EC394, Data2: 0x6734, Data3: 0x5830, Data4: ( 0x91,0x23,0x2C,0x82,0xB2,0x7D,0xD3,0xC0 ))// A82EC394-6734-5830-9123-2C82B27DD3C0
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect: WindowsFoundation.IID {
    .init(Data1: 0x78E13B83, Data2: 0x0638, Data3: 0x53F8, Data4: ( 0xB0,0xB3,0x5B,0x0B,0x32,0x0A,0x9A,0xD2 ))// 78E13B83-0638-53F8-B0B3-5B0B320A9AD2
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect: WindowsFoundation.IID {
    .init(Data1: 0x7F90BE14, Data2: 0x267E, Data3: 0x5088, Data4: ( 0xBC,0x36,0x2E,0x0A,0xAD,0x86,0x9B,0x52 ))// 7F90BE14-267E-5088-BC36-2E0AAD869B52
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect: WindowsFoundation.IID {
    .init(Data1: 0xC172EBF2, Data2: 0xE35F, Data3: 0x58AE, Data4: ( 0xAD,0x2C,0x56,0x1E,0xCE,0xAF,0x26,0x94 ))// C172EBF2-E35F-58AE-AD2C-561ECEAF2694
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect: WindowsFoundation.IID {
    .init(Data1: 0x1E97C12C, Data2: 0xB743, Data3: 0x53D0, Data4: ( 0x88,0xC4,0x84,0x35,0x27,0x2B,0x0A,0x3D ))// 1E97C12C-B743-53D0-88C4-8435272B0A3D
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect: WindowsFoundation.IID {
    .init(Data1: 0xD4ADCDFC, Data2: 0x0F60, Data3: 0x524D, Data4: ( 0x93,0x6A,0x7F,0x27,0x36,0xAD,0x33,0xD8 ))// D4ADCDFC-0F60-524D-936A-7F2736AD33D8
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect: WindowsFoundation.IID {
    .init(Data1: 0x43D27AD0, Data2: 0x8937, Data3: 0x5FDB, Data4: ( 0x87,0x6A,0x4E,0x91,0xCB,0x47,0x54,0x0C ))// 43D27AD0-8937-5FDB-876A-4E91CB47540C
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect: WindowsFoundation.IID {
    .init(Data1: 0x22364900, Data2: 0xAC51, Data3: 0x5BD3, Data4: ( 0x8B,0xD2,0xD6,0x26,0xFC,0x9A,0x65,0xF9 ))// 22364900-AC51-5BD3-8BD2-D626FC9A65F9
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect: WindowsFoundation.IID {
    .init(Data1: 0xFF065FDB, Data2: 0x62C8, Data3: 0x5808, Data4: ( 0x92,0x1E,0x49,0xEF,0xA4,0x3A,0x3D,0x34 ))// FF065FDB-62C8-5808-921E-49EFA43A3D34
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect: WindowsFoundation.IID {
    .init(Data1: 0x94B6AD75, Data2: 0xC540, Data3: 0x51B8, Data4: ( 0xA9,0xD1,0x54,0x41,0x74,0xAD,0xC6,0x8D ))// 94B6AD75-C540-51B8-A9D1-544174ADC68D
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics: WindowsFoundation.IID {
    .init(Data1: 0x91A7CDE3, Data2: 0xB9B7, Data3: 0x5437, Data4: ( 0x88,0x78,0xFB,0x2E,0x14,0x10,0x0E,0x6D ))// 91A7CDE3-B9B7-5437-8878-FB2E14100E6D
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect: WindowsFoundation.IID {
    .init(Data1: 0x099F3299, Data2: 0x9B0A, Data3: 0x5ED3, Data4: ( 0xB0,0x44,0x4A,0x6F,0xC9,0x6F,0x83,0x62 ))// 099F3299-9B0A-5ED3-B044-4A6FC96F8362
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect: WindowsFoundation.IID {
    .init(Data1: 0xFC8C3C31, Data2: 0xFA96, Data3: 0x45E2, Data4: ( 0x8B,0x72,0x17,0x41,0xC6,0x5C,0xEE,0x8E ))// FC8C3C31-FA96-45E2-8B72-1741C65CEE8E
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory: WindowsFoundation.IID {
    .init(Data1: 0x9D1727E5, Data2: 0x489D, Data3: 0x4ABC, Data4: ( 0xB1,0x29,0x53,0x61,0xE3,0x53,0x4A,0xF4 ))// 9D1727E5-489D-4ABC-B129-5361E3534AF4
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect: WindowsFoundation.IID {
    .init(Data1: 0x6CCE09EC, Data2: 0xF847, Data3: 0x5661, Data4: ( 0xAF,0x4B,0x53,0x1D,0xD3,0xDD,0x7D,0x6E ))// 6CCE09EC-F847-5661-AF4B-531DD3DD7D6E
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect: WindowsFoundation.IID {
    .init(Data1: 0xEC8AFE9B, Data2: 0x8501, Data3: 0x5286, Data4: ( 0xA4,0x3C,0x1A,0xFF,0xF7,0x42,0x0A,0xD6 ))// EC8AFE9B-8501-5286-A43C-1AFFF7420AD6
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect: WindowsFoundation.IID {
    .init(Data1: 0x2F631A3B, Data2: 0xC89A, Data3: 0x507C, Data4: ( 0x97,0x56,0x29,0x9B,0x61,0x43,0x4F,0xA4 ))// 2F631A3B-C89A-507C-9756-299B61434FA4
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect: WindowsFoundation.IID {
    .init(Data1: 0xD29A9D1E, Data2: 0xBD57, Data3: 0x5F3E, Data4: ( 0x9A,0xE0,0x00,0x9C,0x6A,0xC5,0xB0,0x6D ))// D29A9D1E-BD57-5F3E-9AE0-009C6AC5B06D
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect: WindowsFoundation.IID {
    .init(Data1: 0x7CAEADC6, Data2: 0x9EB3, Data3: 0x5895, Data4: ( 0xB8,0x76,0xF4,0x85,0xC9,0x57,0x48,0x47 ))// 7CAEADC6-9EB3-5895-B876-F485C9574847
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect: WindowsFoundation.IID {
    .init(Data1: 0xF85A5ED7, Data2: 0x7212, Data3: 0x57A6, Data4: ( 0xB3,0x57,0x61,0x03,0x89,0x61,0xC5,0x8D ))// F85A5ED7-7212-57A6-B357-61038961C58D
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect: WindowsFoundation.IID {
    .init(Data1: 0x7522AE90, Data2: 0xBEC2, Data3: 0x512C, Data4: ( 0xBC,0xC0,0x4D,0x6A,0x97,0xE3,0xED,0x34 ))// 7522AE90-BEC2-512C-BCC0-4D6A97E3ED34
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect: WindowsFoundation.IID {
    .init(Data1: 0xF933471F, Data2: 0xA7AF, Data3: 0x5521, Data4: ( 0xBE,0x79,0xB0,0xDA,0x22,0x97,0x6C,0xFF ))// F933471F-A7AF-5521-BE79-B0DA22976CFF
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect: WindowsFoundation.IID {
    .init(Data1: 0x3947C621, Data2: 0x78DA, Data3: 0x5489, Data4: ( 0x99,0x27,0xBE,0x65,0x5F,0x45,0x76,0xE2 ))// 3947C621-78DA-5489-9927-BE655F4576E2
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect: WindowsFoundation.IID {
    .init(Data1: 0x7EFEF0A1, Data2: 0x7578, Data3: 0x5F62, Data4: ( 0x83,0x64,0x46,0x14,0x56,0x74,0xEF,0x7E ))// 7EFEF0A1-7578-5F62-8364-46145674EF7E
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect: WindowsFoundation.IID {
    .init(Data1: 0xB3DCBE44, Data2: 0x1DD7, Data3: 0x5CB3, Data4: ( 0x95,0xE5,0xA4,0x89,0x74,0xCD,0x12,0xE8 ))// B3DCBE44-1DD7-5CB3-95E5-A48974CD12E8
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect: WindowsFoundation.IID {
    .init(Data1: 0x83AE4CD0, Data2: 0x80AA, Data3: 0x5783, Data4: ( 0x85,0x72,0xF1,0x5E,0x5F,0x85,0x32,0x9E ))// 83AE4CD0-80AA-5783-8572-F15E5F85329E
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect: WindowsFoundation.IID {
    .init(Data1: 0x965FC262, Data2: 0x2EBA, Data3: 0x59E6, Data4: ( 0x93,0x5F,0x23,0x89,0xCB,0x5A,0x30,0x5A ))// 965FC262-2EBA-59E6-935F-2389CB5A305A
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect: WindowsFoundation.IID {
    .init(Data1: 0xEF09C6E0, Data2: 0x9437, Data3: 0x53F7, Data4: ( 0xB7,0xB4,0xB5,0x3C,0x79,0xA0,0xBC,0x37 ))// EF09C6E0-9437-53F7-B7B4-B53C79A0BC37
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect: WindowsFoundation.IID {
    .init(Data1: 0xBF0B63B6, Data2: 0xFE77, Data3: 0x5198, Data4: ( 0xA2,0xA1,0x3F,0xB8,0x0C,0x26,0x8B,0x8F ))// BF0B63B6-FE77-5198-A2A1-3FB80C268B8F
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect: WindowsFoundation.IID {
    .init(Data1: 0x8AE43E02, Data2: 0x2619, Data3: 0x5D78, Data4: ( 0x89,0x80,0x4E,0xD5,0x69,0x54,0x9B,0xD8 ))// 8AE43E02-2619-5D78-8980-4ED569549BD8
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect: WindowsFoundation.IID {
    .init(Data1: 0x78A809CB, Data2: 0x1154, Data3: 0x5AD6, Data4: ( 0xA8,0x80,0xE3,0xA1,0x75,0x77,0x28,0x15 ))// 78A809CB-1154-5AD6-A880-E3A175772815
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect: WindowsFoundation.IID {
    .init(Data1: 0x729A21EA, Data2: 0xC61E, Data3: 0x5308, Data4: ( 0x9E,0xAE,0xD6,0x38,0xAA,0x1F,0x5B,0x8C ))// 729A21EA-C61E-5308-9EAE-D638AA1F5B8C
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics: WindowsFoundation.IID {
    .init(Data1: 0x65E31771, Data2: 0x4BAF, Data3: 0x5C8C, Data4: ( 0x93,0xF4,0x3B,0x87,0x4E,0x29,0xF6,0x8D ))// 65E31771-4BAF-5C8C-93F4-3B874E29F68D
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect: WindowsFoundation.IID {
    .init(Data1: 0x4467D118, Data2: 0x33E7, Data3: 0x5B1A, Data4: ( 0x87,0xC2,0x0F,0x1F,0x04,0x97,0x35,0x3D ))// 4467D118-33E7-5B1A-87C2-0F1F0497353D
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect: WindowsFoundation.IID {
    .init(Data1: 0x3025ED7F, Data2: 0x8F25, Data3: 0x5E0B, Data4: ( 0x80,0xC9,0x56,0xBB,0xDD,0x3E,0x8A,0x10 ))// 3025ED7F-8F25-5E0B-80C9-56BBDD3E8A10
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect: WindowsFoundation.IID {
    .init(Data1: 0x1CB1B33D, Data2: 0x20E9, Data3: 0x564B, Data4: ( 0x85,0x6E,0x37,0xE9,0xFA,0x1D,0x00,0x16 ))// 1CB1B33D-20E9-564B-856E-37E9FA1D0016
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect: WindowsFoundation.IID {
    .init(Data1: 0x73098BB4, Data2: 0xDCF1, Data3: 0x5403, Data4: ( 0xAF,0x44,0x33,0x44,0xD2,0x98,0x2D,0x40 ))// 73098BB4-DCF1-5403-AF44-3344D2982D40
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect: WindowsFoundation.IID {
    .init(Data1: 0x574D0F9F, Data2: 0xEEC7, Data3: 0x5989, Data4: ( 0xAC,0x53,0x13,0x58,0x68,0xCF,0x5E,0x0C ))// 574D0F9F-EEC7-5989-AC53-135868CF5E0C
}

@_spi(WinRTInternal)
public enum __ABI_Microsoft_Graphics_Canvas_Effects {
    public class IAlphaMaskEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

        public func get_AlphaMask() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaMask(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_AlphaMask(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaMask(pThis, _source))
            }
        }

    }

    public class IAlphaMaskEffectStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics }

        public func get_IsSupported() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAlphaMaskEffectStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSupported(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IArithmeticCompositeEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect }

        public func get_ClampOutput() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClampOutput(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_ClampOutput(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClampOutput(pThis, .init(from: value)))
            }
        }

        public func get_MultiplyAmount() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MultiplyAmount(pThis, &value))
            }
            return value
        }

        public func put_MultiplyAmount(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MultiplyAmount(pThis, value))
            }
        }

        public func get_Source1Amount() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source1Amount(pThis, &value))
            }
            return value
        }

        public func put_Source1Amount(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source1Amount(pThis, value))
            }
        }

        public func get_Source2Amount() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source2Amount(pThis, &value))
            }
            return value
        }

        public func put_Source2Amount(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source2Amount(pThis, value))
            }
        }

        public func get_Offset() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Offset(pThis, &value))
            }
            return value
        }

        public func put_Offset(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Offset(pThis, value))
            }
        }

        public func get_Source1() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source1(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source1(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source1(pThis, _source))
            }
        }

        public func get_Source2() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source2(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source2(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIArithmeticCompositeEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source2(pThis, _source))
            }
        }

    }

    public class IAtlasEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect }

        public func get_SourceRectangle() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceRectangle(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_SourceRectangle(_ value: WindowsFoundation.Rect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SourceRectangle(pThis, .from(swift: value)))
            }
        }

        public func get_PaddingRectangle() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PaddingRectangle(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_PaddingRectangle(_ value: WindowsFoundation.Rect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PaddingRectangle(pThis, .from(swift: value)))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIAtlasEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IBlendEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect }

        public func get_Mode() throws -> Win2D.BlendEffectMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CBlendEffectMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Mode(pThis, &value))
            }
            return value
        }

        public func put_Mode(_ value: Win2D.BlendEffectMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Mode(pThis, value))
            }
        }

        public func get_Background() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Background(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Background(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Background(pThis, _source))
            }
        }

        public func get_Foreground() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Foreground(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Foreground(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBlendEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Foreground(pThis, _source))
            }
        }

    }

    public class IBorderEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect }

        public func get_ExtendX() throws -> Win2D.CanvasEdgeBehavior {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendX(pThis, &value))
            }
            return value
        }

        public func put_ExtendX(_ value: Win2D.CanvasEdgeBehavior) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExtendX(pThis, value))
            }
        }

        public func get_ExtendY() throws -> Win2D.CanvasEdgeBehavior {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendY(pThis, &value))
            }
            return value
        }

        public func put_ExtendY(_ value: Win2D.CanvasEdgeBehavior) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExtendY(pThis, value))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBorderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IBrightnessEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect }

        public func get_WhitePoint() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_WhitePoint(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_WhitePoint(_ value: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_WhitePoint(pThis, .from(swift: value)))
            }
        }

        public func get_BlackPoint() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlackPoint(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_BlackPoint(_ value: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlackPoint(pThis, .from(swift: value)))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIBrightnessEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class ICanvasEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect }

        open func get_CacheOutput() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CacheOutput(pThis, &value))
            }
            return .init(from: value)
        }

        open func put_CacheOutput(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CacheOutput(pThis, .init(from: value)))
            }
        }

        open func get_BufferPrecision() throws -> Win2D.CanvasBufferPrecision? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BufferPrecision(pThis, &valueAbi))
                }
            }
            return Win2D.__x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecisionWrapper.unwrapFrom(abi: value)
        }

        open func put_BufferPrecision(_ value: Win2D.CanvasBufferPrecision?) throws {
            let valueWrapper = Win2D.__x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecisionWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BufferPrecision(pThis, _value))
            }
        }

        open func InvalidateSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi?, _ sourceIndex: UInt32, _ invalidRectangle: WindowsFoundation.Rect) throws {
            let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpiWrapper(resourceCreator)
            let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.InvalidateSourceRectangle(pThis, _resourceCreator, sourceIndex, .from(swift: invalidRectangle)))
            }
        }

        open func GetInvalidRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi?) throws -> [WindowsFoundation.Rect] {
            var valueElements: WinRTArrayAbi<__x_ABI_CWindows_CFoundation_CRect> = (0, nil)
            let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpiWrapper(resourceCreator)
            let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetInvalidRectangles(pThis, _resourceCreator, &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        open func GetRequiredSourceRectangle(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi?, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffect: Win2D.AnyICanvasEffect?, _ sourceIndex: UInt32, _ sourceBounds: WindowsFoundation.Rect) throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpiWrapper(resourceCreator)
            let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
            let sourceEffectWrapper = __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffectWrapper(sourceEffect)
            let _sourceEffect = try! sourceEffectWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetRequiredSourceRectangle(pThis, _resourceCreator, .from(swift: outputRectangle), _sourceEffect, sourceIndex, .from(swift: sourceBounds), &value))
            }
            return .from(abi: value)
        }

        open func GetRequiredSourceRectangles(_ resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi?, _ outputRectangle: WindowsFoundation.Rect, _ sourceEffects: [Win2D.AnyICanvasEffect?], _ sourceIndices: [UInt32], _ sourceBounds: [WindowsFoundation.Rect]) throws -> [WindowsFoundation.Rect] {
            var valueElements: WinRTArrayAbi<__x_ABI_CWindows_CFoundation_CRect> = (0, nil)
            let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpiWrapper(resourceCreator)
            let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
            try sourceEffects.toABI(abiBridge: __IMPL_Microsoft_Graphics_Canvas_Effects.ICanvasEffectBridge.self) { _sourceEffects in
                try sourceIndices.toABI { _sourceIndices in
                try sourceBounds.toABI { _sourceBounds in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetRequiredSourceRectangles(pThis, _resourceCreator, .from(swift: outputRectangle), _sourceEffects.count, _sourceEffects.start, _sourceIndices.count, _sourceIndices.start, _sourceBounds.count, _sourceBounds.start, &valueElements.count, &valueElements.start))
                }
            }
            }
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

    }

    internal static var ICanvasEffectVTable: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICanvasEffectVtbl = .init(
        QueryInterface: { ICanvasEffectWrapper.queryInterface($0, $1, $2) },
        AddRef: { ICanvasEffectWrapper.addRef($0) },
        Release: { ICanvasEffectWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 7).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffectWrapper.IID
            iids[3] = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.IID
            iids[4] = __ABI_Windows_Graphics_Effects.IGraphicsEffectWrapper.IID
            iids[5] = __ABI_Windows_Foundation.IClosableWrapper.IID
            iids[6] = __ABI_Microsoft_Graphics_Canvas.ICanvasImageWrapper.IID
            $1!.pointee = 7
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.Graphics.Canvas.Effects.ICanvasEffect").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_CacheOutput: {
            guard let __unwrapped__instance = ICanvasEffectWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.cacheOutput
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        put_CacheOutput: {
            guard let __unwrapped__instance = ICanvasEffectWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Bool = .init(from: $1)
            __unwrapped__instance.cacheOutput = value
            return S_OK
        },

        get_BufferPrecision: {
            guard let __unwrapped__instance = ICanvasEffectWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.bufferPrecision
            let valueWrapper = Win2D.__x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecisionWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        put_BufferPrecision: {
            guard let __unwrapped__instance = ICanvasEffectWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Win2D.CanvasBufferPrecision? = Win2D.__x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecisionWrapper.unwrapFrom(abi: ComPtr($1))
            __unwrapped__instance.bufferPrecision = value
            return S_OK
        },

        InvalidateSourceRectangle: {
            do {
                guard let __unwrapped__instance = ICanvasEffectWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi? = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpiWrapper.unwrapFrom(abi: ComPtr($1))
                let sourceIndex: UInt32 = $2
                let invalidRectangle: WindowsFoundation.Rect = .from(abi: $3)
                try __unwrapped__instance.invalidateSourceRectangle(resourceCreator, sourceIndex, invalidRectangle)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetInvalidRectangles: {
            do {
                guard let __unwrapped__instance = ICanvasEffectWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi? = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpiWrapper.unwrapFrom(abi: ComPtr($1))
                let valueElements = try __unwrapped__instance.getInvalidRectangles(resourceCreator)
                $2?.initialize(to: UInt32(valueElements.count))
                do {
                    try valueElements.fill(abi: $3)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetRequiredSourceRectangle: {
            do {
                guard let __unwrapped__instance = ICanvasEffectWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi? = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpiWrapper.unwrapFrom(abi: ComPtr($1))
                let outputRectangle: WindowsFoundation.Rect = .from(abi: $2)
                let sourceEffect: Win2D.AnyICanvasEffect? = __ABI_Microsoft_Graphics_Canvas_Effects.ICanvasEffectWrapper.unwrapFrom(abi: ComPtr($3))
                let sourceIndex: UInt32 = $4
                let sourceBounds: WindowsFoundation.Rect = .from(abi: $5)
                let value = try __unwrapped__instance.getRequiredSourceRectangle(resourceCreator, outputRectangle, sourceEffect, sourceIndex, sourceBounds)
                $6?.initialize(to: .from(swift: value))
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetRequiredSourceRectangles: {
            do {
                guard let __unwrapped__instance = ICanvasEffectWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let resourceCreator: Win2D.AnyICanvasResourceCreatorWithDpi? = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWithDpiWrapper.unwrapFrom(abi: ComPtr($1))
                let outputRectangle: WindowsFoundation.Rect = .from(abi: $2)
                let sourceEffects: [Win2D.AnyICanvasEffect?] = .from(abiBridge: __IMPL_Microsoft_Graphics_Canvas_Effects.ICanvasEffectBridge.self, abi: (count: $3, start: $4))
                let sourceIndices: [UInt32] = .from(abi: (count: $5, start: $6))
                let sourceBounds: [WindowsFoundation.Rect] = .from(abi: (count: $7, start: $8))
                let valueElements = try __unwrapped__instance.getRequiredSourceRectangles(resourceCreator, outputRectangle, sourceEffects, sourceIndices, sourceBounds)
                $9?.initialize(to: UInt32(valueElements.count))
                do {
                    try valueElements.fill(abi: $10)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias ICanvasEffectWrapper = InterfaceWrapperBase<__IMPL_Microsoft_Graphics_Canvas_Effects.ICanvasEffectBridge>
    public class IChromaKeyEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect }

        public func get_Color() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Color(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_Color(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Color(pThis, .from(swift: value)))
            }
        }

        public func get_Tolerance() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Tolerance(pThis, &value))
            }
            return value
        }

        public func put_Tolerance(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Tolerance(pThis, value))
            }
        }

        public func get_InvertAlpha() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InvertAlpha(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_InvertAlpha(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_InvertAlpha(pThis, .init(from: value)))
            }
        }

        public func get_Feather() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Feather(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_Feather(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Feather(pThis, .init(from: value)))
            }
        }

        public func get_ColorHdr() throws -> WindowsFoundation.Vector4 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector4 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColorHdr(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_ColorHdr(_ value: WindowsFoundation.Vector4) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ColorHdr(pThis, .from(swift: value)))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIChromaKeyEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IColorManagementEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect }

        public func get_SourceColorProfile() throws -> Win2D.ColorManagementProfile? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceColorProfile(pThis, &valueAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas_Effects.ColorManagementProfileBridge.from(abi: value)
        }

        public func put_SourceColorProfile(_ value: Win2D.ColorManagementProfile?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SourceColorProfile(pThis, RawPointer(value)))
            }
        }

        public func get_SourceRenderingIntent() throws -> Win2D.ColorManagementRenderingIntent {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceRenderingIntent(pThis, &value))
            }
            return value
        }

        public func put_SourceRenderingIntent(_ value: Win2D.ColorManagementRenderingIntent) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SourceRenderingIntent(pThis, value))
            }
        }

        public func get_OutputColorProfile() throws -> Win2D.ColorManagementProfile? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_OutputColorProfile(pThis, &valueAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas_Effects.ColorManagementProfileBridge.from(abi: value)
        }

        public func put_OutputColorProfile(_ value: Win2D.ColorManagementProfile?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OutputColorProfile(pThis, RawPointer(value)))
            }
        }

        public func get_OutputRenderingIntent() throws -> Win2D.ColorManagementRenderingIntent {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementRenderingIntent = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OutputRenderingIntent(pThis, &value))
            }
            return value
        }

        public func put_OutputRenderingIntent(_ value: Win2D.ColorManagementRenderingIntent) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OutputRenderingIntent(pThis, value))
            }
        }

        public func get_AlphaMode() throws -> Win2D.CanvasAlphaMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaMode(pThis, &value))
            }
            return value
        }

        public func put_AlphaMode(_ value: Win2D.CanvasAlphaMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaMode(pThis, value))
            }
        }

        public func get_Quality() throws -> Win2D.ColorManagementEffectQuality {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementEffectQuality = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Quality(pThis, &value))
            }
            return value
        }

        public func put_Quality(_ value: Win2D.ColorManagementEffectQuality) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Quality(pThis, value))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IColorManagementEffectStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics }

        public func IsBestQualitySupported(_ device: Win2D.CanvasDevice?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementEffectStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsBestQualitySupported(pThis, RawPointer(device), &result))
            }
            return .init(from: result)
        }

    }

    public class IColorManagementProfile: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile }

        public func get_ColorSpace() throws -> Win2D.CanvasColorSpace {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColorSpace(pThis, &value))
            }
            return value
        }

        public func get_IccProfile() throws -> [UInt8] {
            var valueElements: WinRTArrayAbi<UINT8> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IccProfile(pThis, &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func get_Type() throws -> Win2D.ColorManagementProfileType {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementProfileType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Type(pThis, &value))
            }
            return value
        }

        public func get_SimpleProfile() throws -> Win2D.ColorManagementSimpleProfile? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SimpleProfile(pThis, &valueAbi))
                }
            }
            return Win2D.__x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfileWrapper.unwrapFrom(abi: value)
        }

        public func get_ExtendedColorSpace() throws -> Win2D.ExtendedColorSpace {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CExtendedColorSpace = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfile.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendedColorSpace(pThis, &value))
            }
            return value
        }

    }

    public class IColorManagementProfileFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory }

        public func Create(_ colorSpace: Win2D.CanvasColorSpace) throws -> IColorManagementProfile {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, colorSpace, &resultAbi))
                }
            }
            return IColorManagementProfile(result!)
        }

    }

    public class IColorManagementProfileStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics }

        public func CreateCustom(_ iccProfile: [UInt8]) throws -> Win2D.ColorManagementProfile? {
            let (result) = try ComPtrs.initialize { resultAbi in
                try iccProfile.toABI { _iccProfile in
                    _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCustom(pThis, _iccProfile.count, _iccProfile.start, &resultAbi))
                    }
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas_Effects.ColorManagementProfileBridge.from(abi: result)
        }

        public func CreateSimple(_ simpleProfile: Win2D.ColorManagementSimpleProfile) throws -> Win2D.ColorManagementProfile? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSimple(pThis, .from(swift: simpleProfile), &resultAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas_Effects.ColorManagementProfileBridge.from(abi: result)
        }

        public func CreateExtended(_ colorSpace: Win2D.ExtendedColorSpace) throws -> Win2D.ColorManagementProfile? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateExtended(pThis, colorSpace, &resultAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas_Effects.ColorManagementProfileBridge.from(abi: result)
        }

        public func IsSupported(_ type: Win2D.ColorManagementProfileType, _ device: Win2D.CanvasDevice?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorManagementProfileStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsSupported(pThis, type, RawPointer(device), &result))
            }
            return .init(from: result)
        }

    }

    public class IColorMatrixEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect }

        public func get_ColorMatrix() throws -> Win2D.Matrix5x4 {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMatrix5x4 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColorMatrix(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_ColorMatrix(_ value: Win2D.Matrix5x4) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ColorMatrix(pThis, .from(swift: value)))
            }
        }

        public func get_AlphaMode() throws -> Win2D.CanvasAlphaMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaMode(pThis, &value))
            }
            return value
        }

        public func put_AlphaMode(_ value: Win2D.CanvasAlphaMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaMode(pThis, value))
            }
        }

        public func get_ClampOutput() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClampOutput(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_ClampOutput(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClampOutput(pThis, .init(from: value)))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IColorSourceEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect }

        public func get_Color() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Color(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_Color(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Color(pThis, .from(swift: value)))
            }
        }

        public func get_ColorHdr() throws -> WindowsFoundation.Vector4 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector4 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColorHdr(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_ColorHdr(_ value: WindowsFoundation.Vector4) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIColorSourceEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ColorHdr(pThis, .from(swift: value)))
            }
        }

    }

    public class ICompositeEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect }

        public func get_Mode() throws -> Win2D.CanvasComposite {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasComposite = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Mode(pThis, &value))
            }
            return value
        }

        public func put_Mode(_ value: Win2D.CanvasComposite) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Mode(pThis, value))
            }
        }

        public func get_Sources() throws -> WindowsFoundation.AnyIVector<UWP.AnyIGraphicsEffectSource?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICompositeEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Sources(pThis, &valueAbi))
                }
            }
            return Win2D.__x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.unwrapFrom(abi: value)
        }

    }

    public class IContrastEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect }

        public func get_Contrast() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Contrast(pThis, &value))
            }
            return value
        }

        public func put_Contrast(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Contrast(pThis, value))
            }
        }

        public func get_ClampSource() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClampSource(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_ClampSource(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClampSource(pThis, .init(from: value)))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIContrastEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IConvolveMatrixEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect }

        public func get_KernelScale() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KernelScale(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_KernelScale(_ value: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_KernelScale(pThis, .from(swift: value)))
            }
        }

        public func get_InterpolationMode() throws -> Win2D.CanvasImageInterpolation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InterpolationMode(pThis, &value))
            }
            return value
        }

        public func put_InterpolationMode(_ value: Win2D.CanvasImageInterpolation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_InterpolationMode(pThis, value))
            }
        }

        public func get_KernelWidth() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KernelWidth(pThis, &value))
            }
            return value
        }

        public func put_KernelWidth(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_KernelWidth(pThis, value))
            }
        }

        public func get_KernelHeight() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KernelHeight(pThis, &value))
            }
            return value
        }

        public func put_KernelHeight(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_KernelHeight(pThis, value))
            }
        }

        public func get_KernelMatrix() throws -> [Float] {
            var valueElements: WinRTArrayAbi<FLOAT> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KernelMatrix(pThis, &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func put_KernelMatrix(_ valueElements: [Float]) throws {
            try valueElements.toABI { _valueElements in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.put_KernelMatrix(pThis, _valueElements.count, _valueElements.start))
                }
            }
        }

        public func get_Divisor() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Divisor(pThis, &value))
            }
            return value
        }

        public func put_Divisor(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Divisor(pThis, value))
            }
        }

        public func get_Offset() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Offset(pThis, &value))
            }
            return value
        }

        public func put_Offset(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Offset(pThis, value))
            }
        }

        public func get_KernelOffset() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_KernelOffset(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_KernelOffset(_ value: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_KernelOffset(pThis, .from(swift: value)))
            }
        }

        public func get_PreserveAlpha() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreserveAlpha(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_PreserveAlpha(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_PreserveAlpha(pThis, .init(from: value)))
            }
        }

        public func get_BorderMode() throws -> Win2D.EffectBorderMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderMode(pThis, &value))
            }
            return value
        }

        public func put_BorderMode(_ value: Win2D.EffectBorderMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderMode(pThis, value))
            }
        }

        public func get_ClampOutput() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClampOutput(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_ClampOutput(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClampOutput(pThis, .init(from: value)))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIConvolveMatrixEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class ICropEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect }

        public func get_SourceRectangle() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceRectangle(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_SourceRectangle(_ value: WindowsFoundation.Rect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SourceRectangle(pThis, .from(swift: value)))
            }
        }

        public func get_BorderMode() throws -> Win2D.EffectBorderMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderMode(pThis, &value))
            }
            return value
        }

        public func put_BorderMode(_ value: Win2D.EffectBorderMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderMode(pThis, value))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICropEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class ICrossFadeEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect }

        public func get_CrossFade() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CrossFade(pThis, &value))
            }
            return value
        }

        public func put_CrossFade(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CrossFade(pThis, value))
            }
        }

        public func get_Source2() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source2(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source2(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source2(pThis, _source))
            }
        }

        public func get_Source1() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source1(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source1(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source1(pThis, _source))
            }
        }

    }

    public class ICrossFadeEffectStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics }

        public func get_IsSupported() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CICrossFadeEffectStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSupported(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IDirectionalBlurEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect }

        public func get_BlurAmount() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlurAmount(pThis, &value))
            }
            return value
        }

        public func put_BlurAmount(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlurAmount(pThis, value))
            }
        }

        public func get_Angle() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Angle(pThis, &value))
            }
            return value
        }

        public func put_Angle(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Angle(pThis, value))
            }
        }

        public func get_Optimization() throws -> Win2D.EffectOptimization {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Optimization(pThis, &value))
            }
            return value
        }

        public func put_Optimization(_ value: Win2D.EffectOptimization) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Optimization(pThis, value))
            }
        }

        public func get_BorderMode() throws -> Win2D.EffectBorderMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderMode(pThis, &value))
            }
            return value
        }

        public func put_BorderMode(_ value: Win2D.EffectBorderMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderMode(pThis, value))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDirectionalBlurEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IDiscreteTransferEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect }

        public func get_RedTable() throws -> [Float] {
            var valueElements: WinRTArrayAbi<FLOAT> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedTable(pThis, &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func put_RedTable(_ valueElements: [Float]) throws {
            try valueElements.toABI { _valueElements in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.put_RedTable(pThis, _valueElements.count, _valueElements.start))
                }
            }
        }

        public func get_RedDisable() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedDisable(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_RedDisable(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RedDisable(pThis, .init(from: value)))
            }
        }

        public func get_GreenTable() throws -> [Float] {
            var valueElements: WinRTArrayAbi<FLOAT> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GreenTable(pThis, &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func put_GreenTable(_ valueElements: [Float]) throws {
            try valueElements.toABI { _valueElements in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.put_GreenTable(pThis, _valueElements.count, _valueElements.start))
                }
            }
        }

        public func get_GreenDisable() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GreenDisable(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_GreenDisable(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_GreenDisable(pThis, .init(from: value)))
            }
        }

        public func get_BlueTable() throws -> [Float] {
            var valueElements: WinRTArrayAbi<FLOAT> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlueTable(pThis, &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func put_BlueTable(_ valueElements: [Float]) throws {
            try valueElements.toABI { _valueElements in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlueTable(pThis, _valueElements.count, _valueElements.start))
                }
            }
        }

        public func get_BlueDisable() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlueDisable(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_BlueDisable(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlueDisable(pThis, .init(from: value)))
            }
        }

        public func get_AlphaTable() throws -> [Float] {
            var valueElements: WinRTArrayAbi<FLOAT> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaTable(pThis, &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func put_AlphaTable(_ valueElements: [Float]) throws {
            try valueElements.toABI { _valueElements in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaTable(pThis, _valueElements.count, _valueElements.start))
                }
            }
        }

        public func get_AlphaDisable() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaDisable(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_AlphaDisable(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaDisable(pThis, .init(from: value)))
            }
        }

        public func get_ClampOutput() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClampOutput(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_ClampOutput(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClampOutput(pThis, .init(from: value)))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDiscreteTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IDisplacementMapEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect }

        public func get_Amount() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Amount(pThis, &value))
            }
            return value
        }

        public func put_Amount(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Amount(pThis, value))
            }
        }

        public func get_XChannelSelect() throws -> Win2D.EffectChannelSelect {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_XChannelSelect(pThis, &value))
            }
            return value
        }

        public func put_XChannelSelect(_ value: Win2D.EffectChannelSelect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_XChannelSelect(pThis, value))
            }
        }

        public func get_YChannelSelect() throws -> Win2D.EffectChannelSelect {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectChannelSelect = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_YChannelSelect(pThis, &value))
            }
            return value
        }

        public func put_YChannelSelect(_ value: Win2D.EffectChannelSelect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_YChannelSelect(pThis, value))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

        public func get_Displacement() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Displacement(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Displacement(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDisplacementMapEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Displacement(pThis, _source))
            }
        }

    }

    public class IDistantDiffuseEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect }

        public func get_Azimuth() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Azimuth(pThis, &value))
            }
            return value
        }

        public func put_Azimuth(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Azimuth(pThis, value))
            }
        }

        public func get_Elevation() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Elevation(pThis, &value))
            }
            return value
        }

        public func put_Elevation(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Elevation(pThis, value))
            }
        }

        public func get_DiffuseAmount() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DiffuseAmount(pThis, &value))
            }
            return value
        }

        public func put_DiffuseAmount(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DiffuseAmount(pThis, value))
            }
        }

        public func get_HeightMapScale() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapScale(pThis, &value))
            }
            return value
        }

        public func put_HeightMapScale(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapScale(pThis, value))
            }
        }

        public func get_LightColor() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightColor(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_LightColor(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightColor(pThis, .from(swift: value)))
            }
        }

        public func get_HeightMapKernelSize() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapKernelSize(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_HeightMapKernelSize(_ value: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapKernelSize(pThis, .from(swift: value)))
            }
        }

        public func get_HeightMapInterpolationMode() throws -> Win2D.CanvasImageInterpolation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapInterpolationMode(pThis, &value))
            }
            return value
        }

        public func put_HeightMapInterpolationMode(_ value: Win2D.CanvasImageInterpolation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapInterpolationMode(pThis, value))
            }
        }

        public func get_LightColorHdr() throws -> WindowsFoundation.Vector4 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector4 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightColorHdr(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_LightColorHdr(_ value: WindowsFoundation.Vector4) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightColorHdr(pThis, .from(swift: value)))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IDistantSpecularEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect }

        public func get_Azimuth() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Azimuth(pThis, &value))
            }
            return value
        }

        public func put_Azimuth(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Azimuth(pThis, value))
            }
        }

        public func get_Elevation() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Elevation(pThis, &value))
            }
            return value
        }

        public func put_Elevation(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Elevation(pThis, value))
            }
        }

        public func get_SpecularExponent() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SpecularExponent(pThis, &value))
            }
            return value
        }

        public func put_SpecularExponent(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SpecularExponent(pThis, value))
            }
        }

        public func get_SpecularAmount() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SpecularAmount(pThis, &value))
            }
            return value
        }

        public func put_SpecularAmount(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SpecularAmount(pThis, value))
            }
        }

        public func get_HeightMapScale() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapScale(pThis, &value))
            }
            return value
        }

        public func put_HeightMapScale(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapScale(pThis, value))
            }
        }

        public func get_LightColor() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightColor(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_LightColor(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightColor(pThis, .from(swift: value)))
            }
        }

        public func get_HeightMapKernelSize() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapKernelSize(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_HeightMapKernelSize(_ value: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapKernelSize(pThis, .from(swift: value)))
            }
        }

        public func get_HeightMapInterpolationMode() throws -> Win2D.CanvasImageInterpolation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapInterpolationMode(pThis, &value))
            }
            return value
        }

        public func put_HeightMapInterpolationMode(_ value: Win2D.CanvasImageInterpolation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapInterpolationMode(pThis, value))
            }
        }

        public func get_LightColorHdr() throws -> WindowsFoundation.Vector4 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector4 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightColorHdr(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_LightColorHdr(_ value: WindowsFoundation.Vector4) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightColorHdr(pThis, .from(swift: value)))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDistantSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IDpiCompensationEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect }

        public func get_InterpolationMode() throws -> Win2D.CanvasImageInterpolation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InterpolationMode(pThis, &value))
            }
            return value
        }

        public func put_InterpolationMode(_ value: Win2D.CanvasImageInterpolation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_InterpolationMode(pThis, value))
            }
        }

        public func get_BorderMode() throws -> Win2D.EffectBorderMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderMode(pThis, &value))
            }
            return value
        }

        public func put_BorderMode(_ value: Win2D.EffectBorderMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderMode(pThis, value))
            }
        }

        public func get_SourceDpi() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceDpi(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_SourceDpi(_ value: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SourceDpi(pThis, .from(swift: value)))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIDpiCompensationEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IEdgeDetectionEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect }

        public func get_Amount() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Amount(pThis, &value))
            }
            return value
        }

        public func put_Amount(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Amount(pThis, value))
            }
        }

        public func get_BlurAmount() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlurAmount(pThis, &value))
            }
            return value
        }

        public func put_BlurAmount(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlurAmount(pThis, value))
            }
        }

        public func get_Mode() throws -> Win2D.EdgeDetectionEffectMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEdgeDetectionEffectMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Mode(pThis, &value))
            }
            return value
        }

        public func put_Mode(_ value: Win2D.EdgeDetectionEffectMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Mode(pThis, value))
            }
        }

        public func get_OverlayEdges() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OverlayEdges(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_OverlayEdges(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OverlayEdges(pThis, .init(from: value)))
            }
        }

        public func get_AlphaMode() throws -> Win2D.CanvasAlphaMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaMode(pThis, &value))
            }
            return value
        }

        public func put_AlphaMode(_ value: Win2D.CanvasAlphaMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaMode(pThis, value))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEdgeDetectionEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IEffectTransferTable3D: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D }

        public func get_Device() throws -> Win2D.CanvasDevice? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3D.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Device(pThis, &valueAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas.CanvasDeviceBridge.from(abi: value)
        }

    }

    public class IEffectTransferTable3DStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics }

        public func CreateFromColors(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ colors: [UWP.Color], _ sizeB: Int32, _ sizeG: Int32, _ sizeR: Int32) throws -> Win2D.EffectTransferTable3D? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                try colors.toABI { _colors in
                    _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromColors(pThis, _resourceCreator, _colors.count, _colors.start, sizeB, sizeG, sizeR, &resultAbi))
                    }
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas_Effects.EffectTransferTable3DBridge.from(abi: result)
        }

        public func CreateFromBytes(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ bytes: [UInt8], _ sizeB: Int32, _ sizeG: Int32, _ sizeR: Int32, _ format: UWP.DirectXPixelFormat) throws -> Win2D.EffectTransferTable3D? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                try bytes.toABI { _bytes in
                    _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEffectTransferTable3DStatics.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromBytes(pThis, _resourceCreator, _bytes.count, _bytes.start, sizeB, sizeG, sizeR, format, &resultAbi))
                    }
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas_Effects.EffectTransferTable3DBridge.from(abi: result)
        }

    }

    public class IEmbossEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect }

        public func get_Amount() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Amount(pThis, &value))
            }
            return value
        }

        public func put_Amount(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Amount(pThis, value))
            }
        }

        public func get_Angle() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Angle(pThis, &value))
            }
            return value
        }

        public func put_Angle(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Angle(pThis, value))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIEmbossEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IExposureEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect }

        public func get_Exposure() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Exposure(pThis, &value))
            }
            return value
        }

        public func put_Exposure(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Exposure(pThis, value))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIExposureEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IGammaTransferEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect }

        public func get_RedAmplitude() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedAmplitude(pThis, &value))
            }
            return value
        }

        public func put_RedAmplitude(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RedAmplitude(pThis, value))
            }
        }

        public func get_RedExponent() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedExponent(pThis, &value))
            }
            return value
        }

        public func put_RedExponent(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RedExponent(pThis, value))
            }
        }

        public func get_RedOffset() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedOffset(pThis, &value))
            }
            return value
        }

        public func put_RedOffset(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RedOffset(pThis, value))
            }
        }

        public func get_RedDisable() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedDisable(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_RedDisable(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RedDisable(pThis, .init(from: value)))
            }
        }

        public func get_GreenAmplitude() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GreenAmplitude(pThis, &value))
            }
            return value
        }

        public func put_GreenAmplitude(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_GreenAmplitude(pThis, value))
            }
        }

        public func get_GreenExponent() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GreenExponent(pThis, &value))
            }
            return value
        }

        public func put_GreenExponent(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_GreenExponent(pThis, value))
            }
        }

        public func get_GreenOffset() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GreenOffset(pThis, &value))
            }
            return value
        }

        public func put_GreenOffset(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_GreenOffset(pThis, value))
            }
        }

        public func get_GreenDisable() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GreenDisable(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_GreenDisable(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_GreenDisable(pThis, .init(from: value)))
            }
        }

        public func get_BlueAmplitude() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlueAmplitude(pThis, &value))
            }
            return value
        }

        public func put_BlueAmplitude(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlueAmplitude(pThis, value))
            }
        }

        public func get_BlueExponent() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlueExponent(pThis, &value))
            }
            return value
        }

        public func put_BlueExponent(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlueExponent(pThis, value))
            }
        }

        public func get_BlueOffset() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlueOffset(pThis, &value))
            }
            return value
        }

        public func put_BlueOffset(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlueOffset(pThis, value))
            }
        }

        public func get_BlueDisable() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlueDisable(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_BlueDisable(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlueDisable(pThis, .init(from: value)))
            }
        }

        public func get_AlphaAmplitude() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaAmplitude(pThis, &value))
            }
            return value
        }

        public func put_AlphaAmplitude(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaAmplitude(pThis, value))
            }
        }

        public func get_AlphaExponent() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaExponent(pThis, &value))
            }
            return value
        }

        public func put_AlphaExponent(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaExponent(pThis, value))
            }
        }

        public func get_AlphaOffset() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaOffset(pThis, &value))
            }
            return value
        }

        public func put_AlphaOffset(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaOffset(pThis, value))
            }
        }

        public func get_AlphaDisable() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaDisable(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_AlphaDisable(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaDisable(pThis, .init(from: value)))
            }
        }

        public func get_ClampOutput() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClampOutput(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_ClampOutput(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClampOutput(pThis, .init(from: value)))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGammaTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IGaussianBlurEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect }

        public func get_BlurAmount() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlurAmount(pThis, &value))
            }
            return value
        }

        public func put_BlurAmount(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlurAmount(pThis, value))
            }
        }

        public func get_Optimization() throws -> Win2D.EffectOptimization {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Optimization(pThis, &value))
            }
            return value
        }

        public func put_Optimization(_ value: Win2D.EffectOptimization) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Optimization(pThis, value))
            }
        }

        public func get_BorderMode() throws -> Win2D.EffectBorderMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderMode(pThis, &value))
            }
            return value
        }

        public func put_BorderMode(_ value: Win2D.EffectBorderMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderMode(pThis, value))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGaussianBlurEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IGrayscaleEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIGrayscaleEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IHighlightsAndShadowsEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect }

        public func get_Highlights() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Highlights(pThis, &value))
            }
            return value
        }

        public func put_Highlights(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Highlights(pThis, value))
            }
        }

        public func get_Shadows() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Shadows(pThis, &value))
            }
            return value
        }

        public func put_Shadows(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Shadows(pThis, value))
            }
        }

        public func get_Clarity() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Clarity(pThis, &value))
            }
            return value
        }

        public func put_Clarity(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Clarity(pThis, value))
            }
        }

        public func get_MaskBlurAmount() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaskBlurAmount(pThis, &value))
            }
            return value
        }

        public func put_MaskBlurAmount(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaskBlurAmount(pThis, value))
            }
        }

        public func get_SourceIsLinearGamma() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceIsLinearGamma(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_SourceIsLinearGamma(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SourceIsLinearGamma(pThis, .init(from: value)))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHighlightsAndShadowsEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IHueRotationEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect }

        public func get_Angle() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Angle(pThis, &value))
            }
            return value
        }

        public func put_Angle(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Angle(pThis, value))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueRotationEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IHueToRgbEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect }

        public func get_SourceColorSpace() throws -> Win2D.EffectHueColorSpace {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceColorSpace(pThis, &value))
            }
            return value
        }

        public func put_SourceColorSpace(_ value: Win2D.EffectHueColorSpace) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SourceColorSpace(pThis, value))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIHueToRgbEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IInvertEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIInvertEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class ILinearTransferEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect }

        public func get_RedOffset() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedOffset(pThis, &value))
            }
            return value
        }

        public func put_RedOffset(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RedOffset(pThis, value))
            }
        }

        public func get_RedSlope() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedSlope(pThis, &value))
            }
            return value
        }

        public func put_RedSlope(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RedSlope(pThis, value))
            }
        }

        public func get_RedDisable() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedDisable(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_RedDisable(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RedDisable(pThis, .init(from: value)))
            }
        }

        public func get_GreenOffset() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GreenOffset(pThis, &value))
            }
            return value
        }

        public func put_GreenOffset(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_GreenOffset(pThis, value))
            }
        }

        public func get_GreenSlope() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GreenSlope(pThis, &value))
            }
            return value
        }

        public func put_GreenSlope(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_GreenSlope(pThis, value))
            }
        }

        public func get_GreenDisable() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GreenDisable(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_GreenDisable(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_GreenDisable(pThis, .init(from: value)))
            }
        }

        public func get_BlueOffset() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlueOffset(pThis, &value))
            }
            return value
        }

        public func put_BlueOffset(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlueOffset(pThis, value))
            }
        }

        public func get_BlueSlope() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlueSlope(pThis, &value))
            }
            return value
        }

        public func put_BlueSlope(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlueSlope(pThis, value))
            }
        }

        public func get_BlueDisable() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlueDisable(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_BlueDisable(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlueDisable(pThis, .init(from: value)))
            }
        }

        public func get_AlphaOffset() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaOffset(pThis, &value))
            }
            return value
        }

        public func put_AlphaOffset(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaOffset(pThis, value))
            }
        }

        public func get_AlphaSlope() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaSlope(pThis, &value))
            }
            return value
        }

        public func put_AlphaSlope(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaSlope(pThis, value))
            }
        }

        public func get_AlphaDisable() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaDisable(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_AlphaDisable(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaDisable(pThis, .init(from: value)))
            }
        }

        public func get_ClampOutput() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClampOutput(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_ClampOutput(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClampOutput(pThis, .init(from: value)))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILinearTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class ILuminanceToAlphaEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CILuminanceToAlphaEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IMorphologyEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect }

        public func get_Mode() throws -> Win2D.MorphologyEffectMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMorphologyEffectMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Mode(pThis, &value))
            }
            return value
        }

        public func put_Mode(_ value: Win2D.MorphologyEffectMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Mode(pThis, value))
            }
        }

        public func get_Width() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Width(pThis, &value))
            }
            return value
        }

        public func put_Width(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Width(pThis, value))
            }
        }

        public func get_Height() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Height(pThis, &value))
            }
            return value
        }

        public func put_Height(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Height(pThis, value))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIMorphologyEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IOpacityEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect }

        public func get_Opacity() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Opacity(pThis, &value))
            }
            return value
        }

        public func put_Opacity(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Opacity(pThis, value))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IOpacityEffectStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics }

        public func get_IsSupported() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityEffectStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSupported(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IOpacityMetadataEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect }

        public func get_OpaqueRectangle() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpaqueRectangle(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_OpaqueRectangle(_ value: WindowsFoundation.Rect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OpaqueRectangle(pThis, .from(swift: value)))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIOpacityMetadataEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IPixelShaderEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect }

        public func get_Properties() throws -> WindowsFoundation.AnyIMap<String, Any?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Properties(pThis, &valueAbi))
                }
            }
            return Win2D.__x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: value)
        }

        public func get_Source1() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source1(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func get_Source2() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source2(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func get_Source3() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source3(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func get_Source4() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source4(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func get_Source5() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source5(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func get_Source6() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source6(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func get_Source7() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source7(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func get_Source8() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source8(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source1(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source1(pThis, _source))
            }
        }

        public func put_Source2(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source2(pThis, _source))
            }
        }

        public func put_Source3(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source3(pThis, _source))
            }
        }

        public func put_Source4(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source4(pThis, _source))
            }
        }

        public func put_Source5(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source5(pThis, _source))
            }
        }

        public func put_Source6(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source6(pThis, _source))
            }
        }

        public func put_Source7(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source7(pThis, _source))
            }
        }

        public func put_Source8(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source8(pThis, _source))
            }
        }

        public func get_Source1Mapping() throws -> Win2D.SamplerCoordinateMapping {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source1Mapping(pThis, &value))
            }
            return value
        }

        public func get_Source2Mapping() throws -> Win2D.SamplerCoordinateMapping {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source2Mapping(pThis, &value))
            }
            return value
        }

        public func get_Source3Mapping() throws -> Win2D.SamplerCoordinateMapping {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source3Mapping(pThis, &value))
            }
            return value
        }

        public func get_Source4Mapping() throws -> Win2D.SamplerCoordinateMapping {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source4Mapping(pThis, &value))
            }
            return value
        }

        public func get_Source5Mapping() throws -> Win2D.SamplerCoordinateMapping {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source5Mapping(pThis, &value))
            }
            return value
        }

        public func get_Source6Mapping() throws -> Win2D.SamplerCoordinateMapping {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source6Mapping(pThis, &value))
            }
            return value
        }

        public func get_Source7Mapping() throws -> Win2D.SamplerCoordinateMapping {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source7Mapping(pThis, &value))
            }
            return value
        }

        public func get_Source8Mapping() throws -> Win2D.SamplerCoordinateMapping {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CSamplerCoordinateMapping = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source8Mapping(pThis, &value))
            }
            return value
        }

        public func put_Source1Mapping(_ value: Win2D.SamplerCoordinateMapping) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source1Mapping(pThis, value))
            }
        }

        public func put_Source2Mapping(_ value: Win2D.SamplerCoordinateMapping) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source2Mapping(pThis, value))
            }
        }

        public func put_Source3Mapping(_ value: Win2D.SamplerCoordinateMapping) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source3Mapping(pThis, value))
            }
        }

        public func put_Source4Mapping(_ value: Win2D.SamplerCoordinateMapping) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source4Mapping(pThis, value))
            }
        }

        public func put_Source5Mapping(_ value: Win2D.SamplerCoordinateMapping) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source5Mapping(pThis, value))
            }
        }

        public func put_Source6Mapping(_ value: Win2D.SamplerCoordinateMapping) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source6Mapping(pThis, value))
            }
        }

        public func put_Source7Mapping(_ value: Win2D.SamplerCoordinateMapping) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source7Mapping(pThis, value))
            }
        }

        public func put_Source8Mapping(_ value: Win2D.SamplerCoordinateMapping) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source8Mapping(pThis, value))
            }
        }

        public func get_Source1BorderMode() throws -> Win2D.EffectBorderMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source1BorderMode(pThis, &value))
            }
            return value
        }

        public func get_Source2BorderMode() throws -> Win2D.EffectBorderMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source2BorderMode(pThis, &value))
            }
            return value
        }

        public func get_Source3BorderMode() throws -> Win2D.EffectBorderMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source3BorderMode(pThis, &value))
            }
            return value
        }

        public func get_Source4BorderMode() throws -> Win2D.EffectBorderMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source4BorderMode(pThis, &value))
            }
            return value
        }

        public func get_Source5BorderMode() throws -> Win2D.EffectBorderMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source5BorderMode(pThis, &value))
            }
            return value
        }

        public func get_Source6BorderMode() throws -> Win2D.EffectBorderMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source6BorderMode(pThis, &value))
            }
            return value
        }

        public func get_Source7BorderMode() throws -> Win2D.EffectBorderMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source7BorderMode(pThis, &value))
            }
            return value
        }

        public func get_Source8BorderMode() throws -> Win2D.EffectBorderMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source8BorderMode(pThis, &value))
            }
            return value
        }

        public func put_Source1BorderMode(_ value: Win2D.EffectBorderMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source1BorderMode(pThis, value))
            }
        }

        public func put_Source2BorderMode(_ value: Win2D.EffectBorderMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source2BorderMode(pThis, value))
            }
        }

        public func put_Source3BorderMode(_ value: Win2D.EffectBorderMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source3BorderMode(pThis, value))
            }
        }

        public func put_Source4BorderMode(_ value: Win2D.EffectBorderMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source4BorderMode(pThis, value))
            }
        }

        public func put_Source5BorderMode(_ value: Win2D.EffectBorderMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source5BorderMode(pThis, value))
            }
        }

        public func put_Source6BorderMode(_ value: Win2D.EffectBorderMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source6BorderMode(pThis, value))
            }
        }

        public func put_Source7BorderMode(_ value: Win2D.EffectBorderMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source7BorderMode(pThis, value))
            }
        }

        public func put_Source8BorderMode(_ value: Win2D.EffectBorderMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source8BorderMode(pThis, value))
            }
        }

        public func get_MaxSamplerOffset() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaxSamplerOffset(pThis, &value))
            }
            return value
        }

        public func put_MaxSamplerOffset(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaxSamplerOffset(pThis, value))
            }
        }

        public func get_Source1Interpolation() throws -> Win2D.CanvasImageInterpolation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source1Interpolation(pThis, &value))
            }
            return value
        }

        public func get_Source2Interpolation() throws -> Win2D.CanvasImageInterpolation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source2Interpolation(pThis, &value))
            }
            return value
        }

        public func get_Source3Interpolation() throws -> Win2D.CanvasImageInterpolation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source3Interpolation(pThis, &value))
            }
            return value
        }

        public func get_Source4Interpolation() throws -> Win2D.CanvasImageInterpolation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source4Interpolation(pThis, &value))
            }
            return value
        }

        public func get_Source5Interpolation() throws -> Win2D.CanvasImageInterpolation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source5Interpolation(pThis, &value))
            }
            return value
        }

        public func get_Source6Interpolation() throws -> Win2D.CanvasImageInterpolation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source6Interpolation(pThis, &value))
            }
            return value
        }

        public func get_Source7Interpolation() throws -> Win2D.CanvasImageInterpolation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source7Interpolation(pThis, &value))
            }
            return value
        }

        public func get_Source8Interpolation() throws -> Win2D.CanvasImageInterpolation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source8Interpolation(pThis, &value))
            }
            return value
        }

        public func put_Source1Interpolation(_ value: Win2D.CanvasImageInterpolation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source1Interpolation(pThis, value))
            }
        }

        public func put_Source2Interpolation(_ value: Win2D.CanvasImageInterpolation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source2Interpolation(pThis, value))
            }
        }

        public func put_Source3Interpolation(_ value: Win2D.CanvasImageInterpolation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source3Interpolation(pThis, value))
            }
        }

        public func put_Source4Interpolation(_ value: Win2D.CanvasImageInterpolation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source4Interpolation(pThis, value))
            }
        }

        public func put_Source5Interpolation(_ value: Win2D.CanvasImageInterpolation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source5Interpolation(pThis, value))
            }
        }

        public func put_Source6Interpolation(_ value: Win2D.CanvasImageInterpolation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source6Interpolation(pThis, value))
            }
        }

        public func put_Source7Interpolation(_ value: Win2D.CanvasImageInterpolation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source7Interpolation(pThis, value))
            }
        }

        public func put_Source8Interpolation(_ value: Win2D.CanvasImageInterpolation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source8Interpolation(pThis, value))
            }
        }

        public func IsSupported(_ device: Win2D.CanvasDevice?) throws -> Bool {
            var result: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.IsSupported(pThis, RawPointer(device), &result))
            }
            return .init(from: result)
        }

    }

    public class IPixelShaderEffectFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory }

        public func Create(_ shaderCode: [UInt8]) throws -> IPixelShaderEffect {
            let (effect) = try ComPtrs.initialize { effectAbi in
                try shaderCode.toABI { _shaderCode in
                    _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPixelShaderEffectFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, _shaderCode.count, _shaderCode.start, &effectAbi))
                    }
                }
            }
            return IPixelShaderEffect(effect!)
        }

    }

    public class IPointDiffuseEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect }

        public func get_LightPosition() throws -> WindowsFoundation.Vector3 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector3 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightPosition(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_LightPosition(_ value: WindowsFoundation.Vector3) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightPosition(pThis, .from(swift: value)))
            }
        }

        public func get_DiffuseAmount() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DiffuseAmount(pThis, &value))
            }
            return value
        }

        public func put_DiffuseAmount(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DiffuseAmount(pThis, value))
            }
        }

        public func get_HeightMapScale() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapScale(pThis, &value))
            }
            return value
        }

        public func put_HeightMapScale(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapScale(pThis, value))
            }
        }

        public func get_LightColor() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightColor(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_LightColor(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightColor(pThis, .from(swift: value)))
            }
        }

        public func get_HeightMapKernelSize() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapKernelSize(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_HeightMapKernelSize(_ value: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapKernelSize(pThis, .from(swift: value)))
            }
        }

        public func get_HeightMapInterpolationMode() throws -> Win2D.CanvasImageInterpolation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapInterpolationMode(pThis, &value))
            }
            return value
        }

        public func put_HeightMapInterpolationMode(_ value: Win2D.CanvasImageInterpolation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapInterpolationMode(pThis, value))
            }
        }

        public func get_LightColorHdr() throws -> WindowsFoundation.Vector4 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector4 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightColorHdr(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_LightColorHdr(_ value: WindowsFoundation.Vector4) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightColorHdr(pThis, .from(swift: value)))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IPointSpecularEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect }

        public func get_LightPosition() throws -> WindowsFoundation.Vector3 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector3 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightPosition(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_LightPosition(_ value: WindowsFoundation.Vector3) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightPosition(pThis, .from(swift: value)))
            }
        }

        public func get_SpecularExponent() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SpecularExponent(pThis, &value))
            }
            return value
        }

        public func put_SpecularExponent(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SpecularExponent(pThis, value))
            }
        }

        public func get_SpecularAmount() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SpecularAmount(pThis, &value))
            }
            return value
        }

        public func put_SpecularAmount(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SpecularAmount(pThis, value))
            }
        }

        public func get_HeightMapScale() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapScale(pThis, &value))
            }
            return value
        }

        public func put_HeightMapScale(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapScale(pThis, value))
            }
        }

        public func get_LightColor() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightColor(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_LightColor(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightColor(pThis, .from(swift: value)))
            }
        }

        public func get_HeightMapKernelSize() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapKernelSize(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_HeightMapKernelSize(_ value: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapKernelSize(pThis, .from(swift: value)))
            }
        }

        public func get_HeightMapInterpolationMode() throws -> Win2D.CanvasImageInterpolation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapInterpolationMode(pThis, &value))
            }
            return value
        }

        public func put_HeightMapInterpolationMode(_ value: Win2D.CanvasImageInterpolation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapInterpolationMode(pThis, value))
            }
        }

        public func get_LightColorHdr() throws -> WindowsFoundation.Vector4 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector4 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightColorHdr(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_LightColorHdr(_ value: WindowsFoundation.Vector4) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightColorHdr(pThis, .from(swift: value)))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPointSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IPosterizeEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect }

        public func get_RedValueCount() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedValueCount(pThis, &value))
            }
            return value
        }

        public func put_RedValueCount(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RedValueCount(pThis, value))
            }
        }

        public func get_GreenValueCount() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GreenValueCount(pThis, &value))
            }
            return value
        }

        public func put_GreenValueCount(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_GreenValueCount(pThis, value))
            }
        }

        public func get_BlueValueCount() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlueValueCount(pThis, &value))
            }
            return value
        }

        public func put_BlueValueCount(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlueValueCount(pThis, value))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPosterizeEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IPremultiplyEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIPremultiplyEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IRgbToHueEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect }

        public func get_OutputColorSpace() throws -> Win2D.EffectHueColorSpace {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectHueColorSpace = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OutputColorSpace(pThis, &value))
            }
            return value
        }

        public func put_OutputColorSpace(_ value: Win2D.EffectHueColorSpace) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OutputColorSpace(pThis, value))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIRgbToHueEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class ISaturationEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect }

        public func get_Saturation() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Saturation(pThis, &value))
            }
            return value
        }

        public func put_Saturation(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Saturation(pThis, value))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISaturationEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IScaleEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect }

        public func get_Scale() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Scale(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_Scale(_ value: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Scale(pThis, .from(swift: value)))
            }
        }

        public func get_CenterPoint() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CenterPoint(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_CenterPoint(_ value: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CenterPoint(pThis, .from(swift: value)))
            }
        }

        public func get_InterpolationMode() throws -> Win2D.CanvasImageInterpolation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InterpolationMode(pThis, &value))
            }
            return value
        }

        public func put_InterpolationMode(_ value: Win2D.CanvasImageInterpolation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_InterpolationMode(pThis, value))
            }
        }

        public func get_BorderMode() throws -> Win2D.EffectBorderMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderMode(pThis, &value))
            }
            return value
        }

        public func put_BorderMode(_ value: Win2D.EffectBorderMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderMode(pThis, value))
            }
        }

        public func get_Sharpness() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Sharpness(pThis, &value))
            }
            return value
        }

        public func put_Sharpness(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Sharpness(pThis, value))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIScaleEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class ISepiaEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect }

        public func get_Intensity() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Intensity(pThis, &value))
            }
            return value
        }

        public func put_Intensity(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Intensity(pThis, value))
            }
        }

        public func get_AlphaMode() throws -> Win2D.CanvasAlphaMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaMode(pThis, &value))
            }
            return value
        }

        public func put_AlphaMode(_ value: Win2D.CanvasAlphaMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaMode(pThis, value))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISepiaEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IShadowEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect }

        public func get_BlurAmount() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlurAmount(pThis, &value))
            }
            return value
        }

        public func put_BlurAmount(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlurAmount(pThis, value))
            }
        }

        public func get_ShadowColor() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShadowColor(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_ShadowColor(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ShadowColor(pThis, .from(swift: value)))
            }
        }

        public func get_Optimization() throws -> Win2D.EffectOptimization {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectOptimization = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Optimization(pThis, &value))
            }
            return value
        }

        public func put_Optimization(_ value: Win2D.EffectOptimization) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Optimization(pThis, value))
            }
        }

        public func get_ShadowColorHdr() throws -> WindowsFoundation.Vector4 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector4 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ShadowColorHdr(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_ShadowColorHdr(_ value: WindowsFoundation.Vector4) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ShadowColorHdr(pThis, .from(swift: value)))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIShadowEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class ISharpenEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect }

        public func get_Amount() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Amount(pThis, &value))
            }
            return value
        }

        public func put_Amount(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Amount(pThis, value))
            }
        }

        public func get_Threshold() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Threshold(pThis, &value))
            }
            return value
        }

        public func put_Threshold(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Threshold(pThis, value))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISharpenEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class ISpotDiffuseEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect }

        public func get_LightPosition() throws -> WindowsFoundation.Vector3 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector3 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightPosition(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_LightPosition(_ value: WindowsFoundation.Vector3) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightPosition(pThis, .from(swift: value)))
            }
        }

        public func get_LightTarget() throws -> WindowsFoundation.Vector3 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector3 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightTarget(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_LightTarget(_ value: WindowsFoundation.Vector3) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightTarget(pThis, .from(swift: value)))
            }
        }

        public func get_Focus() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Focus(pThis, &value))
            }
            return value
        }

        public func put_Focus(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Focus(pThis, value))
            }
        }

        public func get_LimitingConeAngle() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LimitingConeAngle(pThis, &value))
            }
            return value
        }

        public func put_LimitingConeAngle(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LimitingConeAngle(pThis, value))
            }
        }

        public func get_DiffuseAmount() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DiffuseAmount(pThis, &value))
            }
            return value
        }

        public func put_DiffuseAmount(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DiffuseAmount(pThis, value))
            }
        }

        public func get_HeightMapScale() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapScale(pThis, &value))
            }
            return value
        }

        public func put_HeightMapScale(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapScale(pThis, value))
            }
        }

        public func get_LightColor() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightColor(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_LightColor(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightColor(pThis, .from(swift: value)))
            }
        }

        public func get_HeightMapKernelSize() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapKernelSize(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_HeightMapKernelSize(_ value: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapKernelSize(pThis, .from(swift: value)))
            }
        }

        public func get_HeightMapInterpolationMode() throws -> Win2D.CanvasImageInterpolation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapInterpolationMode(pThis, &value))
            }
            return value
        }

        public func put_HeightMapInterpolationMode(_ value: Win2D.CanvasImageInterpolation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapInterpolationMode(pThis, value))
            }
        }

        public func get_LightColorHdr() throws -> WindowsFoundation.Vector4 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector4 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightColorHdr(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_LightColorHdr(_ value: WindowsFoundation.Vector4) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightColorHdr(pThis, .from(swift: value)))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotDiffuseEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class ISpotSpecularEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect }

        public func get_LightPosition() throws -> WindowsFoundation.Vector3 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector3 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightPosition(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_LightPosition(_ value: WindowsFoundation.Vector3) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightPosition(pThis, .from(swift: value)))
            }
        }

        public func get_LightTarget() throws -> WindowsFoundation.Vector3 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector3 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightTarget(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_LightTarget(_ value: WindowsFoundation.Vector3) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightTarget(pThis, .from(swift: value)))
            }
        }

        public func get_Focus() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Focus(pThis, &value))
            }
            return value
        }

        public func put_Focus(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Focus(pThis, value))
            }
        }

        public func get_LimitingConeAngle() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LimitingConeAngle(pThis, &value))
            }
            return value
        }

        public func put_LimitingConeAngle(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LimitingConeAngle(pThis, value))
            }
        }

        public func get_SpecularExponent() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SpecularExponent(pThis, &value))
            }
            return value
        }

        public func put_SpecularExponent(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SpecularExponent(pThis, value))
            }
        }

        public func get_SpecularAmount() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SpecularAmount(pThis, &value))
            }
            return value
        }

        public func put_SpecularAmount(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SpecularAmount(pThis, value))
            }
        }

        public func get_HeightMapScale() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapScale(pThis, &value))
            }
            return value
        }

        public func put_HeightMapScale(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapScale(pThis, value))
            }
        }

        public func get_LightColor() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightColor(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_LightColor(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightColor(pThis, .from(swift: value)))
            }
        }

        public func get_HeightMapKernelSize() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapKernelSize(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_HeightMapKernelSize(_ value: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapKernelSize(pThis, .from(swift: value)))
            }
        }

        public func get_HeightMapInterpolationMode() throws -> Win2D.CanvasImageInterpolation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeightMapInterpolationMode(pThis, &value))
            }
            return value
        }

        public func put_HeightMapInterpolationMode(_ value: Win2D.CanvasImageInterpolation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HeightMapInterpolationMode(pThis, value))
            }
        }

        public func get_LightColorHdr() throws -> WindowsFoundation.Vector4 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector4 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LightColorHdr(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_LightColorHdr(_ value: WindowsFoundation.Vector4) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LightColorHdr(pThis, .from(swift: value)))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CISpotSpecularEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IStraightenEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect }

        public func get_Angle() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Angle(pThis, &value))
            }
            return value
        }

        public func put_Angle(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Angle(pThis, value))
            }
        }

        public func get_MaintainSize() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaintainSize(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_MaintainSize(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_MaintainSize(pThis, .init(from: value)))
            }
        }

        public func get_InterpolationMode() throws -> Win2D.CanvasImageInterpolation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InterpolationMode(pThis, &value))
            }
            return value
        }

        public func put_InterpolationMode(_ value: Win2D.CanvasImageInterpolation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_InterpolationMode(pThis, value))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIStraightenEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class ITableTransfer3DEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect }

        public func get_Table() throws -> Win2D.EffectTransferTable3D? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Table(pThis, &valueAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas_Effects.EffectTransferTable3DBridge.from(abi: value)
        }

        public func put_Table(_ value: Win2D.EffectTransferTable3D?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Table(pThis, RawPointer(value)))
            }
        }

        public func get_AlphaMode() throws -> Win2D.CanvasAlphaMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaMode(pThis, &value))
            }
            return value
        }

        public func put_AlphaMode(_ value: Win2D.CanvasAlphaMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaMode(pThis, value))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransfer3DEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class ITableTransferEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect }

        public func get_RedTable() throws -> [Float] {
            var valueElements: WinRTArrayAbi<FLOAT> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedTable(pThis, &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func put_RedTable(_ valueElements: [Float]) throws {
            try valueElements.toABI { _valueElements in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.put_RedTable(pThis, _valueElements.count, _valueElements.start))
                }
            }
        }

        public func get_RedDisable() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RedDisable(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_RedDisable(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RedDisable(pThis, .init(from: value)))
            }
        }

        public func get_GreenTable() throws -> [Float] {
            var valueElements: WinRTArrayAbi<FLOAT> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GreenTable(pThis, &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func put_GreenTable(_ valueElements: [Float]) throws {
            try valueElements.toABI { _valueElements in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.put_GreenTable(pThis, _valueElements.count, _valueElements.start))
                }
            }
        }

        public func get_GreenDisable() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GreenDisable(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_GreenDisable(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_GreenDisable(pThis, .init(from: value)))
            }
        }

        public func get_BlueTable() throws -> [Float] {
            var valueElements: WinRTArrayAbi<FLOAT> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlueTable(pThis, &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func put_BlueTable(_ valueElements: [Float]) throws {
            try valueElements.toABI { _valueElements in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlueTable(pThis, _valueElements.count, _valueElements.start))
                }
            }
        }

        public func get_BlueDisable() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BlueDisable(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_BlueDisable(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BlueDisable(pThis, .init(from: value)))
            }
        }

        public func get_AlphaTable() throws -> [Float] {
            var valueElements: WinRTArrayAbi<FLOAT> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaTable(pThis, &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func put_AlphaTable(_ valueElements: [Float]) throws {
            try valueElements.toABI { _valueElements in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaTable(pThis, _valueElements.count, _valueElements.start))
                }
            }
        }

        public func get_AlphaDisable() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaDisable(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_AlphaDisable(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_AlphaDisable(pThis, .init(from: value)))
            }
        }

        public func get_ClampOutput() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClampOutput(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_ClampOutput(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClampOutput(pThis, .init(from: value)))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITableTransferEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class ITemperatureAndTintEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect }

        public func get_Temperature() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Temperature(pThis, &value))
            }
            return value
        }

        public func put_Temperature(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Temperature(pThis, value))
            }
        }

        public func get_Tint() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Tint(pThis, &value))
            }
            return value
        }

        public func put_Tint(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Tint(pThis, value))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITemperatureAndTintEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class ITileEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect }

        public func get_SourceRectangle() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceRectangle(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_SourceRectangle(_ value: WindowsFoundation.Rect) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SourceRectangle(pThis, .from(swift: value)))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITileEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class ITintEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect }

        public func get_Color() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Color(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_Color(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Color(pThis, .from(swift: value)))
            }
        }

        public func get_ClampOutput() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClampOutput(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_ClampOutput(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ClampOutput(pThis, .init(from: value)))
            }
        }

        public func get_ColorHdr() throws -> WindowsFoundation.Vector4 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector4 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColorHdr(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_ColorHdr(_ value: WindowsFoundation.Vector4) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ColorHdr(pThis, .from(swift: value)))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class ITintEffectStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics }

        public func get_IsSupported() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITintEffectStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSupported(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class ITransform2DEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect }

        public func get_InterpolationMode() throws -> Win2D.CanvasImageInterpolation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InterpolationMode(pThis, &value))
            }
            return value
        }

        public func put_InterpolationMode(_ value: Win2D.CanvasImageInterpolation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_InterpolationMode(pThis, value))
            }
        }

        public func get_BorderMode() throws -> Win2D.EffectBorderMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderMode(pThis, &value))
            }
            return value
        }

        public func put_BorderMode(_ value: Win2D.EffectBorderMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderMode(pThis, value))
            }
        }

        public func get_TransformMatrix() throws -> WindowsFoundation.Matrix3x2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TransformMatrix(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_TransformMatrix(_ value: WindowsFoundation.Matrix3x2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TransformMatrix(pThis, .from(swift: value)))
            }
        }

        public func get_Sharpness() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Sharpness(pThis, &value))
            }
            return value
        }

        public func put_Sharpness(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Sharpness(pThis, value))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform2DEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class ITransform3DEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect }

        public func get_InterpolationMode() throws -> Win2D.CanvasImageInterpolation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InterpolationMode(pThis, &value))
            }
            return value
        }

        public func put_InterpolationMode(_ value: Win2D.CanvasImageInterpolation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_InterpolationMode(pThis, value))
            }
        }

        public func get_BorderMode() throws -> Win2D.EffectBorderMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CEffectBorderMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BorderMode(pThis, &value))
            }
            return value
        }

        public func put_BorderMode(_ value: Win2D.EffectBorderMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_BorderMode(pThis, value))
            }
        }

        public func get_TransformMatrix() throws -> WindowsFoundation.Matrix4x4 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CMatrix4x4 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TransformMatrix(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_TransformMatrix(_ value: WindowsFoundation.Matrix4x4) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TransformMatrix(pThis, .from(swift: value)))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITransform3DEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class ITurbulenceEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect }

        public func get_Offset() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Offset(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_Offset(_ value: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Offset(pThis, .from(swift: value)))
            }
        }

        public func get_Size() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_Size(_ value: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Size(pThis, .from(swift: value)))
            }
        }

        public func get_Frequency() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Frequency(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_Frequency(_ value: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Frequency(pThis, .from(swift: value)))
            }
        }

        public func get_Octaves() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Octaves(pThis, &value))
            }
            return value
        }

        public func put_Octaves(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Octaves(pThis, value))
            }
        }

        public func get_Seed() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Seed(pThis, &value))
            }
            return value
        }

        public func put_Seed(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Seed(pThis, value))
            }
        }

        public func get_Noise() throws -> Win2D.TurbulenceEffectNoise {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CTurbulenceEffectNoise = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Noise(pThis, &value))
            }
            return value
        }

        public func put_Noise(_ value: Win2D.TurbulenceEffectNoise) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Noise(pThis, value))
            }
        }

        public func get_Tileable() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Tileable(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_Tileable(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CITurbulenceEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Tileable(pThis, .init(from: value)))
            }
        }

    }

    public class IUnPremultiplyEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIUnPremultiplyEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

    public class IVignetteEffect: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect }

        public func get_Color() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Color(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_Color(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Color(pThis, .from(swift: value)))
            }
        }

        public func get_Amount() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Amount(pThis, &value))
            }
            return value
        }

        public func put_Amount(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Amount(pThis, value))
            }
        }

        public func get_Curve() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Curve(pThis, &value))
            }
            return value
        }

        public func put_Curve(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Curve(pThis, value))
            }
        }

        public func get_ColorHdr() throws -> WindowsFoundation.Vector4 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector4 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColorHdr(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_ColorHdr(_ value: WindowsFoundation.Vector4) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ColorHdr(pThis, .from(swift: value)))
            }
        }

        public func get_Source() throws -> UWP.AnyIGraphicsEffectSource? {
            let (source) = try ComPtrs.initialize { sourceAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Source(pThis, &sourceAbi))
                }
            }
            return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: source)
        }

        public func put_Source(_ source: UWP.AnyIGraphicsEffectSource?) throws {
            let sourceWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(source)
            let _source = try! sourceWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CIVignetteEffect.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Source(pThis, _source))
            }
        }

    }

}
extension __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementSimpleProfile {
        public static func from(swift: Win2D.ColorManagementSimpleProfile) -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementSimpleProfile {
            .init(RedPrimary: .from(swift: swift.redPrimary), GreenPrimary: .from(swift: swift.greenPrimary), BluePrimary: .from(swift: swift.bluePrimary), WhitePointXZ: .from(swift: swift.whitePointXZ), Gamma: swift.gamma)
        }
    }
    extension __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMatrix5x4 {
        public static func from(swift: Win2D.Matrix5x4) -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CMatrix5x4 {
            .init(M11: swift.m11, M12: swift.m12, M13: swift.m13, M14: swift.m14, M21: swift.m21, M22: swift.m22, M23: swift.m23, M24: swift.m24, M31: swift.m31, M32: swift.m32, M33: swift.m33, M34: swift.m34, M41: swift.m41, M42: swift.m42, M43: swift.m43, M44: swift.m44, M51: swift.m51, M52: swift.m52, M53: swift.m53, M54: swift.m54)
        }
    }
    