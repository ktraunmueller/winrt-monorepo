// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush: WindowsFoundation.IID {
    .init(Data1: 0xF5D58591, Data2: 0xC803, Data3: 0x41B4, Data4: ( 0x87,0x8E,0x79,0xD9,0x2A,0xB1,0x32,0x95 ))// F5D58591-C803-41B4-878E-79D92AB13295
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush: WindowsFoundation.IID {
    .init(Data1: 0x5A21C4E7, Data2: 0xD450, Data3: 0x4942, Data4: ( 0x8B,0xBD,0xF0,0x17,0x09,0x7A,0xB7,0x63 ))// 5A21C4E7-D450-4942-8BBD-F017097AB763
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory: WindowsFoundation.IID {
    .init(Data1: 0xC40CCB59, Data2: 0x1B87, Data3: 0x4394, Data4: ( 0xA6,0xA6,0xEC,0xD2,0x78,0xE8,0x77,0xD6 ))// C40CCB59-1B87-4394-A6A6-ECD278E877D6
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush: WindowsFoundation.IID {
    .init(Data1: 0xA4FFBCB1, Data2: 0xEC22, Data3: 0x48C8, Data4: ( 0xB1,0xAF,0x09,0xBC,0xFD,0x34,0xEE,0xBD ))// A4FFBCB1-EC22-48C8-B1AF-09BCFD34EEBD
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory: WindowsFoundation.IID {
    .init(Data1: 0xA2E8E34A, Data2: 0x8592, Data3: 0x4B9D, Data4: ( 0xBA,0x1C,0x00,0xD3,0xF3,0xC3,0x4F,0x54 ))// A2E8E34A-8592-4B9D-BA1C-00D3F3C34F54
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics: WindowsFoundation.IID {
    .init(Data1: 0xE9DE3392, Data2: 0x8FBF, Data3: 0x478C, Data4: ( 0x8E,0x6A,0xD0,0xA0,0xEA,0x75,0x3B,0x37 ))// E9DE3392-8FBF-478C-8E6A-D0A0EA753B37
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush: WindowsFoundation.IID {
    .init(Data1: 0x4D27D756, Data2: 0x14A9, Data3: 0x4EB7, Data4: ( 0x97,0x3F,0xE6,0x61,0x4D,0x4F,0x89,0xE7 ))// 4D27D756-14A9-4EB7-973F-E6614D4F89E7
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory: WindowsFoundation.IID {
    .init(Data1: 0x7933A51F, Data2: 0xA910, Data3: 0x4548, Data4: ( 0x84,0x9F,0x42,0xDD,0xEC,0x46,0x6F,0x41 ))// 7933A51F-A910-4548-849F-42DDEC466F41
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics: WindowsFoundation.IID {
    .init(Data1: 0x3B0D4DAE, Data2: 0x3E21, Data3: 0x4818, Data4: ( 0x99,0xB4,0x77,0x9A,0xCA,0xAF,0x18,0xBE ))// 3B0D4DAE-3E21-4818-99B4-779ACAAF18BE
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush: WindowsFoundation.IID {
    .init(Data1: 0x8BC30F87, Data2: 0xBAD5, Data3: 0x4871, Data4: ( 0x88,0xB8,0x9F,0xE3,0xC6,0x3D,0x20,0x4A ))// 8BC30F87-BAD5-4871-88B8-9FE3C63D204A
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory: WindowsFoundation.IID {
    .init(Data1: 0x8ABF4780, Data2: 0x4EDD, Data3: 0x4F2B, Data4: ( 0xBF,0x63,0x2C,0x38,0x51,0x15,0xB2,0x01 ))// 8ABF4780-4EDD-4F2B-BF63-2C385115B201
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics: WindowsFoundation.IID {
    .init(Data1: 0x629B7244, Data2: 0x5B9E, Data3: 0x4EF8, Data4: ( 0x8E,0x09,0x26,0x47,0x14,0x20,0x1E,0xE8 ))// 629B7244-5B9E-4EF8-8E09-264714201EE8
}

@_spi(WinRTInternal)
public enum __ABI_Microsoft_Graphics_Canvas_Brushes {
    public class ICanvasBrush: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush }

        open func get_Opacity() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Opacity(pThis, &value))
            }
            return value
        }

        open func put_Opacity(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Opacity(pThis, value))
            }
        }

        open func get_Transform() throws -> WindowsFoundation.Matrix3x2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Transform(pThis, &value))
            }
            return .from(abi: value)
        }

        open func put_Transform(_ value: WindowsFoundation.Matrix3x2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Transform(pThis, .from(swift: value)))
            }
        }

        open func get_Device() throws -> Win2D.CanvasDevice? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrush.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Device(pThis, &valueAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas.CanvasDeviceBridge.from(abi: value)
        }

    }

    internal static var ICanvasBrushVTable: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasBrushVtbl = .init(
        QueryInterface: { ICanvasBrushWrapper.queryInterface($0, $1, $2) },
        AddRef: { ICanvasBrushWrapper.addRef($0) },
        Release: { ICanvasBrushWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper.IID
            iids[3] = __ABI_Windows_Foundation.IClosableWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.Graphics.Canvas.Brushes.ICanvasBrush").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_Opacity: {
            guard let __unwrapped__instance = ICanvasBrushWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.opacity
            $1?.initialize(to: value)
            return S_OK
        },

        put_Opacity: {
            guard let __unwrapped__instance = ICanvasBrushWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: Float = $1
            __unwrapped__instance.opacity = value
            return S_OK
        },

        get_Transform: {
            guard let __unwrapped__instance = ICanvasBrushWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.transform
            $1?.initialize(to: .from(swift: value))
            return S_OK
        },

        put_Transform: {
            guard let __unwrapped__instance = ICanvasBrushWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value: WindowsFoundation.Matrix3x2 = .from(abi: $1)
            __unwrapped__instance.transform = value
            return S_OK
        },

        get_Device: {
            guard let __unwrapped__instance = ICanvasBrushWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.device
            value?.copyTo($1)
            return S_OK
        }
    )

    public typealias ICanvasBrushWrapper = InterfaceWrapperBase<__IMPL_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushBridge>
    public class ICanvasImageBrush: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush }

        public func get_Image() throws -> Win2D.AnyICanvasImage? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Image(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_Graphics_Canvas.ICanvasImageWrapper.unwrapFrom(abi: value)
        }

        public func put_Image(_ value: Win2D.AnyICanvasImage?) throws {
            let valueWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasImageWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Image(pThis, _value))
            }
        }

        public func get_ExtendX() throws -> Win2D.CanvasEdgeBehavior {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendX(pThis, &value))
            }
            return value
        }

        public func put_ExtendX(_ value: Win2D.CanvasEdgeBehavior) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExtendX(pThis, value))
            }
        }

        public func get_ExtendY() throws -> Win2D.CanvasEdgeBehavior {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ExtendY(pThis, &value))
            }
            return value
        }

        public func put_ExtendY(_ value: Win2D.CanvasEdgeBehavior) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ExtendY(pThis, value))
            }
        }

        public func get_SourceRectangle() throws -> WindowsFoundation.Rect? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SourceRectangle(pThis, &valueAbi))
                }
            }
            return Win2D.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectWrapper.unwrapFrom(abi: value)
        }

        public func put_SourceRectangle(_ value: WindowsFoundation.Rect?) throws {
            let valueWrapper = Win2D.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_SourceRectangle(pThis, _value))
            }
        }

        public func get_Interpolation() throws -> Win2D.CanvasImageInterpolation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasImageInterpolation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Interpolation(pThis, &value))
            }
            return value
        }

        public func put_Interpolation(_ value: Win2D.CanvasImageInterpolation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Interpolation(pThis, value))
            }
        }

    }

    public class ICanvasImageBrushFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory }

        public func Create(_ resourceCreator: Win2D.AnyICanvasResourceCreator?) throws -> ICanvasImageBrush {
            let (canvasImageBrush) = try ComPtrs.initialize { canvasImageBrushAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, _resourceCreator, &canvasImageBrushAbi))
                }
            }
            return ICanvasImageBrush(canvasImageBrush!)
        }

        public func CreateWithImage(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ image: Win2D.AnyICanvasImage?) throws -> ICanvasImageBrush {
            let (canvasImageBrush) = try ComPtrs.initialize { canvasImageBrushAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let imageWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasImageWrapper(image)
                let _image = try! imageWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasImageBrushFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithImage(pThis, _resourceCreator, _image, &canvasImageBrushAbi))
                }
            }
            return ICanvasImageBrush(canvasImageBrush!)
        }

    }

    public class ICanvasLinearGradientBrush: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush }

        public func get_StartPoint() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StartPoint(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_StartPoint(_ value: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_StartPoint(pThis, .from(swift: value)))
            }
        }

        public func get_EndPoint() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EndPoint(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_EndPoint(_ value: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_EndPoint(pThis, .from(swift: value)))
            }
        }

        public func get_Stops() throws -> [Win2D.CanvasGradientStop] {
            var valueElements: WinRTArrayAbi<__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Stops(pThis, &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func get_StopsHdr() throws -> [Win2D.CanvasGradientStopHdr] {
            var valueElements: WinRTArrayAbi<__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StopsHdr(pThis, &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func get_EdgeBehavior() throws -> Win2D.CanvasEdgeBehavior {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EdgeBehavior(pThis, &value))
            }
            return value
        }

        public func get_PreInterpolationSpace() throws -> Win2D.CanvasColorSpace {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreInterpolationSpace(pThis, &value))
            }
            return value
        }

        public func get_PostInterpolationSpace() throws -> Win2D.CanvasColorSpace {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PostInterpolationSpace(pThis, &value))
            }
            return value
        }

        public func get_BufferPrecision() throws -> Win2D.CanvasBufferPrecision {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BufferPrecision(pThis, &value))
            }
            return value
        }

        public func get_AlphaMode() throws -> Win2D.CanvasAlphaMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaMode(pThis, &value))
            }
            return value
        }

    }

    public class ICanvasLinearGradientBrushFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory }

        public func CreateSimple(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ startColor: UWP.Color, _ endColor: UWP.Color) throws -> ICanvasLinearGradientBrush {
            let (canvasLinearGradientBrush) = try ComPtrs.initialize { canvasLinearGradientBrushAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSimple(pThis, _resourceCreator, .from(swift: startColor), .from(swift: endColor), &canvasLinearGradientBrushAbi))
                }
            }
            return ICanvasLinearGradientBrush(canvasLinearGradientBrush!)
        }

        public func CreateWithStops(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ gradientStops: [Win2D.CanvasGradientStop]) throws -> ICanvasLinearGradientBrush {
            let (canvasLinearGradientBrush) = try ComPtrs.initialize { canvasLinearGradientBrushAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                try gradientStops.toABI { _gradientStops in
                    _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithStops(pThis, _resourceCreator, _gradientStops.count, _gradientStops.start, &canvasLinearGradientBrushAbi))
                    }
                }
            }
            return ICanvasLinearGradientBrush(canvasLinearGradientBrush!)
        }

        public func CreateWithEdgeBehaviorAndAlphaMode(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ gradientStops: [Win2D.CanvasGradientStop], _ edgeBehavior: Win2D.CanvasEdgeBehavior, _ alphaMode: Win2D.CanvasAlphaMode) throws -> ICanvasLinearGradientBrush {
            let (canvasLinearGradientBrush) = try ComPtrs.initialize { canvasLinearGradientBrushAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                try gradientStops.toABI { _gradientStops in
                    _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithEdgeBehaviorAndAlphaMode(pThis, _resourceCreator, _gradientStops.count, _gradientStops.start, edgeBehavior, alphaMode, &canvasLinearGradientBrushAbi))
                    }
                }
            }
            return ICanvasLinearGradientBrush(canvasLinearGradientBrush!)
        }

        public func CreateWithEdgeBehaviorAndInterpolationOptions(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ gradientStops: [Win2D.CanvasGradientStop], _ edgeBehavior: Win2D.CanvasEdgeBehavior, _ alphaMode: Win2D.CanvasAlphaMode, _ preInterpolationSpace: Win2D.CanvasColorSpace, _ postInterpolationSpace: Win2D.CanvasColorSpace, _ bufferPrecision: Win2D.CanvasBufferPrecision) throws -> ICanvasLinearGradientBrush {
            let (canvasLinearGradientBrush) = try ComPtrs.initialize { canvasLinearGradientBrushAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                try gradientStops.toABI { _gradientStops in
                    _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithEdgeBehaviorAndInterpolationOptions(pThis, _resourceCreator, _gradientStops.count, _gradientStops.start, edgeBehavior, alphaMode, preInterpolationSpace, postInterpolationSpace, bufferPrecision, &canvasLinearGradientBrushAbi))
                    }
                }
            }
            return ICanvasLinearGradientBrush(canvasLinearGradientBrush!)
        }

    }

    public class ICanvasLinearGradientBrushStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics }

        public func CreateHdrSimple(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ startColorHdr: WindowsFoundation.Vector4, _ endColorHdr: WindowsFoundation.Vector4) throws -> Win2D.CanvasLinearGradientBrush? {
            let (canvasLinearGradientBrush) = try ComPtrs.initialize { canvasLinearGradientBrushAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateHdrSimple(pThis, _resourceCreator, .from(swift: startColorHdr), .from(swift: endColorHdr), &canvasLinearGradientBrushAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas_Brushes.CanvasLinearGradientBrushBridge.from(abi: canvasLinearGradientBrush)
        }

        public func CreateHdrWithStops(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ gradientStopsHdr: [Win2D.CanvasGradientStopHdr]) throws -> Win2D.CanvasLinearGradientBrush? {
            let (canvasLinearGradientBrush) = try ComPtrs.initialize { canvasLinearGradientBrushAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                try gradientStopsHdr.toABI { _gradientStopsHdr in
                    _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateHdrWithStops(pThis, _resourceCreator, _gradientStopsHdr.count, _gradientStopsHdr.start, &canvasLinearGradientBrushAbi))
                    }
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas_Brushes.CanvasLinearGradientBrushBridge.from(abi: canvasLinearGradientBrush)
        }

        public func CreateHdrWithEdgeBehaviorAndAlphaMode(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ gradientStopsHdr: [Win2D.CanvasGradientStopHdr], _ edgeBehavior: Win2D.CanvasEdgeBehavior, _ alphaMode: Win2D.CanvasAlphaMode) throws -> Win2D.CanvasLinearGradientBrush? {
            let (canvasLinearGradientBrush) = try ComPtrs.initialize { canvasLinearGradientBrushAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                try gradientStopsHdr.toABI { _gradientStopsHdr in
                    _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateHdrWithEdgeBehaviorAndAlphaMode(pThis, _resourceCreator, _gradientStopsHdr.count, _gradientStopsHdr.start, edgeBehavior, alphaMode, &canvasLinearGradientBrushAbi))
                    }
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas_Brushes.CanvasLinearGradientBrushBridge.from(abi: canvasLinearGradientBrush)
        }

        public func CreateHdrWithEdgeBehaviorAndInterpolationOptions(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ gradientStopsHdr: [Win2D.CanvasGradientStopHdr], _ edgeBehavior: Win2D.CanvasEdgeBehavior, _ alphaMode: Win2D.CanvasAlphaMode, _ preInterpolationSpace: Win2D.CanvasColorSpace, _ postInterpolationSpace: Win2D.CanvasColorSpace, _ bufferPrecision: Win2D.CanvasBufferPrecision) throws -> Win2D.CanvasLinearGradientBrush? {
            let (canvasLinearGradientBrush) = try ComPtrs.initialize { canvasLinearGradientBrushAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                try gradientStopsHdr.toABI { _gradientStopsHdr in
                    _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateHdrWithEdgeBehaviorAndInterpolationOptions(pThis, _resourceCreator, _gradientStopsHdr.count, _gradientStopsHdr.start, edgeBehavior, alphaMode, preInterpolationSpace, postInterpolationSpace, bufferPrecision, &canvasLinearGradientBrushAbi))
                    }
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas_Brushes.CanvasLinearGradientBrushBridge.from(abi: canvasLinearGradientBrush)
        }

        public func CreateRainbow(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ eldritchness: Float) throws -> Win2D.CanvasLinearGradientBrush? {
            let (canvasLinearGradientBrush) = try ComPtrs.initialize { canvasLinearGradientBrushAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasLinearGradientBrushStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateRainbow(pThis, _resourceCreator, eldritchness, &canvasLinearGradientBrushAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas_Brushes.CanvasLinearGradientBrushBridge.from(abi: canvasLinearGradientBrush)
        }

    }

    public class ICanvasRadialGradientBrush: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush }

        public func get_Center() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Center(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_Center(_ value: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Center(pThis, .from(swift: value)))
            }
        }

        public func get_OriginOffset() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OriginOffset(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_OriginOffset(_ value: WindowsFoundation.Vector2) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OriginOffset(pThis, .from(swift: value)))
            }
        }

        public func get_RadiusX() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RadiusX(pThis, &value))
            }
            return value
        }

        public func put_RadiusX(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RadiusX(pThis, value))
            }
        }

        public func get_RadiusY() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RadiusY(pThis, &value))
            }
            return value
        }

        public func put_RadiusY(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RadiusY(pThis, value))
            }
        }

        public func get_Stops() throws -> [Win2D.CanvasGradientStop] {
            var valueElements: WinRTArrayAbi<__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Stops(pThis, &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func get_StopsHdr() throws -> [Win2D.CanvasGradientStopHdr] {
            var valueElements: WinRTArrayAbi<__x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StopsHdr(pThis, &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func get_EdgeBehavior() throws -> Win2D.CanvasEdgeBehavior {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasEdgeBehavior = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_EdgeBehavior(pThis, &value))
            }
            return value
        }

        public func get_PreInterpolationSpace() throws -> Win2D.CanvasColorSpace {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PreInterpolationSpace(pThis, &value))
            }
            return value
        }

        public func get_PostInterpolationSpace() throws -> Win2D.CanvasColorSpace {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasColorSpace = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PostInterpolationSpace(pThis, &value))
            }
            return value
        }

        public func get_BufferPrecision() throws -> Win2D.CanvasBufferPrecision {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BufferPrecision(pThis, &value))
            }
            return value
        }

        public func get_AlphaMode() throws -> Win2D.CanvasAlphaMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasAlphaMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AlphaMode(pThis, &value))
            }
            return value
        }

    }

    public class ICanvasRadialGradientBrushFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory }

        public func CreateSimple(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ startColor: UWP.Color, _ endColor: UWP.Color) throws -> ICanvasRadialGradientBrush {
            let (canvasRadialGradientBrush) = try ComPtrs.initialize { canvasRadialGradientBrushAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateSimple(pThis, _resourceCreator, .from(swift: startColor), .from(swift: endColor), &canvasRadialGradientBrushAbi))
                }
            }
            return ICanvasRadialGradientBrush(canvasRadialGradientBrush!)
        }

        public func CreateWithStops(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ gradientStops: [Win2D.CanvasGradientStop]) throws -> ICanvasRadialGradientBrush {
            let (canvasRadialGradientBrush) = try ComPtrs.initialize { canvasRadialGradientBrushAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                try gradientStops.toABI { _gradientStops in
                    _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithStops(pThis, _resourceCreator, _gradientStops.count, _gradientStops.start, &canvasRadialGradientBrushAbi))
                    }
                }
            }
            return ICanvasRadialGradientBrush(canvasRadialGradientBrush!)
        }

        public func CreateWithEdgeBehaviorAndAlphaMode(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ gradientStops: [Win2D.CanvasGradientStop], _ edgeBehavior: Win2D.CanvasEdgeBehavior, _ alphaMode: Win2D.CanvasAlphaMode) throws -> ICanvasRadialGradientBrush {
            let (canvasRadialGradientBrush) = try ComPtrs.initialize { canvasRadialGradientBrushAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                try gradientStops.toABI { _gradientStops in
                    _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithEdgeBehaviorAndAlphaMode(pThis, _resourceCreator, _gradientStops.count, _gradientStops.start, edgeBehavior, alphaMode, &canvasRadialGradientBrushAbi))
                    }
                }
            }
            return ICanvasRadialGradientBrush(canvasRadialGradientBrush!)
        }

        public func CreateWithEdgeBehaviorAndInterpolationOptions(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ gradientStops: [Win2D.CanvasGradientStop], _ edgeBehavior: Win2D.CanvasEdgeBehavior, _ alphaMode: Win2D.CanvasAlphaMode, _ preInterpolationSpace: Win2D.CanvasColorSpace, _ postInterpolationSpace: Win2D.CanvasColorSpace, _ bufferPrecision: Win2D.CanvasBufferPrecision) throws -> ICanvasRadialGradientBrush {
            let (canvasRadialGradientBrush) = try ComPtrs.initialize { canvasRadialGradientBrushAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                try gradientStops.toABI { _gradientStops in
                    _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushFactory.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithEdgeBehaviorAndInterpolationOptions(pThis, _resourceCreator, _gradientStops.count, _gradientStops.start, edgeBehavior, alphaMode, preInterpolationSpace, postInterpolationSpace, bufferPrecision, &canvasRadialGradientBrushAbi))
                    }
                }
            }
            return ICanvasRadialGradientBrush(canvasRadialGradientBrush!)
        }

    }

    public class ICanvasRadialGradientBrushStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics }

        public func CreateHdrSimple(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ startColorHdr: WindowsFoundation.Vector4, _ endColorHdr: WindowsFoundation.Vector4) throws -> Win2D.CanvasRadialGradientBrush? {
            let (canvasRadialGradientBrush) = try ComPtrs.initialize { canvasRadialGradientBrushAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateHdrSimple(pThis, _resourceCreator, .from(swift: startColorHdr), .from(swift: endColorHdr), &canvasRadialGradientBrushAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas_Brushes.CanvasRadialGradientBrushBridge.from(abi: canvasRadialGradientBrush)
        }

        public func CreateHdrWithStops(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ gradientStops: [Win2D.CanvasGradientStopHdr]) throws -> Win2D.CanvasRadialGradientBrush? {
            let (canvasRadialGradientBrush) = try ComPtrs.initialize { canvasRadialGradientBrushAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                try gradientStops.toABI { _gradientStops in
                    _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateHdrWithStops(pThis, _resourceCreator, _gradientStops.count, _gradientStops.start, &canvasRadialGradientBrushAbi))
                    }
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas_Brushes.CanvasRadialGradientBrushBridge.from(abi: canvasRadialGradientBrush)
        }

        public func CreateHdrWithEdgeBehaviorAndAlphaMode(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ gradientStops: [Win2D.CanvasGradientStopHdr], _ edgeBehavior: Win2D.CanvasEdgeBehavior, _ alphaMode: Win2D.CanvasAlphaMode) throws -> Win2D.CanvasRadialGradientBrush? {
            let (canvasRadialGradientBrush) = try ComPtrs.initialize { canvasRadialGradientBrushAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                try gradientStops.toABI { _gradientStops in
                    _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateHdrWithEdgeBehaviorAndAlphaMode(pThis, _resourceCreator, _gradientStops.count, _gradientStops.start, edgeBehavior, alphaMode, &canvasRadialGradientBrushAbi))
                    }
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas_Brushes.CanvasRadialGradientBrushBridge.from(abi: canvasRadialGradientBrush)
        }

        public func CreateHdrWithEdgeBehaviorAndInterpolationOptions(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ gradientStops: [Win2D.CanvasGradientStopHdr], _ edgeBehavior: Win2D.CanvasEdgeBehavior, _ alphaMode: Win2D.CanvasAlphaMode, _ preInterpolationSpace: Win2D.CanvasColorSpace, _ postInterpolationSpace: Win2D.CanvasColorSpace, _ bufferPrecision: Win2D.CanvasBufferPrecision) throws -> Win2D.CanvasRadialGradientBrush? {
            let (canvasRadialGradientBrush) = try ComPtrs.initialize { canvasRadialGradientBrushAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                try gradientStops.toABI { _gradientStops in
                    _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.CreateHdrWithEdgeBehaviorAndInterpolationOptions(pThis, _resourceCreator, _gradientStops.count, _gradientStops.start, edgeBehavior, alphaMode, preInterpolationSpace, postInterpolationSpace, bufferPrecision, &canvasRadialGradientBrushAbi))
                    }
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas_Brushes.CanvasRadialGradientBrushBridge.from(abi: canvasRadialGradientBrush)
        }

        public func CreateRainbow(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ eldritchness: Float) throws -> Win2D.CanvasRadialGradientBrush? {
            let (canvasRadialGradientBrush) = try ComPtrs.initialize { canvasRadialGradientBrushAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasRadialGradientBrushStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateRainbow(pThis, _resourceCreator, eldritchness, &canvasRadialGradientBrushAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas_Brushes.CanvasRadialGradientBrushBridge.from(abi: canvasRadialGradientBrush)
        }

    }

    public class ICanvasSolidColorBrush: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush }

        public func get_Color() throws -> UWP.Color {
            var value: __x_ABI_CWindows_CUI_CColor = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Color(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_Color(_ value: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Color(pThis, .from(swift: value)))
            }
        }

        public func get_ColorHdr() throws -> WindowsFoundation.Vector4 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector4 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ColorHdr(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_ColorHdr(_ value: WindowsFoundation.Vector4) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrush.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ColorHdr(pThis, .from(swift: value)))
            }
        }

    }

    public class ICanvasSolidColorBrushFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory }

        public func Create(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ color: UWP.Color) throws -> ICanvasSolidColorBrush {
            let (canvasSolidColorBrush) = try ComPtrs.initialize { canvasSolidColorBrushAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, _resourceCreator, .from(swift: color), &canvasSolidColorBrushAbi))
                }
            }
            return ICanvasSolidColorBrush(canvasSolidColorBrush!)
        }

    }

    public class ICanvasSolidColorBrushStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics }

        public func CreateHdr(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ colorHdr: WindowsFoundation.Vector4) throws -> Win2D.CanvasSolidColorBrush? {
            let (canvasSolidColorBrush) = try ComPtrs.initialize { canvasSolidColorBrushAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CICanvasSolidColorBrushStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateHdr(pThis, _resourceCreator, .from(swift: colorHdr), &canvasSolidColorBrushAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas_Brushes.CanvasSolidColorBrushBridge.from(abi: canvasSolidColorBrush)
        }

    }

}
extension __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop {
        public static func from(swift: Win2D.CanvasGradientStop) -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStop {
            .init(Position: swift.position, Color: .from(swift: swift.color))
        }
    }
    extension __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr {
        public static func from(swift: Win2D.CanvasGradientStopHdr) -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CBrushes_CCanvasGradientStopHdr {
            .init(Position: swift.position, Color: .from(swift: swift.color))
        }
    }
    