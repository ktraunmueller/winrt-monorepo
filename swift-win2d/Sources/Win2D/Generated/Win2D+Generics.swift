// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap: WindowsFoundation.IID {
    .init(Data1: 0x01f4b012, Data2: 0xb7d5, Data3: 0x5e02, Data4: ( 0x8c,0xaa,0x2c,0x46,0x0f,0x35,0xc9,0x47 ))// 01f4b012-b7d5-5e02-8caa-2c460f35c947
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &Win2D.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasBitmap?>? = Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapBridge>
public class AsyncOperationCompletedHandlerCanvasBitmap: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasBitmap?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<Win2D.CanvasBitmap?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap
    internal typealias SwiftABI = Win2D.AsyncOperationCompletedHandlerCanvasBitmap

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap: WindowsFoundation.IID {
    .init(Data1: 0x6fec4e18, Data2: 0x7336, Data3: 0x5236, Data4: ( 0x87,0x48,0x9a,0x4b,0x66,0x9b,0x98,0xf6 ))// 6fec4e18-7336-5236-8748-9a4b669b98f6
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &Win2D.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasVirtualBitmap?>? = Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapBridge>
public class AsyncOperationCompletedHandlerCanvasVirtualBitmap: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasVirtualBitmap?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<Win2D.CanvasVirtualBitmap?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap
    internal typealias SwiftABI = Win2D.AsyncOperationCompletedHandlerCanvasVirtualBitmap

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument: WindowsFoundation.IID {
    .init(Data1: 0x45ebe17c, Data2: 0xefb1, Data3: 0x5ba2, Data4: ( 0x92,0x80,0x84,0x13,0x4c,0xea,0x38,0xf9 ))// 45ebe17c-efb1-5ba2-9280-84134cea38f9
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &Win2D.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasSvgDocument?>? = Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentBridge>
public class AsyncOperationCompletedHandlerCanvasSvgDocument: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasSvgDocument?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<Win2D.CanvasSvgDocument?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument
    internal typealias SwiftABI = Win2D.AsyncOperationCompletedHandlerCanvasSvgDocument

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement: WindowsFoundation.IID {
    .init(Data1: 0x76b5a817, Data2: 0x1bef, Data3: 0x5f3e, Data4: ( 0x91,0xbb,0x56,0x97,0xa3,0xba,0x6e,0x51 ))// 76b5a817-1bef-5f3e-91bb-5697a3ba6e51
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &Win2D.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasSvgNamedElement?>? = Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementBridge>
public class AsyncOperationCompletedHandlerCanvasSvgNamedElement: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasSvgNamedElement?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<Win2D.CanvasSvgNamedElement?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement
    internal typealias SwiftABI = Win2D.AsyncOperationCompletedHandlerCanvasSvgNamedElement

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIIterable_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFace: WindowsFoundation.IID {
    .init(Data1: 0xdadc03be, Data2: 0xadec, Data3: 0x5e2b, Data4: ( 0x80,0x56,0xe6,0x20,0xeb,0xd2,0x50,0xa6 ))// dadc03be-adec-5e2b-8056-e620ebd250a6
}

internal var __x_ABI_C__FIIterable_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceVTable: __x_ABI_C__FIIterable_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIIterable_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Microsoft.Graphics.Canvas.Text.CanvasFontFace>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = Win2D.__x_ABI_C__FIIterator_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIIterable_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceBridge>
public class IIterableCanvasFontFace: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFace }

    open func First() throws -> WindowsFoundation.AnyIIterator<Win2D.CanvasFontFace?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIIterator_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFace
    internal typealias SwiftABI = IIterableCanvasFontFace
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<Win2D.CanvasFontFace?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceImpl : IIterable, AbiInterfaceImpl {
    typealias T = Win2D.CanvasFontFace?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<Win2D.CanvasFontFace?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1_HSTRING: WindowsFoundation.IID {
    .init(Data1: 0xe2fcc7c1, Data2: 0x3bfc, Data3: 0x5a0b, Data4: ( 0xb2,0xb0,0x72,0xe7,0x69,0xd1,0xcb,0x7e ))// e2fcc7c1-3bfc-5a0b-b2b0-72e769d1cb7e
}

internal var __x_ABI_C__FIIterable_1_HSTRINGVTable: __x_ABI_C__FIIterable_1_HSTRINGVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1_HSTRINGWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1_HSTRINGWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1_HSTRINGWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIIterable_1_HSTRINGWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<String>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = Win2D.__x_ABI_C__FIIterator_1_HSTRINGWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1_HSTRINGWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIIterable_1_HSTRINGBridge>
public class IIterableString: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1_HSTRING }

    open func First() throws -> WindowsFoundation.AnyIIterator<String>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIIterator_1_HSTRINGWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1_HSTRINGBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1_HSTRING
    internal typealias SwiftABI = IIterableString
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<String>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1_HSTRINGImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1_HSTRINGVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1_HSTRINGImpl : IIterable, AbiInterfaceImpl {
    typealias T = String
    typealias Bridge = __x_ABI_C__FIIterable_1_HSTRINGBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<String>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi: WindowsFoundation.IID {
    .init(Data1: 0x51271225, Data2: 0xb352, Data3: 0x5aaa, Data4: ( 0xae,0x19,0x95,0xd3,0x87,0xc9,0xb6,0xb7 ))// 51271225-b352-5aaa-ae19-95d387c9b6b7
}

internal var __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVTable: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBidi>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiBridge>
public class IIterableIKeyValuePairCanvasCharacterRange_CanvasAnalyzedBidi: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi }

    open func First() throws -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedBidi>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi
    internal typealias SwiftABI = IIterableIKeyValuePairCanvasCharacterRange_CanvasAnalyzedBidi
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedBidi>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiImpl : IIterable, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedBidi>?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedBidi>?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation: WindowsFoundation.IID {
    .init(Data1: 0xbc2186a2, Data2: 0xf834, Data3: 0x5c78, Data4: ( 0x8d,0x4c,0xec,0x41,0x66,0xc4,0x6b,0x40 ))// bc2186a2-f834-5c78-8d4c-ec4166c46b40
}

internal var __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVTable: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationBridge>
public class IIterableIKeyValuePairCanvasCharacterRange_CanvasAnalyzedGlyphOrientation: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation }

    open func First() throws -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedGlyphOrientation>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation
    internal typealias SwiftABI = IIterableIKeyValuePairCanvasCharacterRange_CanvasAnalyzedGlyphOrientation
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedGlyphOrientation>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationImpl : IIterable, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedGlyphOrientation>?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedGlyphOrientation>?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript: WindowsFoundation.IID {
    .init(Data1: 0x4b15169a, Data2: 0xc4b5, Data3: 0x51d3, Data4: ( 0xb6,0xc8,0x79,0xec,0x3e,0x17,0x78,0x71 ))// 4b15169a-c4b5-51d3-b6c8-79ec3e177871
}

internal var __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVTable: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptBridge>
public class IIterableIKeyValuePairCanvasCharacterRange_CanvasAnalyzedScript: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript }

    open func First() throws -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedScript>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript
    internal typealias SwiftABI = IIterableIKeyValuePairCanvasCharacterRange_CanvasAnalyzedScript
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedScript>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptImpl : IIterable, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedScript>?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedScript>?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution: WindowsFoundation.IID {
    .init(Data1: 0x27f7d15b, Data2: 0x8c80, Data3: 0x5fa3, Data4: ( 0xa2,0x02,0x89,0x9c,0xef,0x70,0xe0,0x02 ))// 27f7d15b-8c80-5fa3-a202-899cef70e002
}

internal var __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVTable: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionBridge>
public class IIterableIKeyValuePairCanvasCharacterRange_CanvasNumberSubstitution: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution }

    open func First() throws -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasNumberSubstitution?>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution
    internal typealias SwiftABI = IIterableIKeyValuePairCanvasCharacterRange_CanvasNumberSubstitution
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasNumberSubstitution?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionImpl : IIterable, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasNumberSubstitution?>?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasNumberSubstitution?>?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFont: WindowsFoundation.IID {
    .init(Data1: 0xe13342d7, Data2: 0x18ac, Data3: 0x5a96, Data4: ( 0x8f,0x97,0x4a,0xd9,0xaa,0x7c,0xc2,0x11 ))// e13342d7-18ac-5a96-8f97-4ad9aa7cc211
}

internal var __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontVTable: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasScaledFont>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontBridge>
public class IIterableIKeyValuePairCanvasCharacterRange_CanvasScaledFont: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFont }

    open func First() throws -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasScaledFont?>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFont.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFont
    internal typealias SwiftABI = IIterableIKeyValuePairCanvasCharacterRange_CanvasScaledFont
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasScaledFont?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontImpl : IIterable, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasScaledFont?>?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasScaledFont?>?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypography: WindowsFoundation.IID {
    .init(Data1: 0x9101ecfa, Data2: 0x8e8b, Data3: 0x5236, Data4: ( 0xb3,0xc1,0x3a,0xe4,0x19,0xdf,0x1a,0x4d ))// 9101ecfa-8e8b-5236-b3c1-3ae419df1a4d
}

internal var __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyVTable: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasTypography>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyBridge>
public class IIterableIKeyValuePairCanvasCharacterRange_CanvasTypography: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypography }

    open func First() throws -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasTypography?>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypography.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypography
    internal typealias SwiftABI = IIterableIKeyValuePairCanvasCharacterRange_CanvasTypography
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasTypography?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyImpl : IIterable, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasTypography?>?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasTypography?>?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0xfe2f3d47, Data2: 0x5d47, Data3: 0x5499, Data4: ( 0x83,0x74,0x43,0x0c,0x7c,0xda,0x02,0x04 ))// fe2f3d47-5d47-5499-8374-430c7cda0204
}

internal var __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVTable: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Any>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableBridge>
public class IIterableIKeyValuePairString_Any: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable }

    open func First() throws -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, Any?>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable
    internal typealias SwiftABI = IIterableIKeyValuePairString_Any
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, Any?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableImpl : IIterable, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, Any?>?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, Any?>?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING: WindowsFoundation.IID {
    .init(Data1: 0xe9bdaaf0, Data2: 0xcbf6, Data3: 0x5c72, Data4: ( 0xbe,0x90,0x29,0xcb,0xf3,0xa1,0x31,0x9b ))// e9bdaaf0-cbf6-5c72-be90-29cbf3a1319b
}

internal var __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVTable: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGBridge>
public class IIterableIKeyValuePairString_String: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING }

    open func First() throws -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, String>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING
    internal typealias SwiftABI = IIterableIKeyValuePairString_String
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, String>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGImpl : IIterable, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, String>?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, String>?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource: WindowsFoundation.IID {
    .init(Data1: 0x42924784, Data2: 0xb65c, Data3: 0x5e5f, Data4: ( 0x9e,0xa2,0xd5,0x0d,0xcf,0x42,0x7e,0x65 ))// 42924784-b65c-5e5f-9ea2-d50dcf427e65
}

internal var __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceVTable: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Graphics.Effects.IGraphicsEffectSource>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = Win2D.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceBridge>
public class IIterableIGraphicsEffectSource: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource }

    open func First() throws -> WindowsFoundation.AnyIIterator<UWP.AnyIGraphicsEffectSource?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource
    internal typealias SwiftABI = IIterableIGraphicsEffectSource
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<UWP.AnyIGraphicsEffectSource?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceImpl : IIterable, AbiInterfaceImpl {
    typealias T = UWP.AnyIGraphicsEffectSource?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.AnyIGraphicsEffectSource?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFace: WindowsFoundation.IID {
    .init(Data1: 0xba9cfc0b, Data2: 0x75d0, Data3: 0x5455, Data4: ( 0x9d,0x9d,0xb8,0x8a,0x73,0xa8,0x06,0xd0 ))// ba9cfc0b-75d0-5455-9d9d-b88a73a806d0
}

internal var __x_ABI_C__FIIterator_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceVTable: __x_ABI_C__FIIterator_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIIterator_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Microsoft.Graphics.Canvas.Text.CanvasFontFace>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        result?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [Win2D.CanvasFontFace?] = .from(abiBridge: __IMPL_Microsoft_Graphics_Canvas_Text.CanvasFontFaceBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: __IMPL_Microsoft_Graphics_Canvas_Text.CanvasFontFaceBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIIterator_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceBridge>
public class IIteratorCanvasFontFace: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFace }

    open func get_Current() throws -> Win2D.CanvasFontFace? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return __IMPL_Microsoft_Graphics_Canvas_Text.CanvasFontFaceBridge.from(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [Win2D.CanvasFontFace?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Microsoft_Graphics_Canvas_Text.CanvasFontFaceBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Microsoft_Graphics_Canvas_Text.CanvasFontFaceBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFace
    internal typealias SwiftABI = IIteratorCanvasFontFace
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<Win2D.CanvasFontFace?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceImpl : IIterator, AbiInterfaceImpl {
    typealias T = Win2D.CanvasFontFace?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [Win2D.CanvasFontFace?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : Win2D.CanvasFontFace? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1_HSTRING: WindowsFoundation.IID {
    .init(Data1: 0x8c304ebb, Data2: 0x6615, Data3: 0x50a4, Data4: ( 0x88,0x29,0x87,0x9e,0xcd,0x44,0x32,0x36 ))// 8c304ebb-6615-50a4-8829-879ecd443236
}

internal var __x_ABI_C__FIIterator_1_HSTRINGVTable: __x_ABI_C__FIIterator_1_HSTRINGVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1_HSTRINGWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1_HSTRINGWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1_HSTRINGWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIIterator_1_HSTRINGWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<String>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        $1?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [String] = .from(abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        do {
            try items.fill(abi: $2)
        } catch { return failWith(error: error) }
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1_HSTRINGWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIIterator_1_HSTRINGBridge>
public class IIteratorString: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1_HSTRING }

    open func get_Current() throws -> String {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIIterator_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &result))
        }
        return .init(from: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [String]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1_HSTRINGBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1_HSTRING
    internal typealias SwiftABI = IIteratorString
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<String>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1_HSTRINGImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1_HSTRINGVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1_HSTRINGImpl : IIterator, AbiInterfaceImpl {
    typealias T = String
    typealias Bridge = __x_ABI_C__FIIterator_1_HSTRINGBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [String]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : String {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi: WindowsFoundation.IID {
    .init(Data1: 0x7e9530ef, Data2: 0xeb03, Data3: 0x5e8f, Data4: ( 0x9d,0x38,0xf2,0xc6,0x2e,0x31,0xd4,0xbc ))// 7e9530ef-eb03-5e8f-9d38-f2c62e31d4bc
}

internal var __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVTable: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBidi>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        let resultWrapper = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedBidi>?] = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiBridge>
public class IIteratorIKeyValuePairCanvasCharacterRange_CanvasAnalyzedBidi: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi }

    open func get_Current() throws -> WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedBidi>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.unwrapFrom(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedBidi>?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi
    internal typealias SwiftABI = IIteratorIKeyValuePairCanvasCharacterRange_CanvasAnalyzedBidi
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedBidi>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiImpl : IIterator, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedBidi>?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedBidi>?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedBidi>? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation: WindowsFoundation.IID {
    .init(Data1: 0x6fa01beb, Data2: 0xa02e, Data3: 0x57b4, Data4: ( 0x97,0x5d,0x06,0x62,0x23,0x03,0x15,0xe9 ))// 6fa01beb-a02e-57b4-975d-0662230315e9
}

internal var __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVTable: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        let resultWrapper = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedGlyphOrientation>?] = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationBridge>
public class IIteratorIKeyValuePairCanvasCharacterRange_CanvasAnalyzedGlyphOrientation: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation }

    open func get_Current() throws -> WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedGlyphOrientation>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.unwrapFrom(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedGlyphOrientation>?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation
    internal typealias SwiftABI = IIteratorIKeyValuePairCanvasCharacterRange_CanvasAnalyzedGlyphOrientation
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedGlyphOrientation>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationImpl : IIterator, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedGlyphOrientation>?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedGlyphOrientation>?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedGlyphOrientation>? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript: WindowsFoundation.IID {
    .init(Data1: 0xd6dd13e4, Data2: 0xd1e8, Data3: 0x577c, Data4: ( 0xbb,0xcb,0xcf,0x31,0xb9,0x6f,0x09,0xed ))// d6dd13e4-d1e8-577c-bbcb-cf31b96f09ed
}

internal var __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVTable: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        let resultWrapper = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedScript>?] = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptBridge>
public class IIteratorIKeyValuePairCanvasCharacterRange_CanvasAnalyzedScript: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript }

    open func get_Current() throws -> WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedScript>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.unwrapFrom(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedScript>?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript
    internal typealias SwiftABI = IIteratorIKeyValuePairCanvasCharacterRange_CanvasAnalyzedScript
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedScript>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptImpl : IIterator, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedScript>?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedScript>?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedScript>? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution: WindowsFoundation.IID {
    .init(Data1: 0xc95c26dd, Data2: 0xc066, Data3: 0x543f, Data4: ( 0xa3,0xd4,0xa3,0xfc,0x9f,0x0c,0xad,0x1a ))// c95c26dd-c066-543f-a3d4-a3fc9f0cad1a
}

internal var __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVTable: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        let resultWrapper = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasNumberSubstitution?>?] = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionBridge>
public class IIteratorIKeyValuePairCanvasCharacterRange_CanvasNumberSubstitution: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution }

    open func get_Current() throws -> WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasNumberSubstitution?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.unwrapFrom(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasNumberSubstitution?>?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution
    internal typealias SwiftABI = IIteratorIKeyValuePairCanvasCharacterRange_CanvasNumberSubstitution
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasNumberSubstitution?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionImpl : IIterator, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasNumberSubstitution?>?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasNumberSubstitution?>?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasNumberSubstitution?>? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFont: WindowsFoundation.IID {
    .init(Data1: 0x56051c10, Data2: 0xf92f, Data3: 0x5a6c, Data4: ( 0x91,0x1e,0x36,0x72,0x67,0x24,0x52,0x24 ))// 56051c10-f92f-5a6c-911e-367267245224
}

internal var __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontVTable: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasScaledFont>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        let resultWrapper = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasScaledFont?>?] = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontBridge>
public class IIteratorIKeyValuePairCanvasCharacterRange_CanvasScaledFont: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFont }

    open func get_Current() throws -> WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasScaledFont?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFont.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.unwrapFrom(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFont.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFont.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasScaledFont?>?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFont.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFont
    internal typealias SwiftABI = IIteratorIKeyValuePairCanvasCharacterRange_CanvasScaledFont
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasScaledFont?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontImpl : IIterator, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasScaledFont?>?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasScaledFont?>?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasScaledFont?>? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypography: WindowsFoundation.IID {
    .init(Data1: 0x6bf99e32, Data2: 0x7516, Data3: 0x5e16, Data4: ( 0xad,0x21,0xf8,0x3a,0x89,0x89,0x8c,0x50 ))// 6bf99e32-7516-5e16-ad21-f83a89898c50
}

internal var __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyVTable: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasTypography>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        let resultWrapper = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasTypography?>?] = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyBridge>
public class IIteratorIKeyValuePairCanvasCharacterRange_CanvasTypography: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypography }

    open func get_Current() throws -> WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasTypography?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypography.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.unwrapFrom(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypography.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypography.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasTypography?>?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypography.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypography
    internal typealias SwiftABI = IIteratorIKeyValuePairCanvasCharacterRange_CanvasTypography
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasTypography?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyImpl : IIterator, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasTypography?>?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasTypography?>?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasTypography?>? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0x5db5fa32, Data2: 0x707c, Data3: 0x5849, Data4: ( 0xa0,0x6b,0x91,0xc8,0xeb,0x9d,0x10,0xe8 ))// 5db5fa32-707c-5849-a06b-91c8eb9d10e8
}

internal var __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVTable: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Any>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        let resultWrapper = Win2D.__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [WindowsFoundation.AnyIKeyValuePair<String, Any?>?] = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableBridge>
public class IIteratorIKeyValuePairString_Any: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable }

    open func get_Current() throws -> WindowsFoundation.AnyIKeyValuePair<String, Any?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<String, Any?>?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable
    internal typealias SwiftABI = IIteratorIKeyValuePairString_Any
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, Any?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableImpl : IIterator, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, Any?>?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<String, Any?>?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : WindowsFoundation.AnyIKeyValuePair<String, Any?>? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING: WindowsFoundation.IID {
    .init(Data1: 0x05eb86f1, Data2: 0x7140, Data3: 0x5517, Data4: ( 0xb8,0x8d,0xcb,0xae,0xbe,0x57,0xe6,0xb1 ))// 05eb86f1-7140-5517-b88d-cbaebe57e6b1
}

internal var __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVTable: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        let resultWrapper = Win2D.__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [WindowsFoundation.AnyIKeyValuePair<String, String>?] = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGBridge>
public class IIteratorIKeyValuePairString_String: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING }

    open func get_Current() throws -> WindowsFoundation.AnyIKeyValuePair<String, String>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<String, String>?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING
    internal typealias SwiftABI = IIteratorIKeyValuePairString_String
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, String>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGImpl : IIterator, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, String>?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<String, String>?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : WindowsFoundation.AnyIKeyValuePair<String, String>? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource: WindowsFoundation.IID {
    .init(Data1: 0xc50f44f2, Data2: 0xb5b9, Data3: 0x50e5, Data4: ( 0xb4,0x93,0xa9,0x67,0xcc,0xc2,0x1d,0xd2 ))// c50f44f2-b5b9-50e5-b493-a967ccc21dd2
}

internal var __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceVTable: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Graphics.Effects.IGraphicsEffectSource>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        let resultWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [UWP.AnyIGraphicsEffectSource?] = .from(abiBridge: __IMPL_Windows_Graphics_Effects.IGraphicsEffectSourceBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: __IMPL_Windows_Graphics_Effects.IGraphicsEffectSourceBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceBridge>
public class IIteratorIGraphicsEffectSource: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource }

    open func get_Current() throws -> UWP.AnyIGraphicsEffectSource? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [UWP.AnyIGraphicsEffectSource?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_Graphics_Effects.IGraphicsEffectSourceBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_Graphics_Effects.IGraphicsEffectSourceBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource
    internal typealias SwiftABI = IIteratorIGraphicsEffectSource
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<UWP.AnyIGraphicsEffectSource?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceImpl : IIterator, AbiInterfaceImpl {
    typealias T = UWP.AnyIGraphicsEffectSource?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [UWP.AnyIGraphicsEffectSource?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : UWP.AnyIGraphicsEffectSource? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi: WindowsFoundation.IID {
    .init(Data1: 0x9f5425b6, Data2: 0xbe6f, Data3: 0x5f3d, Data4: ( 0x9d,0x65,0xad,0x8c,0x61,0xaa,0x01,0xde ))// 9f5425b6-be6f-5f3d-9d65-ad8c61aa01de
}

internal var __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVTable: __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl = .init(
    QueryInterface: { __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.addRef($0) },
    Release: { __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBidi>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Key: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.key
        $1?.initialize(to: .from(swift: result))
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value
        $1?.initialize(to: .from(swift: result))
        return S_OK
    }
)
typealias __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiBridge>
public class IKeyValuePairCanvasCharacterRange_CanvasAnalyzedBidi: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi }

    open func get_Key() throws -> Win2D.CanvasCharacterRange {
        var result: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange = .init()
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, &result))
        }
        return .from(abi: result)
    }

    open func get_Value() throws -> Win2D.CanvasAnalyzedBidi {
        var result: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBidi = .init()
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &result))
        }
        return .from(abi: result)
    }

}

internal enum __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi
    internal typealias SwiftABI = IKeyValuePairCanvasCharacterRange_CanvasAnalyzedBidi
    internal typealias SwiftProjection = WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedBidi>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiImpl : IKeyValuePair, AbiInterfaceImpl {
    typealias K = Win2D.CanvasCharacterRange
    typealias V = Win2D.CanvasAnalyzedBidi
    typealias Bridge = __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.key)
    fileprivate var key : Win2D.CanvasCharacterRange {
        get { try! _default.get_Key() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.value)
    fileprivate var value : Win2D.CanvasAnalyzedBidi {
        get { try! _default.get_Value() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation: WindowsFoundation.IID {
    .init(Data1: 0xa8240806, Data2: 0x1266, Data3: 0x51ae, Data4: ( 0x92,0x76,0x0d,0x6e,0xb6,0x2f,0x40,0x3b ))// a8240806-1266-51ae-9276-0d6eb62f403b
}

internal var __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVTable: __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl = .init(
    QueryInterface: { __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.addRef($0) },
    Release: { __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Key: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.key
        $1?.initialize(to: .from(swift: result))
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value
        let _result = __ABI_Microsoft_Graphics_Canvas_Text._ABI_CanvasAnalyzedGlyphOrientation(from: result)
        	$1?.initialize(to: _result.detach())
        return S_OK
    }
)
typealias __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationBridge>
public class IKeyValuePairCanvasCharacterRange_CanvasAnalyzedGlyphOrientation: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation }

    open func get_Key() throws -> Win2D.CanvasCharacterRange {
        var result: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange = .init()
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, &result))
        }
        return .from(abi: result)
    }

    open func get_Value() throws -> Win2D.CanvasAnalyzedGlyphOrientation {
        var result: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedGlyphOrientation = .init()
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &result))
        }
        return .from(abi: result)
    }

}

internal enum __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation
    internal typealias SwiftABI = IKeyValuePairCanvasCharacterRange_CanvasAnalyzedGlyphOrientation
    internal typealias SwiftProjection = WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedGlyphOrientation>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationImpl : IKeyValuePair, AbiInterfaceImpl {
    typealias K = Win2D.CanvasCharacterRange
    typealias V = Win2D.CanvasAnalyzedGlyphOrientation
    typealias Bridge = __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.key)
    fileprivate var key : Win2D.CanvasCharacterRange {
        get { try! _default.get_Key() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.value)
    fileprivate var value : Win2D.CanvasAnalyzedGlyphOrientation {
        get { try! _default.get_Value() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript: WindowsFoundation.IID {
    .init(Data1: 0xf113a468, Data2: 0x5320, Data3: 0x5b3d, Data4: ( 0xb9,0x76,0x1c,0x12,0xd9,0x5d,0x71,0xfe ))// f113a468-5320-5b3d-b976-1c12d95d71fe
}

internal var __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVTable: __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl = .init(
    QueryInterface: { __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.addRef($0) },
    Release: { __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Key: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.key
        $1?.initialize(to: .from(swift: result))
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value
        $1?.initialize(to: .from(swift: result))
        return S_OK
    }
)
typealias __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptBridge>
public class IKeyValuePairCanvasCharacterRange_CanvasAnalyzedScript: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript }

    open func get_Key() throws -> Win2D.CanvasCharacterRange {
        var result: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange = .init()
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, &result))
        }
        return .from(abi: result)
    }

    open func get_Value() throws -> Win2D.CanvasAnalyzedScript {
        var result: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript = .init()
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &result))
        }
        return .from(abi: result)
    }

}

internal enum __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript
    internal typealias SwiftABI = IKeyValuePairCanvasCharacterRange_CanvasAnalyzedScript
    internal typealias SwiftProjection = WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedScript>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptImpl : IKeyValuePair, AbiInterfaceImpl {
    typealias K = Win2D.CanvasCharacterRange
    typealias V = Win2D.CanvasAnalyzedScript
    typealias Bridge = __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.key)
    fileprivate var key : Win2D.CanvasCharacterRange {
        get { try! _default.get_Key() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.value)
    fileprivate var value : Win2D.CanvasAnalyzedScript {
        get { try! _default.get_Value() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution: WindowsFoundation.IID {
    .init(Data1: 0x93f9a2ab, Data2: 0x5b51, Data3: 0x5468, Data4: ( 0x8b,0x38,0x46,0x93,0xd9,0x6b,0x42,0x55 ))// 93f9a2ab-5b51-5468-8b38-4693d96b4255
}

internal var __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVTable: __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl = .init(
    QueryInterface: { __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.addRef($0) },
    Release: { __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Key: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.key
        $1?.initialize(to: .from(swift: result))
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value
        result?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionBridge>
public class IKeyValuePairCanvasCharacterRange_CanvasNumberSubstitution: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution }

    open func get_Key() throws -> Win2D.CanvasCharacterRange {
        var result: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange = .init()
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, &result))
        }
        return .from(abi: result)
    }

    open func get_Value() throws -> Win2D.CanvasNumberSubstitution? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &resultAbi))
            }
        }
        return __IMPL_Microsoft_Graphics_Canvas_Text.CanvasNumberSubstitutionBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution
    internal typealias SwiftABI = IKeyValuePairCanvasCharacterRange_CanvasNumberSubstitution
    internal typealias SwiftProjection = WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasNumberSubstitution?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionImpl : IKeyValuePair, AbiInterfaceImpl {
    typealias K = Win2D.CanvasCharacterRange
    typealias V = Win2D.CanvasNumberSubstitution?
    typealias Bridge = __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.key)
    fileprivate var key : Win2D.CanvasCharacterRange {
        get { try! _default.get_Key() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.value)
    fileprivate var value : Win2D.CanvasNumberSubstitution? {
        get { try! _default.get_Value() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFont: WindowsFoundation.IID {
    .init(Data1: 0x659fa7a9, Data2: 0xd350, Data3: 0x5c96, Data4: ( 0x9e,0xda,0x65,0xd1,0x51,0x12,0x7b,0xe6 ))// 659fa7a9-d350-5c96-9eda-65d151127be6
}

internal var __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontVTable: __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl = .init(
    QueryInterface: { __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.addRef($0) },
    Release: { __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasScaledFont>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Key: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.key
        $1?.initialize(to: .from(swift: result))
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value
        result?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontBridge>
public class IKeyValuePairCanvasCharacterRange_CanvasScaledFont: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFont }

    open func get_Key() throws -> Win2D.CanvasCharacterRange {
        var result: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange = .init()
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFont.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, &result))
        }
        return .from(abi: result)
    }

    open func get_Value() throws -> Win2D.CanvasScaledFont? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFont.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &resultAbi))
            }
        }
        return __IMPL_Microsoft_Graphics_Canvas_Text.CanvasScaledFontBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFont
    internal typealias SwiftABI = IKeyValuePairCanvasCharacterRange_CanvasScaledFont
    internal typealias SwiftProjection = WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasScaledFont?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontImpl : IKeyValuePair, AbiInterfaceImpl {
    typealias K = Win2D.CanvasCharacterRange
    typealias V = Win2D.CanvasScaledFont?
    typealias Bridge = __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.key)
    fileprivate var key : Win2D.CanvasCharacterRange {
        get { try! _default.get_Key() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.value)
    fileprivate var value : Win2D.CanvasScaledFont? {
        get { try! _default.get_Value() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypography: WindowsFoundation.IID {
    .init(Data1: 0x3e238e5e, Data2: 0x5b0e, Data3: 0x519e, Data4: ( 0xb8,0xee,0x95,0x24,0xd5,0x1e,0x03,0x76 ))// 3e238e5e-5b0e-519e-b8ee-9524d51e0376
}

internal var __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyVTable: __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl = .init(
    QueryInterface: { __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.addRef($0) },
    Release: { __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasTypography>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Key: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.key
        $1?.initialize(to: .from(swift: result))
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value
        result?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyBridge>
public class IKeyValuePairCanvasCharacterRange_CanvasTypography: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypography }

    open func get_Key() throws -> Win2D.CanvasCharacterRange {
        var result: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange = .init()
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypography.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, &result))
        }
        return .from(abi: result)
    }

    open func get_Value() throws -> Win2D.CanvasTypography? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypography.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &resultAbi))
            }
        }
        return __IMPL_Microsoft_Graphics_Canvas_Text.CanvasTypographyBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypography
    internal typealias SwiftABI = IKeyValuePairCanvasCharacterRange_CanvasTypography
    internal typealias SwiftProjection = WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasTypography?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyImpl : IKeyValuePair, AbiInterfaceImpl {
    typealias K = Win2D.CanvasCharacterRange
    typealias V = Win2D.CanvasTypography?
    typealias Bridge = __x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.key)
    fileprivate var key : Win2D.CanvasCharacterRange {
        get { try! _default.get_Key() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.value)
    fileprivate var value : Win2D.CanvasTypography? {
        get { try! _default.get_Value() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0x09335560, Data2: 0x6c6b, Data3: 0x5a26, Data4: ( 0x93,0x48,0x97,0xb7,0x81,0x13,0x2b,0x20 ))// 09335560-6c6b-5a26-9348-97b781132b20
}

internal var __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVTable: __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IKeyValuePair`2<String, Any>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Key: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.key
        $1?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value
        let resultWrapper = __ABI_.AnyWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableBridge>
public class IKeyValuePairString_Any: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable }

    open func get_Key() throws -> String {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, &result))
        }
        return .init(from: result)
    }

    open func get_Value() throws -> Any? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &resultAbi))
            }
        }
        return __ABI_.AnyWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable
    internal typealias SwiftABI = IKeyValuePairString_Any
    internal typealias SwiftProjection = WindowsFoundation.AnyIKeyValuePair<String, Any?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableImpl : IKeyValuePair, AbiInterfaceImpl {
    typealias K = String
    typealias V = Any?
    typealias Bridge = __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.key)
    fileprivate var key : String {
        get { try! _default.get_Key() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.value)
    fileprivate var value : Any? {
        get { try! _default.get_Value() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING: WindowsFoundation.IID {
    .init(Data1: 0x60310303, Data2: 0x49c5, Data3: 0x52e6, Data4: ( 0xab,0xc6,0xa9,0xb3,0x6e,0xcc,0xc7,0x16 ))// 60310303-49c5-52e6-abc6-a9b36eccc716
}

internal var __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVTable: __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl = .init(
    QueryInterface: { __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.addRef($0) },
    Release: { __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IKeyValuePair`2<String, String>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Key: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.key
        $1?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value
        $1?.initialize(to: try! HString(result).detach())
        return S_OK
    }
)
typealias __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGBridge>
public class IKeyValuePairString_String: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING }

    open func get_Key() throws -> String {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, &result))
        }
        return .init(from: result)
    }

    open func get_Value() throws -> String {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &result))
        }
        return .init(from: result)
    }

}

internal enum __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING
    internal typealias SwiftABI = IKeyValuePairString_String
    internal typealias SwiftProjection = WindowsFoundation.AnyIKeyValuePair<String, String>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGImpl : IKeyValuePair, AbiInterfaceImpl {
    typealias K = String
    typealias V = String
    typealias Bridge = __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.key)
    fileprivate var key : String {
        get { try! _default.get_Key() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.value)
    fileprivate var value : String {
        get { try! _default.get_Value() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMapView_2_HSTRING_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0xbb78502a, Data2: 0xf79d, Data3: 0x54fa, Data4: ( 0x92,0xc9,0x90,0xc5,0x03,0x9f,0xdf,0x7e ))// bb78502a-f79d-54fa-92c9-90c5039fdf7e
}

internal var __x_ABI_C__FIMapView_2_HSTRING_IInspectableVTable: __x_ABI_C__FIMapView_2_HSTRING_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.IID
        iids[3] = Win2D.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMapView`2<String, Any>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        let resultWrapper = __ABI_.AnyWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    Split: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var first: WindowsFoundation.AnyIMapView<String, Any?>?
        var second: WindowsFoundation.AnyIMapView<String, Any?>?
        __unwrapped__instance.split(&first, &second)
        let firstWrapper = Win2D.__x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper(first)
        firstWrapper?.copyTo($1)
        let secondWrapper = Win2D.__x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper(second)
        secondWrapper?.copyTo($2)
        return S_OK
    }
)
typealias __x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIMapView_2_HSTRING_IInspectableBridge>
public class IMapViewString_Any: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIMapView_2_HSTRING_IInspectable }

    open func Lookup(_ key: String) throws -> Any? {
        let (result) = try ComPtrs.initialize { resultAbi in
            let _key = try! HString(key)
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_IInspectable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, _key.get(), &resultAbi))
            }
        }
        return __ABI_.AnyWrapper.unwrapFrom(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func HasKey(_ key: String) throws -> Bool {
        var result: boolean = 0
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, _key.get(), &result))
        }
        return .init(from: result)
    }

    open func Split(_ first: inout WindowsFoundation.AnyIMapView<String, Any?>?, _ second: inout WindowsFoundation.AnyIMapView<String, Any?>?) throws {
        let (_first, _second) = try ComPtrs.initialize { (_firstAbi, _secondAbi) in
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_IInspectable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Split(pThis, &_firstAbi, &_secondAbi))
            }
        }
        first = Win2D.__x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: _first)
        second = Win2D.__x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: _second)
    }

}

internal enum __x_ABI_C__FIMapView_2_HSTRING_IInspectableBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIMapView_2_HSTRING_IInspectable
    internal typealias SwiftABI = IMapViewString_Any
    internal typealias SwiftProjection = WindowsFoundation.AnyIMapView<String, Any?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMapView_2_HSTRING_IInspectableImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMapView_2_HSTRING_IInspectableVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIMapView_2_HSTRING_IInspectableImpl : IMapView, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, Any?>?
    typealias K = String
    typealias V = Any?
    typealias Bridge = __x_ABI_C__FIMapView_2_HSTRING_IInspectableBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.lookup)
    fileprivate func lookup(_ key: String) -> Any? {
        try! _default.Lookup(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.haskey)
    fileprivate func hasKey(_ key: String) -> Bool {
        try! _default.HasKey(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.split)
    fileprivate func split(_ first: inout WindowsFoundation.AnyIMapView<String, Any?>?, _ second: inout WindowsFoundation.AnyIMapView<String, Any?>?) {
        try! _default.Split(&first, &second)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_Any! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, Any?>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMapView_2_HSTRING_HSTRING: WindowsFoundation.IID {
    .init(Data1: 0xac7f26f2, Data2: 0xfeb7, Data3: 0x5b2a, Data4: ( 0x8a,0xc4,0x34,0x5b,0xc6,0x2c,0xae,0xde ))// ac7f26f2-feb7-5b2a-8ac4-345bc62caede
}

internal var __x_ABI_C__FIMapView_2_HSTRING_HSTRINGVTable: __x_ABI_C__FIMapView_2_HSTRING_HSTRINGVtbl = .init(
    QueryInterface: { __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.addRef($0) },
    Release: { __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.IID
        iids[3] = Win2D.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMapView`2<String, String>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        $2?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    Split: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var first: WindowsFoundation.AnyIMapView<String, String>?
        var second: WindowsFoundation.AnyIMapView<String, String>?
        __unwrapped__instance.split(&first, &second)
        let firstWrapper = Win2D.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper(first)
        firstWrapper?.copyTo($1)
        let secondWrapper = Win2D.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper(second)
        secondWrapper?.copyTo($2)
        return S_OK
    }
)
typealias __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGBridge>
public class IMapViewString_String: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIMapView_2_HSTRING_HSTRING }

    open func Lookup(_ key: String) throws -> String {
        var result: HSTRING?
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, _key.get(), &result))
        }
        return .init(from: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func HasKey(_ key: String) throws -> Bool {
        var result: boolean = 0
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, _key.get(), &result))
        }
        return .init(from: result)
    }

    open func Split(_ first: inout WindowsFoundation.AnyIMapView<String, String>?, _ second: inout WindowsFoundation.AnyIMapView<String, String>?) throws {
        let (_first, _second) = try ComPtrs.initialize { (_firstAbi, _secondAbi) in
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Split(pThis, &_firstAbi, &_secondAbi))
            }
        }
        first = Win2D.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: _first)
        second = Win2D.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: _second)
    }

}

internal enum __x_ABI_C__FIMapView_2_HSTRING_HSTRINGBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIMapView_2_HSTRING_HSTRING
    internal typealias SwiftABI = IMapViewString_String
    internal typealias SwiftProjection = WindowsFoundation.AnyIMapView<String, String>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMapView_2_HSTRING_HSTRINGImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMapView_2_HSTRING_HSTRINGVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIMapView_2_HSTRING_HSTRINGImpl : IMapView, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, String>?
    typealias K = String
    typealias V = String
    typealias Bridge = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.lookup)
    fileprivate func lookup(_ key: String) -> String {
        try! _default.Lookup(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.haskey)
    fileprivate func hasKey(_ key: String) -> Bool {
        try! _default.HasKey(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.split)
    fileprivate func split(_ first: inout WindowsFoundation.AnyIMapView<String, String>?, _ second: inout WindowsFoundation.AnyIMapView<String, String>?) {
        try! _default.Split(&first, &second)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_String! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, String>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMap_2_HSTRING_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0x1b0d3570, Data2: 0x0877, Data3: 0x5ec2, Data4: ( 0x8a,0x2c,0x3b,0x95,0x39,0x50,0x6a,0xca ))// 1b0d3570-0877-5ec2-8a2c-3b9539506aca
}

internal var __x_ABI_C__FIMap_2_HSTRING_IInspectableVTable: __x_ABI_C__FIMap_2_HSTRING_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.IID
        iids[3] = Win2D.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMap`2<String, Any>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        let resultWrapper = __ABI_.AnyWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = Win2D.__x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    Insert: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
        let result = __unwrapped__instance.insert(key, value)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    Remove: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        __unwrapped__instance.remove(key)
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    }
)
typealias __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIMap_2_HSTRING_IInspectableBridge>
public class IMapString_Any: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIMap_2_HSTRING_IInspectable }

    open func Lookup(_ key: String) throws -> Any? {
        let (result) = try ComPtrs.initialize { resultAbi in
            let _key = try! HString(key)
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_IInspectable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, _key.get(), &resultAbi))
            }
        }
        return __ABI_.AnyWrapper.unwrapFrom(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func HasKey(_ key: String) throws -> Bool {
        var result: boolean = 0
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, _key.get(), &result))
        }
        return .init(from: result)
    }

    open func GetView() throws -> WindowsFoundation.AnyIMapView<String, Any?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_IInspectable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: result)
    }

    open func Insert(_ key: String, _ value: Any?) throws -> Bool {
        var result: boolean = 0
        let _key = try! HString(key)
        let valueWrapper = __ABI_.AnyWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Insert(pThis, _key.get(), _value, &result))
        }
        return .init(from: result)
    }

    open func Remove(_ key: String) throws {
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Remove(pThis, _key.get()))
        }
    }

    open func Clear() throws {
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

}

internal enum __x_ABI_C__FIMap_2_HSTRING_IInspectableBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIMap_2_HSTRING_IInspectable
    internal typealias SwiftABI = IMapString_Any
    internal typealias SwiftProjection = WindowsFoundation.AnyIMap<String, Any?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMap_2_HSTRING_IInspectableImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMap_2_HSTRING_IInspectableVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIMap_2_HSTRING_IInspectableImpl : IMap, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, Any?>?
    typealias K = String
    typealias V = Any?
    typealias Bridge = __x_ABI_C__FIMap_2_HSTRING_IInspectableBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.lookup)
    fileprivate func lookup(_ key: String) -> Any? {
        try! _default.Lookup(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.haskey)
    fileprivate func hasKey(_ key: String) -> Bool {
        try! _default.HasKey(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.getview)
    fileprivate func getView() -> WindowsFoundation.AnyIMapView<String, Any?>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.insert)
    fileprivate func insert(_ key: String, _ value: Any?) -> Bool {
        try! _default.Insert(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.remove)
    fileprivate func remove(_ key: String) {
        try! _default.Remove(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.clear)
    fileprivate func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_Any! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, Any?>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFace: WindowsFoundation.IID {
    .init(Data1: 0xf90149d7, Data2: 0x8a7e, Data3: 0x5e74, Data4: ( 0xa2,0x51,0x9e,0x92,0xf5,0xa8,0x08,0x4d ))// f90149d7-8a7e-5e74-a251-9e92f5a8084d
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceVTable: __x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper.IID
        iids[3] = Win2D.__x_ABI_C__FIIterable_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Microsoft.Graphics.Canvas.Text.CanvasFontFace>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: Win2D.CanvasFontFace? = __IMPL_Microsoft_Graphics_Canvas_Text.CanvasFontFaceBridge.from(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [Win2D.CanvasFontFace?] = .from(abiBridge: __IMPL_Microsoft_Graphics_Canvas_Text.CanvasFontFaceBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: __IMPL_Microsoft_Graphics_Canvas_Text.CanvasFontFaceBridge.self)
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceBridge>
public class IVectorViewCanvasFontFace: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFace }

    open func GetAt(_ index: UInt32) throws -> Win2D.CanvasFontFace? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return __IMPL_Microsoft_Graphics_Canvas_Text.CanvasFontFaceBridge.from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: Win2D.CanvasFontFace?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFace.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, RawPointer(value), &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [Win2D.CanvasFontFace?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Microsoft_Graphics_Canvas_Text.CanvasFontFaceBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Microsoft_Graphics_Canvas_Text.CanvasFontFaceBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFace
    internal typealias SwiftABI = IVectorViewCanvasFontFace
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<Win2D.CanvasFontFace?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceImpl : IVectorView, AbiInterfaceImpl {
    typealias T = Win2D.CanvasFontFace?
    typealias Bridge = __x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> Win2D.CanvasFontFace? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: Win2D.CanvasFontFace?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [Win2D.CanvasFontFace?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableCanvasFontFace! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<Win2D.CanvasFontFace?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1_HSTRING: WindowsFoundation.IID {
    .init(Data1: 0x2f13c006, Data2: 0xa03a, Data3: 0x5f69, Data4: ( 0xb0,0x90,0x75,0xa4,0x3e,0x33,0x42,0x3e ))// 2f13c006-a03a-5f69-b090-75a43e33423e
}

internal var __x_ABI_C__FIVectorView_1_HSTRINGVTable: __x_ABI_C__FIVectorView_1_HSTRINGVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1_HSTRINGWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1_HSTRINGWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1_HSTRINGWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.IID
        iids[3] = Win2D.__x_ABI_C__FIIterable_1_HSTRINGWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<String>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        $2?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: String = .init(from: $1)
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [String] = .from(abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        do {
            try items.fill(abi: $3)
        } catch { return failWith(error: error) }
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1_HSTRINGWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIVectorView_1_HSTRINGBridge>
public class IVectorViewString: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1_HSTRING }

    open func GetAt(_ index: UInt32) throws -> String {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIVectorView_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
        }
        return .init(from: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: String, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        let _value = try! HString(value)
        _ = try perform(as: __x_ABI_C__FIVectorView_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, _value.get(), &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [String]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1_HSTRINGBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1_HSTRING
    internal typealias SwiftABI = IVectorViewString
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<String>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1_HSTRINGImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1_HSTRINGVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1_HSTRINGImpl : IVectorView, AbiInterfaceImpl {
    typealias T = String
    typealias Bridge = __x_ABI_C__FIVectorView_1_HSTRINGBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> String {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: String, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [String]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableString! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<String>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi: WindowsFoundation.IID {
    .init(Data1: 0x67c4d9c7, Data2: 0xc31e, Data3: 0x51c1, Data4: ( 0xab,0x1d,0xf8,0xa0,0xeb,0xcd,0x55,0x52 ))// 67c4d9c7-c31e-51c1-ab1d-f8a0ebcd5552
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVTable: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.IID
        iids[3] = Win2D.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedBidi>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        let resultWrapper = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedBidi>? = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.unwrapFrom(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedBidi>?] = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiBridge.self)
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiBridge>
public class IVectorViewIKeyValuePairCanvasCharacterRange_CanvasAnalyzedBidi: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi }

    open func GetAt(_ index: UInt32) throws -> WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedBidi>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.unwrapFrom(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedBidi>?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        let valueWrapper = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, _value, &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedBidi>?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidi
    internal typealias SwiftABI = IVectorViewIKeyValuePairCanvasCharacterRange_CanvasAnalyzedBidi
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedBidi>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiImpl : IVectorView, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedBidi>?
    typealias Bridge = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedBidi>? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedBidi>?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedBidi>?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairCanvasCharacterRange_CanvasAnalyzedBidi! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedBidi>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation: WindowsFoundation.IID {
    .init(Data1: 0xce1ccf50, Data2: 0xcc60, Data3: 0x5c33, Data4: ( 0x98,0xd5,0xfb,0x6e,0xa3,0x81,0x31,0xbd ))// ce1ccf50-cc60-5c33-98d5-fb6ea38131bd
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVTable: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.IID
        iids[3] = Win2D.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedGlyphOrientation>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        let resultWrapper = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedGlyphOrientation>? = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.unwrapFrom(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedGlyphOrientation>?] = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationBridge.self)
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationBridge>
public class IVectorViewIKeyValuePairCanvasCharacterRange_CanvasAnalyzedGlyphOrientation: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation }

    open func GetAt(_ index: UInt32) throws -> WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedGlyphOrientation>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.unwrapFrom(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedGlyphOrientation>?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        let valueWrapper = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, _value, &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedGlyphOrientation>?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientation
    internal typealias SwiftABI = IVectorViewIKeyValuePairCanvasCharacterRange_CanvasAnalyzedGlyphOrientation
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedGlyphOrientation>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationImpl : IVectorView, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedGlyphOrientation>?
    typealias Bridge = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedGlyphOrientation>? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedGlyphOrientation>?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedGlyphOrientation>?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairCanvasCharacterRange_CanvasAnalyzedGlyphOrientation! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedGlyphOrientation>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript: WindowsFoundation.IID {
    .init(Data1: 0x9b325f09, Data2: 0xf744, Data3: 0x53fd, Data4: ( 0xac,0xc7,0xd5,0xe6,0xfe,0xa5,0x23,0xd7 ))// 9b325f09-f744-53fd-acc7-d5e6fea523d7
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVTable: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.IID
        iids[3] = Win2D.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasAnalyzedScript>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        let resultWrapper = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedScript>? = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.unwrapFrom(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedScript>?] = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptBridge.self)
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptBridge>
public class IVectorViewIKeyValuePairCanvasCharacterRange_CanvasAnalyzedScript: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript }

    open func GetAt(_ index: UInt32) throws -> WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedScript>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.unwrapFrom(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedScript>?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        let valueWrapper = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, _value, &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedScript>?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScript
    internal typealias SwiftABI = IVectorViewIKeyValuePairCanvasCharacterRange_CanvasAnalyzedScript
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedScript>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptImpl : IVectorView, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedScript>?
    typealias Bridge = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedScript>? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedScript>?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedScript>?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairCanvasCharacterRange_CanvasAnalyzedScript! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedScript>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution: WindowsFoundation.IID {
    .init(Data1: 0x80a1114f, Data2: 0x758f, Data3: 0x5110, Data4: ( 0xba,0xa8,0xf1,0x88,0x4a,0x7b,0xb9,0x22 ))// 80a1114f-758f-5110-baa8-f1884a7bb922
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVTable: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.IID
        iids[3] = Win2D.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasNumberSubstitution>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        let resultWrapper = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasNumberSubstitution?>? = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.unwrapFrom(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasNumberSubstitution?>?] = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionBridge.self)
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionBridge>
public class IVectorViewIKeyValuePairCanvasCharacterRange_CanvasNumberSubstitution: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution }

    open func GetAt(_ index: UInt32) throws -> WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasNumberSubstitution?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.unwrapFrom(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasNumberSubstitution?>?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        let valueWrapper = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, _value, &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasNumberSubstitution?>?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitution
    internal typealias SwiftABI = IVectorViewIKeyValuePairCanvasCharacterRange_CanvasNumberSubstitution
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasNumberSubstitution?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionImpl : IVectorView, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasNumberSubstitution?>?
    typealias Bridge = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasNumberSubstitution?>? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasNumberSubstitution?>?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasNumberSubstitution?>?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairCanvasCharacterRange_CanvasNumberSubstitution! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasNumberSubstitution?>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFont: WindowsFoundation.IID {
    .init(Data1: 0xf1eaee0a, Data2: 0x1f12, Data3: 0x5e87, Data4: ( 0x96,0x57,0xcb,0x93,0xe8,0x82,0x7b,0xb0 ))// f1eaee0a-1f12-5e87-9657-cb93e8827bb0
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontVTable: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.IID
        iids[3] = Win2D.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasScaledFont>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        let resultWrapper = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasScaledFont?>? = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.unwrapFrom(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasScaledFont?>?] = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontBridge.self)
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontBridge>
public class IVectorViewIKeyValuePairCanvasCharacterRange_CanvasScaledFont: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFont }

    open func GetAt(_ index: UInt32) throws -> WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasScaledFont?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFont.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.unwrapFrom(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFont.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasScaledFont?>?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        let valueWrapper = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFont.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, _value, &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasScaledFont?>?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFont.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFont
    internal typealias SwiftABI = IVectorViewIKeyValuePairCanvasCharacterRange_CanvasScaledFont
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasScaledFont?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontImpl : IVectorView, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasScaledFont?>?
    typealias Bridge = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasScaledFont?>? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasScaledFont?>?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasScaledFont?>?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairCanvasCharacterRange_CanvasScaledFont! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasScaledFont?>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypography: WindowsFoundation.IID {
    .init(Data1: 0x08f216fc, Data2: 0x38e5, Data3: 0x5c04, Data4: ( 0xbb,0x90,0xed,0x04,0x36,0xcd,0xf9,0x1d ))// 08f216fc-38e5-5c04-bb90-ed0436cdf91d
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyVTable: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.IID
        iids[3] = Win2D.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Windows.Foundation.Collections.IKeyValuePair`2<Microsoft.Graphics.Canvas.Text.CanvasCharacterRange, Microsoft.Graphics.Canvas.Text.CanvasTypography>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        let resultWrapper = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasTypography?>? = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.unwrapFrom(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasTypography?>?] = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyBridge.self)
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyBridge>
public class IVectorViewIKeyValuePairCanvasCharacterRange_CanvasTypography: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypography }

    open func GetAt(_ index: UInt32) throws -> WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasTypography?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypography.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper.unwrapFrom(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypography.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasTypography?>?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        let valueWrapper = Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypography.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, _value, &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasTypography?>?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypography.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: Win2D.__x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypography
    internal typealias SwiftABI = IVectorViewIKeyValuePairCanvasCharacterRange_CanvasTypography
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasTypography?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyImpl : IVectorView, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasTypography?>?
    typealias Bridge = __x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasTypography?>? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasTypography?>?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasTypography?>?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairCanvasCharacterRange_CanvasTypography! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasTypography?>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource: WindowsFoundation.IID {
    .init(Data1: 0x74afa1ad, Data2: 0x285c, Data3: 0x5bc4, Data4: ( 0x99,0x36,0x43,0x38,0xf1,0x9d,0x79,0x79 ))// 74afa1ad-285c-5bc4-9936-4338f19d7979
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceVTable: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.IID
        iids[3] = Win2D.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Windows.Graphics.Effects.IGraphicsEffectSource>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        let resultWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.AnyIGraphicsEffectSource? = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [UWP.AnyIGraphicsEffectSource?] = .from(abiBridge: __IMPL_Windows_Graphics_Effects.IGraphicsEffectSourceBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: __IMPL_Windows_Graphics_Effects.IGraphicsEffectSourceBridge.self)
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceBridge>
public class IVectorViewIGraphicsEffectSource: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource }

    open func GetAt(_ index: UInt32) throws -> UWP.AnyIGraphicsEffectSource? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: UWP.AnyIGraphicsEffectSource?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        let valueWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, _value, &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [UWP.AnyIGraphicsEffectSource?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_Graphics_Effects.IGraphicsEffectSourceBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_Graphics_Effects.IGraphicsEffectSourceBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource
    internal typealias SwiftABI = IVectorViewIGraphicsEffectSource
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<UWP.AnyIGraphicsEffectSource?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceImpl : IVectorView, AbiInterfaceImpl {
    typealias T = UWP.AnyIGraphicsEffectSource?
    typealias Bridge = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> UWP.AnyIGraphicsEffectSource? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: UWP.AnyIGraphicsEffectSource?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [UWP.AnyIGraphicsEffectSource?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIGraphicsEffectSource! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.AnyIGraphicsEffectSource?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource: WindowsFoundation.IID {
    .init(Data1: 0xb5a2f91f, Data2: 0x1f97, Data3: 0x50ef, Data4: ( 0xba,0x3f,0x27,0xae,0xcb,0xfb,0x6d,0x0a ))// b5a2f91f-1f97-50ef-ba3f-27aecbfb6d0a
}

internal var __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceVTable: __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.IID
        iids[3] = Win2D.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVector`1<Windows.Graphics.Effects.IGraphicsEffectSource>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        let resultWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = Win2D.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.AnyIGraphicsEffectSource? = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    SetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: UWP.AnyIGraphicsEffectSource? = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: ComPtr($2))
        __unwrapped__instance.setAt(index, value)
        return S_OK
    },

    InsertAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: UWP.AnyIGraphicsEffectSource? = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: ComPtr($2))
        __unwrapped__instance.insertAt(index, value)
        return S_OK
    },

    RemoveAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        __unwrapped__instance.removeAt(index)
        return S_OK
    },

    Append: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.AnyIGraphicsEffectSource? = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: ComPtr($1))
        __unwrapped__instance.append(value)
        return S_OK
    },

    RemoveAtEnd: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.removeAtEnd()
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [UWP.AnyIGraphicsEffectSource?] = .from(abiBridge: __IMPL_Windows_Graphics_Effects.IGraphicsEffectSourceBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: __IMPL_Windows_Graphics_Effects.IGraphicsEffectSourceBridge.self)
        $4?.initialize(to: result)
        return S_OK
    },

    ReplaceAll: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let items: [UWP.AnyIGraphicsEffectSource?] = .from(abiBridge: __IMPL_Windows_Graphics_Effects.IGraphicsEffectSourceBridge.self, abi: (count: $1, start: $2))
        __unwrapped__instance.replaceAll(items)
        return S_OK
    }
)
typealias __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceBridge>
public class IVectorIGraphicsEffectSource: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource }

    open func GetAt(_ index: UInt32) throws -> UWP.AnyIGraphicsEffectSource? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper.unwrapFrom(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func GetView() throws -> WindowsFoundation.AnyIVectorView<UWP.AnyIGraphicsEffectSource?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceWrapper.unwrapFrom(abi: result)
    }

    open func IndexOf(_ value: UWP.AnyIGraphicsEffectSource?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        let valueWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, _value, &index, &result))
        }
        return .init(from: result)
    }

    open func SetAt(_ index: UInt32, _ value: UWP.AnyIGraphicsEffectSource?) throws {
        let valueWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, _value))
        }
    }

    open func InsertAt(_ index: UInt32, _ value: UWP.AnyIGraphicsEffectSource?) throws {
        let valueWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, _value))
        }
    }

    open func RemoveAt(_ index: UInt32) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }

    open func Append(_ value: UWP.AnyIGraphicsEffectSource?) throws {
        let valueWrapper = __ABI_Windows_Graphics_Effects.IGraphicsEffectSourceWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, _value))
        }
    }

    open func RemoveAtEnd() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }

    open func Clear() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [UWP.AnyIGraphicsEffectSource?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_Graphics_Effects.IGraphicsEffectSourceBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_Graphics_Effects.IGraphicsEffectSourceBridge.self, abi: _items)
        }
        return result
    }

    open func ReplaceAll(_ items: [UWP.AnyIGraphicsEffectSource?]) throws {
        try items.toABI(abiBridge: __IMPL_Windows_Graphics_Effects.IGraphicsEffectSourceBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, _items.count, _items.start))
            }
        }
    }

}

internal enum __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSource
    internal typealias SwiftABI = IVectorIGraphicsEffectSource
    internal typealias SwiftProjection = WindowsFoundation.AnyIVector<UWP.AnyIGraphicsEffectSource?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceImpl : IVector, AbiInterfaceImpl {
    typealias T = UWP.AnyIGraphicsEffectSource?
    typealias Bridge = __x_ABI_C__FIVector_1___x_ABI_CWindows__CGraphics__CEffects__CIGraphicsEffectSourceBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }


    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getat)
    fileprivate func getAt(_ index: UInt32) -> UWP.AnyIGraphicsEffectSource? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getview)
    fileprivate func getView() -> WindowsFoundation.AnyIVectorView<UWP.AnyIGraphicsEffectSource?>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.indexof)
    fileprivate func indexOf(_ value: UWP.AnyIGraphicsEffectSource?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.setat)
    fileprivate func setAt(_ index: UInt32, _ value: UWP.AnyIGraphicsEffectSource?) {
        try! _default.SetAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.insertat)
    fileprivate func insertAt(_ index: UInt32, _ value: UWP.AnyIGraphicsEffectSource?) {
        try! _default.InsertAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.removeat)
    fileprivate func removeAt(_ index: UInt32) {
        try! _default.RemoveAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.append)
    fileprivate func append(_ value: UWP.AnyIGraphicsEffectSource?) {
        try! _default.Append(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.removeatend)
    fileprivate func removeAtEnd() {
        try! _default.RemoveAtEnd()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.clear)
    fileprivate func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [UWP.AnyIGraphicsEffectSource?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.replaceall)
    fileprivate func replaceAll(_ items: [UWP.AnyIGraphicsEffectSource?]) {
        try! _default.ReplaceAll(items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIGraphicsEffectSource! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.AnyIGraphicsEffectSource?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap: WindowsFoundation.IID {
    .init(Data1: 0x0391e8ef, Data2: 0x719a, Data3: 0x5c80, Data4: ( 0xb8,0x7a,0x7d,0x90,0x2b,0x15,0x4e,0x3e ))// 0391e8ef-719a-5c80-b87a-7d902b154e3e
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Microsoft.Graphics.Canvas.CanvasBitmap>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = Win2D.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = Win2D.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            result?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapBridge>
public class IAsyncOperationCanvasBitmap: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<Win2D.CanvasBitmap?>?) throws {
        let handlerWrapper = Win2D.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<Win2D.CanvasBitmap?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> Win2D.CanvasBitmap? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __IMPL_Microsoft_Graphics_Canvas.CanvasBitmapBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmap
    internal typealias SwiftABI = IAsyncOperationCanvasBitmap
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasBitmap?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = Win2D.CanvasBitmap?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBitmapBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> Win2D.CanvasBitmap? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<Win2D.CanvasBitmap?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap: WindowsFoundation.IID {
    .init(Data1: 0xd47cfc52, Data2: 0x5abc, Data3: 0x550b, Data4: ( 0xad,0x7c,0x63,0xb5,0xae,0xc8,0xca,0x3a ))// d47cfc52-5abc-550b-ad7c-63b5aec8ca3a
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Microsoft.Graphics.Canvas.CanvasVirtualBitmap>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = Win2D.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = Win2D.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            result?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapBridge>
public class IAsyncOperationCanvasVirtualBitmap: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<Win2D.CanvasVirtualBitmap?>?) throws {
        let handlerWrapper = Win2D.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<Win2D.CanvasVirtualBitmap?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> Win2D.CanvasVirtualBitmap? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __IMPL_Microsoft_Graphics_Canvas.CanvasVirtualBitmapBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmap
    internal typealias SwiftABI = IAsyncOperationCanvasVirtualBitmap
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasVirtualBitmap?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = Win2D.CanvasVirtualBitmap?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasVirtualBitmapBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> Win2D.CanvasVirtualBitmap? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<Win2D.CanvasVirtualBitmap?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument: WindowsFoundation.IID {
    .init(Data1: 0x63adbeeb, Data2: 0xf748, Data3: 0x5aec, Data4: ( 0xa9,0xd3,0x5f,0xd7,0x31,0xb2,0xbc,0x67 ))// 63adbeeb-f748-5aec-a9d3-5fd731b2bc67
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Microsoft.Graphics.Canvas.Svg.CanvasSvgDocument>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = Win2D.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = Win2D.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            result?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentBridge>
public class IAsyncOperationCanvasSvgDocument: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<Win2D.CanvasSvgDocument?>?) throws {
        let handlerWrapper = Win2D.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<Win2D.CanvasSvgDocument?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> Win2D.CanvasSvgDocument? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __IMPL_Microsoft_Graphics_Canvas_Svg.CanvasSvgDocumentBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocument
    internal typealias SwiftABI = IAsyncOperationCanvasSvgDocument
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasSvgDocument?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = Win2D.CanvasSvgDocument?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgDocumentBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> Win2D.CanvasSvgDocument? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<Win2D.CanvasSvgDocument?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement: WindowsFoundation.IID {
    .init(Data1: 0x68a752f6, Data2: 0x827a, Data3: 0x5816, Data4: ( 0x8e,0x65,0x0b,0x33,0x42,0x67,0x30,0x75 ))// 68a752f6-827a-5816-8e65-0b3342673075
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Microsoft.Graphics.Canvas.Svg.CanvasSvgNamedElement>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = Win2D.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = Win2D.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            result?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementBridge>
public class IAsyncOperationCanvasSvgNamedElement: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<Win2D.CanvasSvgNamedElement?>?) throws {
        let handlerWrapper = Win2D.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<Win2D.CanvasSvgNamedElement?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return Win2D.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> Win2D.CanvasSvgNamedElement? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __IMPL_Microsoft_Graphics_Canvas_Svg.CanvasSvgNamedElementBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElement
    internal typealias SwiftABI = IAsyncOperationCanvasSvgNamedElement
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<Win2D.CanvasSvgNamedElement?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = Win2D.CanvasSvgNamedElement?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CSvg__CCanvasSvgNamedElementBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> Win2D.CanvasSvgNamedElement? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<Win2D.CanvasSvgNamedElement?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecision: WindowsFoundation.IID {
    .init(Data1: 0x8bff1f50, Data2: 0xaef3, Data3: 0x558e, Data4: ( 0xa0,0x2b,0x58,0x9b,0x6c,0x0c,0xfe,0xa8 ))// 8bff1f50-aef3-558e-a02b-589b6c0cfea8
}

internal enum __x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecisionBridge: ReferenceBridge {
    typealias CABI = __x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecision
    typealias SwiftProjection = Win2D.CanvasBufferPrecision
    static var IID: WindowsFoundation.IID { IID___x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecision }

    static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let val = abi else { return nil }
        var result: __x_ABI_CMicrosoft_CGraphics_CCanvas_CCanvasBufferPrecision = .init(0)
        try! CHECKED(val.get().pointee.lpVtbl.pointee.get_Value(val.get(), &result))
        return result
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecisionVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
internal var __x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecisionVTable: __x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecisionVtbl = .init(
    QueryInterface: { __x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecisionWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecisionWrapper.addRef($0) },
    Release: { __x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecisionWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecisionWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IPropertyValueWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IReference`1<Microsoft.Graphics.Canvas.CanvasBufferPrecision>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecisionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance
        $1?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecisionWrapper = ReferenceWrapperBase<Win2D.__x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasBufferPrecisionBridge>
private var IID___x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile: WindowsFoundation.IID {
    .init(Data1: 0x41db10c7, Data2: 0xf02c, Data3: 0x5d7f, Data4: ( 0xa1,0x2e,0x4e,0x05,0x04,0x73,0x88,0xe7 ))// 41db10c7-f02c-5d7f-a12e-4e05047388e7
}

internal enum __x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfileBridge: ReferenceBridge {
    typealias CABI = __x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile
    typealias SwiftProjection = Win2D.ColorManagementSimpleProfile
    static var IID: WindowsFoundation.IID { IID___x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfile }

    static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let val = abi else { return nil }
        var result: __x_ABI_CMicrosoft_CGraphics_CCanvas_CEffects_CColorManagementSimpleProfile = .init()
        try! CHECKED(val.get().pointee.lpVtbl.pointee.get_Value(val.get(), &result))
        return .from(abi: result)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfileVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
internal var __x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfileVTable: __x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfileVtbl = .init(
    QueryInterface: { __x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfileWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfileWrapper.addRef($0) },
    Release: { __x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfileWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfileWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IPropertyValueWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IReference`1<Microsoft.Graphics.Canvas.Effects.ColorManagementSimpleProfile>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance
        $1?.initialize(to: .from(swift: result))
        return S_OK
    }
)
typealias __x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfileWrapper = ReferenceWrapperBase<Win2D.__x_ABI_C__FIReference_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CEffects__CColorManagementSimpleProfileBridge>
private var IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect: WindowsFoundation.IID {
    .init(Data1: 0x80423f11, Data2: 0x054f, Data3: 0x5eac, Data4: ( 0xaf,0xd3,0x63,0xb6,0xce,0x15,0xe7,0x7b ))// 80423f11-054f-5eac-afd3-63b6ce15e77b
}

internal enum __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectBridge: ReferenceBridge {
    typealias CABI = __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect
    typealias SwiftProjection = WindowsFoundation.Rect
    static var IID: WindowsFoundation.IID { IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect }

    static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let val = abi else { return nil }
        var result: __x_ABI_CWindows_CFoundation_CRect = .init()
        try! CHECKED(val.get().pointee.lpVtbl.pointee.get_Value(val.get(), &result))
        return .from(abi: result)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
internal var __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectVTable: __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectVtbl = .init(
    QueryInterface: { __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectWrapper.addRef($0) },
    Release: { __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = Win2D.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IPropertyValueWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IReference`1<Windows.Foundation.Rect>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance
        $1?.initialize(to: .from(swift: result))
        return S_OK
    }
)
typealias __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectWrapper = ReferenceWrapperBase<Win2D.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectBridge>
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0xef539eb5, Data2: 0xaa23, Data3: 0x573f, Data4: ( 0xba,0x41,0xcc,0xd7,0xf3,0x15,0x0c,0x5b ))// ef539eb5-aa23-573f-ba41-ccd7f3150c5b
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectable {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectableVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectableVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectableWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Win2D.CanvasDevice? = __IMPL_Microsoft_Graphics_Canvas.CanvasDeviceBridge.from(abi: ComPtr($1))
            let args: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectableWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectableBridge>
public class TypedEventHandlerCanvasDevice_Any: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectable }

    open func Invoke(_ sender: Win2D.CanvasDevice?, _ args: Any?) throws {
        let argsWrapper = __ABI_.AnyWrapper(args)
        let _args = try! argsWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), _args))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectableBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<Win2D.CanvasDevice?, Any?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CCanvasDevice_IInspectable
    internal typealias SwiftABI = Win2D.TypedEventHandlerCanvasDevice_Any

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xa29acd34, Data2: 0x5ab2, Data3: 0x50ff, Data4: ( 0xb0,0x2d,0xe6,0x73,0x71,0x95,0xde,0x24 ))// a29acd34-5ab2-50ff-b02d-e6737195de24
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Win2D.CanvasAnimatedControl? = __IMPL_Microsoft_Graphics_Canvas_UI_Xaml.CanvasAnimatedControlBridge.from(abi: ComPtr($1))
            let args: Win2D.CanvasCreateResourcesEventArgs? = __IMPL_Microsoft_Graphics_Canvas_UI.CanvasCreateResourcesEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsBridge>
public class TypedEventHandlerCanvasAnimatedControl_CanvasCreateResourcesEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs }

    open func Invoke(_ sender: Win2D.CanvasAnimatedControl?, _ args: Win2D.CanvasCreateResourcesEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<Win2D.CanvasAnimatedControl?, Win2D.CanvasCreateResourcesEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs
    internal typealias SwiftABI = Win2D.TypedEventHandlerCanvasAnimatedControl_CanvasCreateResourcesEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xffcd91a9, Data2: 0xb0f6, Data3: 0x5e59, Data4: ( 0xb8,0x15,0x05,0x81,0x12,0x92,0x40,0xe6 ))// ffcd91a9-b0f6-5e59-b815-0581129240e6
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Win2D.CanvasControl? = __IMPL_Microsoft_Graphics_Canvas_UI_Xaml.CanvasControlBridge.from(abi: ComPtr($1))
            let args: Win2D.CanvasCreateResourcesEventArgs? = __IMPL_Microsoft_Graphics_Canvas_UI.CanvasCreateResourcesEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsBridge>
public class TypedEventHandlerCanvasControl_CanvasCreateResourcesEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs }

    open func Invoke(_ sender: Win2D.CanvasControl?, _ args: Win2D.CanvasCreateResourcesEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<Win2D.CanvasControl?, Win2D.CanvasCreateResourcesEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs
    internal typealias SwiftABI = Win2D.TypedEventHandlerCanvasControl_CanvasCreateResourcesEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x6b0b7674, Data2: 0xc32a, Data3: 0x59f5, Data4: ( 0xba,0x42,0x79,0xcd,0x2f,0xd7,0xf0,0x23 ))// 6b0b7674-c32a-59f5-ba42-79cd2fd7f023
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Win2D.CanvasControl? = __IMPL_Microsoft_Graphics_Canvas_UI_Xaml.CanvasControlBridge.from(abi: ComPtr($1))
            let args: Win2D.CanvasDrawEventArgs? = __IMPL_Microsoft_Graphics_Canvas_UI_Xaml.CanvasDrawEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgsWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgsBridge>
public class TypedEventHandlerCanvasControl_CanvasDrawEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs }

    open func Invoke(_ sender: Win2D.CanvasControl?, _ args: Win2D.CanvasDrawEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<Win2D.CanvasControl?, Win2D.CanvasDrawEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasDrawEventArgs
    internal typealias SwiftABI = Win2D.TypedEventHandlerCanvasControl_CanvasDrawEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x82c7431b, Data2: 0x0f55, Data3: 0x5f54, Data4: ( 0x8d,0xd8,0xf9,0xa8,0x32,0x7d,0xf1,0x23 ))// 82c7431b-0f55-5f54-8dd8-f9a8327df123
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Win2D.CanvasVirtualControl? = __IMPL_Microsoft_Graphics_Canvas_UI_Xaml.CanvasVirtualControlBridge.from(abi: ComPtr($1))
            let args: Win2D.CanvasCreateResourcesEventArgs? = __IMPL_Microsoft_Graphics_Canvas_UI.CanvasCreateResourcesEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsBridge>
public class TypedEventHandlerCanvasVirtualControl_CanvasCreateResourcesEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs }

    open func Invoke(_ sender: Win2D.CanvasVirtualControl?, _ args: Win2D.CanvasCreateResourcesEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<Win2D.CanvasVirtualControl?, Win2D.CanvasCreateResourcesEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CCanvasCreateResourcesEventArgs
    internal typealias SwiftABI = Win2D.TypedEventHandlerCanvasVirtualControl_CanvasCreateResourcesEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x9a63a22f, Data2: 0x5ad4, Data3: 0x5195, Data4: ( 0xbe,0xb6,0x9b,0x73,0xb4,0x30,0x44,0x43 ))// 9a63a22f-5ad4-5195-beb6-9b73b4304443
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Win2D.CanvasVirtualControl? = __IMPL_Microsoft_Graphics_Canvas_UI_Xaml.CanvasVirtualControlBridge.from(abi: ComPtr($1))
            let args: Win2D.CanvasRegionsInvalidatedEventArgs? = __IMPL_Microsoft_Graphics_Canvas_UI_Xaml.CanvasRegionsInvalidatedEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsBridge>
public class TypedEventHandlerCanvasVirtualControl_CanvasRegionsInvalidatedEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs }

    open func Invoke(_ sender: Win2D.CanvasVirtualControl?, _ args: Win2D.CanvasRegionsInvalidatedEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<Win2D.CanvasVirtualControl?, Win2D.CanvasRegionsInvalidatedEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs
    internal typealias SwiftABI = Win2D.TypedEventHandlerCanvasVirtualControl_CanvasRegionsInvalidatedEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xfed1b996, Data2: 0xf368, Data3: 0x58b3, Data4: ( 0xbc,0xcd,0x8e,0xba,0xcf,0x66,0x11,0xb2 ))// fed1b996-f368-58b3-bccd-8ebacf6611b2
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Win2D.CanvasVirtualImageSource? = __IMPL_Microsoft_Graphics_Canvas_UI_Xaml.CanvasVirtualImageSourceBridge.from(abi: ComPtr($1))
            let args: Win2D.CanvasRegionsInvalidatedEventArgs? = __IMPL_Microsoft_Graphics_Canvas_UI_Xaml.CanvasRegionsInvalidatedEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsBridge>
public class TypedEventHandlerCanvasVirtualImageSource_CanvasRegionsInvalidatedEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs }

    open func Invoke(_ sender: Win2D.CanvasVirtualImageSource?, _ args: Win2D.CanvasRegionsInvalidatedEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<Win2D.CanvasVirtualImageSource?, Win2D.CanvasRegionsInvalidatedEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasVirtualImageSource___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasRegionsInvalidatedEventArgs
    internal typealias SwiftABI = Win2D.TypedEventHandlerCanvasVirtualImageSource_CanvasRegionsInvalidatedEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0x17e87476, Data2: 0x4ea7, Data3: 0x5920, Data4: ( 0xa4,0x9e,0xa7,0xa9,0xe3,0x83,0xc7,0xdc ))// 17e87476-4ea7-5920-a49e-a7a9e383c7dc
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectableVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectableVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectableWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Win2D.AnyICanvasAnimatedControl? = __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasAnimatedControlWrapper.unwrapFrom(abi: ComPtr($1))
            let args: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectableWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectableBridge>
public class TypedEventHandlerICanvasAnimatedControl_Any: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable }

    open func Invoke(_ sender: Win2D.AnyICanvasAnimatedControl?, _ args: Any?) throws {
        let senderWrapper = __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasAnimatedControlWrapper(sender)
        let _sender = try! senderWrapper?.toABI { $0 }
        let argsWrapper = __ABI_.AnyWrapper(args)
        let _args = try! argsWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, _args))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectableBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<Win2D.AnyICanvasAnimatedControl?, Any?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl_IInspectable
    internal typealias SwiftABI = Win2D.TypedEventHandlerICanvasAnimatedControl_Any

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x00ddd999, Data2: 0x594e, Data3: 0x5c0f, Data4: ( 0xb4,0xa0,0x52,0xb0,0x11,0x71,0xdc,0xd6 ))// 00ddd999-594e-5c0f-b4a0-52b01171dcd6
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Win2D.AnyICanvasAnimatedControl? = __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasAnimatedControlWrapper.unwrapFrom(abi: ComPtr($1))
            let args: Win2D.CanvasAnimatedDrawEventArgs? = __IMPL_Microsoft_Graphics_Canvas_UI_Xaml.CanvasAnimatedDrawEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgsWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgsBridge>
public class TypedEventHandlerICanvasAnimatedControl_CanvasAnimatedDrawEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs }

    open func Invoke(_ sender: Win2D.AnyICanvasAnimatedControl?, _ args: Win2D.CanvasAnimatedDrawEventArgs?) throws {
        let senderWrapper = __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasAnimatedControlWrapper(sender)
        let _sender = try! senderWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<Win2D.AnyICanvasAnimatedControl?, Win2D.CanvasAnimatedDrawEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedDrawEventArgs
    internal typealias SwiftABI = Win2D.TypedEventHandlerICanvasAnimatedControl_CanvasAnimatedDrawEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xf3505553, Data2: 0x11e9, Data3: 0x548c, Data4: ( 0x80,0xb6,0x33,0xe5,0x6d,0x2e,0x67,0x3b ))// f3505553-11e9-548c-80b6-33e56d2e673b
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Win2D.AnyICanvasAnimatedControl? = __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasAnimatedControlWrapper.unwrapFrom(abi: ComPtr($1))
            let args: Win2D.CanvasAnimatedUpdateEventArgs? = __IMPL_Microsoft_Graphics_Canvas_UI_Xaml.CanvasAnimatedUpdateEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgsWrapper = InterfaceWrapperBase<Win2D.__x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgsBridge>
public class TypedEventHandlerICanvasAnimatedControl_CanvasAnimatedUpdateEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs }

    open func Invoke(_ sender: Win2D.AnyICanvasAnimatedControl?, _ args: Win2D.CanvasAnimatedUpdateEventArgs?) throws {
        let senderWrapper = __ABI_Microsoft_Graphics_Canvas_UI_Xaml.ICanvasAnimatedControlWrapper(sender)
        let _sender = try! senderWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<Win2D.AnyICanvasAnimatedControl?, Win2D.CanvasAnimatedUpdateEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CICanvasAnimatedControl___x_ABI_CMicrosoft__CGraphics__CCanvas__CUI__CXaml__CCanvasAnimatedUpdateEventArgs
    internal typealias SwiftABI = Win2D.TypedEventHandlerICanvasAnimatedControl_CanvasAnimatedUpdateEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
public extension EventSource where Handler == TypedEventHandler<CanvasAnimatedControl?, CanvasCreateResourcesEventArgs?> {
    func invoke(_ sender: Win2D.CanvasAnimatedControl!, _ args: Win2D.CanvasCreateResourcesEventArgs!) throws {
        for handler in getInvocationList() {
            try handler(sender, args)
        }
    }
}

public extension EventSource where Handler == TypedEventHandler<ICanvasAnimatedControl?, Any?> {
    func invoke(_ sender: Win2D.AnyICanvasAnimatedControl!, _ args: Any!) throws {
        for handler in getInvocationList() {
            try handler(sender, args)
        }
    }
}

public extension EventSource where Handler == TypedEventHandler<ICanvasAnimatedControl?, CanvasAnimatedDrawEventArgs?> {
    func invoke(_ sender: Win2D.AnyICanvasAnimatedControl!, _ args: Win2D.CanvasAnimatedDrawEventArgs!) throws {
        for handler in getInvocationList() {
            try handler(sender, args)
        }
    }
}

public extension EventSource where Handler == TypedEventHandler<ICanvasAnimatedControl?, CanvasAnimatedUpdateEventArgs?> {
    func invoke(_ sender: Win2D.AnyICanvasAnimatedControl!, _ args: Win2D.CanvasAnimatedUpdateEventArgs!) throws {
        for handler in getInvocationList() {
            try handler(sender, args)
        }
    }
}

