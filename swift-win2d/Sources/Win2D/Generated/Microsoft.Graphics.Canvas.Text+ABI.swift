// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import UWP
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace: WindowsFoundation.IID {
    .init(Data1: 0x5199D129, Data2: 0x4EF9, Data3: 0x4DEE, Data4: ( 0xB7,0x4C,0x4D,0xC9,0x10,0x20,0x1A,0x7F ))// 5199D129-4EF9-4DEE-B74C-4DC910201A7F
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet: WindowsFoundation.IID {
    .init(Data1: 0x0A5BFB92, Data2: 0x1F3C, Data3: 0x459F, Data4: ( 0x9D,0x7E,0xA6,0x28,0x9D,0xD0,0x93,0xC0 ))// 0A5BFB92-1F3C-459F-9D7E-A6289DD093C0
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory: WindowsFoundation.IID {
    .init(Data1: 0x3C9C9BDA, Data2: 0x70F9, Data3: 0x4FF9, Data4: ( 0xAA,0xB2,0x3B,0x42,0x92,0x32,0x86,0xEE ))// 3C9C9BDA-70F9-4FF9-AAB2-3B42923286EE
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics: WindowsFoundation.IID {
    .init(Data1: 0x5F4275CE, Data2: 0xBCFA, Data3: 0x48C5, Data4: ( 0x9E,0x67,0xFB,0xE9,0x86,0x6D,0x49,0x24 ))// 5F4275CE-BCFA-48C5-9E67-FBE9866D4924
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution: WindowsFoundation.IID {
    .init(Data1: 0xC81A67AD, Data2: 0x0639, Data3: 0x4F8F, Data4: ( 0x87,0x8B,0xD9,0x37,0xF8,0xA1,0x42,0x93 ))// C81A67AD-0639-4F8F-878B-D937F8A14293
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory: WindowsFoundation.IID {
    .init(Data1: 0x7496A822, Data2: 0xC781, Data3: 0x4EB0, Data4: ( 0xAA,0xFB,0xC0,0x78,0xE7,0xFA,0x8E,0x24 ))// 7496A822-C781-4EB0-AAFB-C078E7FA8E24
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont: WindowsFoundation.IID {
    .init(Data1: 0xBBC4F8D2, Data2: 0xEB2B, Data3: 0x45F1, Data4: ( 0xAC,0x2A,0xCF,0xC1,0xF5,0x98,0xBA,0xE3 ))// BBC4F8D2-EB2B-45F1-AC2A-CFC1F598BAE3
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer: WindowsFoundation.IID {
    .init(Data1: 0x4298F3D1, Data2: 0x645B, Data3: 0x40E3, Data4: ( 0xB9,0x1B,0x81,0x98,0x6D,0x76,0x7F,0xC0 ))// 4298F3D1-645B-40E3-B91B-81986D767FC0
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory: WindowsFoundation.IID {
    .init(Data1: 0x521E433F, Data2: 0xF698, Data3: 0x44C0, Data4: ( 0x8D,0x7F,0xFE,0x37,0x4F,0xE5,0x39,0xE1 ))// 521E433F-F698-44C0-8D7F-FE374FE539E1
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions: WindowsFoundation.IID {
    .init(Data1: 0x31F2406A, Data2: 0x8C5F, Data3: 0x4E12, Data4: ( 0x8B,0xD6,0xCF,0xBB,0xC7,0x21,0x4D,0x02 ))// 31F2406A-8C5F-4E12-8BD6-CFBBC7214D02
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat: WindowsFoundation.IID {
    .init(Data1: 0xAF61BFDC, Data2: 0xEABB, Data3: 0x4D38, Data4: ( 0xBA,0x1B,0xAF,0xB3,0x40,0x61,0x2D,0x33 ))// AF61BFDC-EABB-4D38-BA1B-AFB340612D33
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics: WindowsFoundation.IID {
    .init(Data1: 0x8A927515, Data2: 0x33FC, Data3: 0x4C92, Data4: ( 0xA6,0xAA,0x94,0xA8,0xF2,0x9C,0x14,0x0B ))// 8A927515-33FC-4C92-A6AA-94A8F29C140B
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject: WindowsFoundation.IID {
    .init(Data1: 0x7A89EE99, Data2: 0xCE2A, Data3: 0x47FA, Data4: ( 0x9D,0xD2,0x0A,0x68,0x25,0xF6,0x05,0x3F ))// 7A89EE99-CE2A-47FA-9DD2-0A6825F6053F
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout: WindowsFoundation.IID {
    .init(Data1: 0xBAE63E54, Data2: 0x48AE, Data3: 0x4446, Data4: ( 0xA2,0xC7,0xB6,0xEF,0x93,0x80,0x6C,0x20 ))// BAE63E54-48AE-4446-A2C7-B6EF93806C20
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory: WindowsFoundation.IID {
    .init(Data1: 0x9C1F7179, Data2: 0xACD0, Data3: 0x4680, Data4: ( 0x93,0xD5,0x95,0xA6,0x24,0x7E,0x8F,0x6B ))// 9C1F7179-ACD0-4680-93D5-95A6247E8F6B
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics: WindowsFoundation.IID {
    .init(Data1: 0x7F2B8FFD, Data2: 0x6935, Data3: 0x4F60, Data4: ( 0xB4,0x09,0x63,0x94,0xA1,0x9C,0x5E,0xBC ))// 7F2B8FFD-6935-4F60-B409-6394A19C5EBC
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer: WindowsFoundation.IID {
    .init(Data1: 0x9AAEECE5, Data2: 0x8D09, Data3: 0x4A64, Data4: ( 0xB3,0x22,0xAF,0x03,0x04,0x21,0xB2,0xE4 ))// 9AAEECE5-8D09-4A64-B322-AF030421B2E4
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters: WindowsFoundation.IID {
    .init(Data1: 0xB20BF738, Data2: 0xEDB9, Data3: 0x4EEC, Data4: ( 0xA1,0x2F,0xB6,0xAE,0x32,0xE8,0xAC,0xE6 ))// B20BF738-EDB9-4EEC-A12F-B6AE32E8ACE6
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory: WindowsFoundation.IID {
    .init(Data1: 0xD240AC25, Data2: 0x4D23, Data3: 0x4964, Data4: ( 0x9D,0x9A,0xDB,0x2F,0xC8,0xAF,0x18,0x5D ))// D240AC25-4D23-4964-9D9A-DB2FC8AF185D
}

private var IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography: WindowsFoundation.IID {
    .init(Data1: 0xF15BC312, Data2: 0x447F, Data3: 0x44ED, Data4: ( 0x8B,0xEC,0x7E,0x40,0xF4,0xA4,0xDF,0xC8 ))// F15BC312-447F-44ED-8BEC-7E40F4A4DFC8
}

@_spi(WinRTInternal)
public enum __ABI_Microsoft_Graphics_Canvas_Text {
    public class ICanvasFontFace: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace }

        public func GetRecommendedRenderingMode(_ fontSize: Float, _ dpi: Float, _ measuringMode: Win2D.CanvasTextMeasuringMode, _ renderingParameters: Win2D.CanvasTextRenderingParameters?) throws -> Win2D.CanvasTextRenderingMode {
            var renderingMode: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetRecommendedRenderingMode(pThis, fontSize, dpi, measuringMode, RawPointer(renderingParameters), &renderingMode))
            }
            return renderingMode
        }

        public func GetRecommendedRenderingModeWithAllOptions(_ fontSize: Float, _ dpi: Float, _ measuringMode: Win2D.CanvasTextMeasuringMode, _ renderingParameters: Win2D.CanvasTextRenderingParameters?, _ transform: WindowsFoundation.Matrix3x2, _ isSideways: Bool, _ outlineThreshold: Win2D.CanvasAntialiasing) throws -> Win2D.CanvasTextRenderingMode {
            var renderingMode: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetRecommendedRenderingModeWithAllOptions(pThis, fontSize, dpi, measuringMode, RawPointer(renderingParameters), .from(swift: transform), .init(from: isSideways), outlineThreshold, &renderingMode))
            }
            return renderingMode
        }

        public func GetRecommendedGridFit(_ fontSize: Float, _ dpi: Float, _ measuringMode: Win2D.CanvasTextMeasuringMode, _ renderingParameters: Win2D.CanvasTextRenderingParameters?, _ transform: WindowsFoundation.Matrix3x2, _ isSideways: Bool, _ outlineThreshold: Win2D.CanvasAntialiasing) throws -> Win2D.CanvasTextGridFit {
            var gridFit: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetRecommendedGridFit(pThis, fontSize, dpi, measuringMode, RawPointer(renderingParameters), .from(swift: transform), .init(from: isSideways), outlineThreshold, &gridFit))
            }
            return gridFit
        }

        public func get_GlyphBox() throws -> WindowsFoundation.Rect {
            var value: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GlyphBox(pThis, &value))
            }
            return .from(abi: value)
        }

        public func get_SubscriptPosition() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SubscriptPosition(pThis, &value))
            }
            return .from(abi: value)
        }

        public func get_SubscriptSize() throws -> WindowsFoundation.Size {
            var value: __x_ABI_CWindows_CFoundation_CSize = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SubscriptSize(pThis, &value))
            }
            return .from(abi: value)
        }

        public func get_SuperscriptPosition() throws -> WindowsFoundation.Vector2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SuperscriptPosition(pThis, &value))
            }
            return .from(abi: value)
        }

        public func get_SuperscriptSize() throws -> WindowsFoundation.Size {
            var value: __x_ABI_CWindows_CFoundation_CSize = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SuperscriptSize(pThis, &value))
            }
            return .from(abi: value)
        }

        public func get_HasTypographicMetrics() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasTypographicMetrics(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_Ascent() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Ascent(pThis, &value))
            }
            return value
        }

        public func get_Descent() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Descent(pThis, &value))
            }
            return value
        }

        public func get_LineGap() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineGap(pThis, &value))
            }
            return value
        }

        public func get_CapHeight() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CapHeight(pThis, &value))
            }
            return value
        }

        public func get_LowercaseLetterHeight() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LowercaseLetterHeight(pThis, &value))
            }
            return value
        }

        public func get_UnderlinePosition() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UnderlinePosition(pThis, &value))
            }
            return value
        }

        public func get_UnderlineThickness() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UnderlineThickness(pThis, &value))
            }
            return value
        }

        public func get_StrikethroughPosition() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StrikethroughPosition(pThis, &value))
            }
            return value
        }

        public func get_StrikethroughThickness() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_StrikethroughThickness(pThis, &value))
            }
            return value
        }

        public func get_CaretSlopeRise() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CaretSlopeRise(pThis, &value))
            }
            return value
        }

        public func get_CaretSlopeRun() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CaretSlopeRun(pThis, &value))
            }
            return value
        }

        public func get_CaretOffset() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CaretOffset(pThis, &value))
            }
            return value
        }

        public func get_UnicodeRanges() throws -> [Win2D.CanvasUnicodeRange] {
            var valueElements: WinRTArrayAbi<__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasUnicodeRange> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UnicodeRanges(pThis, &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func get_IsMonospaced() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsMonospaced(pThis, &value))
            }
            return .init(from: value)
        }

        public func GetVerticalGlyphVariants(_ inputElements: [Int32]) throws -> [Int32] {
            var outputElements: WinRTArrayAbi<INT32> = (0, nil)
            try inputElements.toABI { _inputElements in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetVerticalGlyphVariants(pThis, _inputElements.count, _inputElements.start, &outputElements.count, &outputElements.start))
                }
            }
            defer { CoTaskMemFree(outputElements.start) }
            return .from(abi: outputElements)

        }

        public func get_HasVerticalGlyphVariants() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasVerticalGlyphVariants(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_FileFormatType() throws -> Win2D.CanvasFontFileFormatType {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontFileFormatType = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FileFormatType(pThis, &value))
            }
            return value
        }

        public func get_Simulations() throws -> Win2D.CanvasFontSimulations {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontSimulations = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Simulations(pThis, &value))
            }
            return value
        }

        public func get_IsSymbolFont() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsSymbolFont(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_GlyphCount() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GlyphCount(pThis, &value))
            }
            return value
        }

        public func GetGlyphIndices(_ inputElements: [UInt32]) throws -> [Int32] {
            var outputElements: WinRTArrayAbi<INT32> = (0, nil)
            try inputElements.toABI { _inputElements in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetGlyphIndices(pThis, _inputElements.count, _inputElements.start, &outputElements.count, &outputElements.start))
                }
            }
            defer { CoTaskMemFree(outputElements.start) }
            return .from(abi: outputElements)

        }

        public func GetGlyphMetrics(_ inputElements: [Int32], _ isSideways: Bool) throws -> [Win2D.CanvasGlyphMetrics] {
            var outputElements: WinRTArrayAbi<__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphMetrics> = (0, nil)
            try inputElements.toABI { _inputElements in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetGlyphMetrics(pThis, _inputElements.count, _inputElements.start, .init(from: isSideways), &outputElements.count, &outputElements.start))
                }
            }
            defer { CoTaskMemFree(outputElements.start) }
            return .from(abi: outputElements)

        }

        public func GetGdiCompatibleGlyphMetrics(_ fontSize: Float, _ dpi: Float, _ transform: WindowsFoundation.Matrix3x2, _ useGdiNatural: Bool, _ inputElements: [Int32], _ isSideways: Bool) throws -> [Win2D.CanvasGlyphMetrics] {
            var outputElements: WinRTArrayAbi<__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphMetrics> = (0, nil)
            try inputElements.toABI { _inputElements in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetGdiCompatibleGlyphMetrics(pThis, fontSize, dpi, .from(swift: transform), .init(from: useGdiNatural), _inputElements.count, _inputElements.start, .init(from: isSideways), &outputElements.count, &outputElements.start))
                }
            }
            defer { CoTaskMemFree(outputElements.start) }
            return .from(abi: outputElements)

        }

        public func get_Weight() throws -> UWP.FontWeight {
            var value: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Weight(pThis, &value))
            }
            return .from(abi: value)
        }

        public func get_Stretch() throws -> UWP.FontStretch {
            var value: __x_ABI_CWindows_CUI_CText_CFontStretch = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Stretch(pThis, &value))
            }
            return value
        }

        public func get_Style() throws -> UWP.FontStyle {
            var value: __x_ABI_CWindows_CUI_CText_CFontStyle = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Style(pThis, &value))
            }
            return value
        }

        public func get_FamilyNames() throws -> WindowsFoundation.AnyIMapView<String, String>? {
            let (values) = try ComPtrs.initialize { valuesAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FamilyNames(pThis, &valuesAbi))
                }
            }
            return Win2D.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: values)
        }

        public func get_FaceNames() throws -> WindowsFoundation.AnyIMapView<String, String>? {
            let (values) = try ComPtrs.initialize { valuesAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FaceNames(pThis, &valuesAbi))
                }
            }
            return Win2D.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: values)
        }

        public func GetInformationalStrings(_ fontInformation: Win2D.CanvasFontInformation) throws -> WindowsFoundation.AnyIMapView<String, String>? {
            let (values) = try ComPtrs.initialize { valuesAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetInformationalStrings(pThis, fontInformation, &valuesAbi))
                }
            }
            return Win2D.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: values)
        }

        public func HasCharacter(_ unicodeValue: UInt32) throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.HasCharacter(pThis, unicodeValue, &value))
            }
            return .init(from: value)
        }

        public func GetGlyphRunBounds(_ drawingSession: Win2D.CanvasDrawingSession?, _ point: WindowsFoundation.Vector2, _ fontSize: Float, _ glyphs: [Win2D.CanvasGlyph], _ isSideways: Bool, _ bidiLevel: UInt32) throws -> WindowsFoundation.Rect {
            var bounds: __x_ABI_CWindows_CFoundation_CRect = .init()
            try glyphs.toABI { _glyphs in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetGlyphRunBounds(pThis, RawPointer(drawingSession), .from(swift: point), fontSize, _glyphs.count, _glyphs.start, .init(from: isSideways), bidiLevel, &bounds))
                }
            }
            return .from(abi: bounds)
        }

        public func GetGlyphRunBoundsWithMeasuringMode(_ drawingSession: Win2D.CanvasDrawingSession?, _ point: WindowsFoundation.Vector2, _ fontSize: Float, _ glyphs: [Win2D.CanvasGlyph], _ isSideways: Bool, _ bidiLevel: UInt32, _ measuringMode: Win2D.CanvasTextMeasuringMode) throws -> WindowsFoundation.Rect {
            var bounds: __x_ABI_CWindows_CFoundation_CRect = .init()
            try glyphs.toABI { _glyphs in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetGlyphRunBoundsWithMeasuringMode(pThis, RawPointer(drawingSession), .from(swift: point), fontSize, _glyphs.count, _glyphs.start, .init(from: isSideways), bidiLevel, measuringMode, &bounds))
                }
            }
            return .from(abi: bounds)
        }

        public func get_Panose() throws -> [UInt8] {
            var valueElements: WinRTArrayAbi<UINT8> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Panose(pThis, &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func GetSupportedTypographicFeatureNames(_ script: Win2D.CanvasAnalyzedScript) throws -> [Win2D.CanvasTypographyFeatureName] {
            var valueElements: WinRTArrayAbi<__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetSupportedTypographicFeatureNames(pThis, .from(swift: script), &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func GetSupportedTypographicFeatureNamesWithLocale(_ script: Win2D.CanvasAnalyzedScript, _ locale: String) throws -> [Win2D.CanvasTypographyFeatureName] {
            var valueElements: WinRTArrayAbi<__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeatureName> = (0, nil)
            let _locale = try! HString(locale)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetSupportedTypographicFeatureNamesWithLocale(pThis, .from(swift: script), _locale.get(), &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func GetTypographicFeatureGlyphSupport(_ script: Win2D.CanvasAnalyzedScript, _ typographicFeatureName: Win2D.CanvasTypographyFeatureName, _ glyphsElements: [Win2D.CanvasGlyph]) throws -> [Bool] {
            var valueElements: WinRTArrayAbi<boolean> = (0, nil)
            try glyphsElements.toABI { _glyphsElements in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetTypographicFeatureGlyphSupport(pThis, .from(swift: script), typographicFeatureName, _glyphsElements.count, _glyphsElements.start, &valueElements.count, &valueElements.start))
                }
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func GetTypographicFeatureGlyphSupportWithLocale(_ script: Win2D.CanvasAnalyzedScript, _ typographicFeatureName: Win2D.CanvasTypographyFeatureName, _ glyphsElements: [Win2D.CanvasGlyph], _ locale: String) throws -> [Bool] {
            var valueElements: WinRTArrayAbi<boolean> = (0, nil)
            try glyphsElements.toABI { _glyphsElements in
                let _locale = try! HString(locale)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontFace.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetTypographicFeatureGlyphSupportWithLocale(pThis, .from(swift: script), typographicFeatureName, _glyphsElements.count, _glyphsElements.start, _locale.get(), &valueElements.count, &valueElements.start))
                }
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

    }

    public class ICanvasFontSet: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet }

        public func get_Fonts() throws -> WindowsFoundation.AnyIVectorView<Win2D.CanvasFontFace?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Fonts(pThis, &valueAbi))
                }
            }
            return Win2D.__x_ABI_C__FIVectorView_1___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasFontFaceWrapper.unwrapFrom(abi: value)
        }

        public func TryFindFontFace(_ fontFace: Win2D.CanvasFontFace?, _ index: inout Int32) throws -> Bool {
            var succeeded: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.TryFindFontFace(pThis, RawPointer(fontFace), &index, &succeeded))
            }
            return .init(from: succeeded)
        }

        public func GetMatchingFontsFromProperties(_ propertyElements: [Win2D.CanvasFontProperty]) throws -> Win2D.CanvasFontSet? {
            let (matchingFonts) = try ComPtrs.initialize { matchingFontsAbi in
                try propertyElements.toABI { _propertyElements in
                    _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet.self) { pThis in
                        try CHECKED(pThis.pointee.lpVtbl.pointee.GetMatchingFontsFromProperties(pThis, _propertyElements.count, _propertyElements.start, &matchingFontsAbi))
                    }
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas_Text.CanvasFontSetBridge.from(abi: matchingFonts)
        }

        public func GetMatchingFontsFromWwsFamily(_ familyName: String, _ weight: UWP.FontWeight, _ stretch: UWP.FontStretch, _ style: UWP.FontStyle) throws -> Win2D.CanvasFontSet? {
            let (matchingFonts) = try ComPtrs.initialize { matchingFontsAbi in
                let _familyName = try! HString(familyName)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetMatchingFontsFromWwsFamily(pThis, _familyName.get(), .from(swift: weight), stretch, style, &matchingFontsAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas_Text.CanvasFontSetBridge.from(abi: matchingFonts)
        }

        public func CountFontsMatchingProperty(_ property: Win2D.CanvasFontProperty) throws -> UInt32 {
            var count: UINT32 = 0
            let _property = __ABI_Microsoft_Graphics_Canvas_Text._ABI_CanvasFontProperty(from: property)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CountFontsMatchingProperty(pThis, _property.val, &count))
            }
            return count
        }

        public func GetPropertyValuesFromIndex(_ fontIndex: UInt32, _ propertyIdentifier: Win2D.CanvasFontPropertyIdentifier) throws -> WindowsFoundation.AnyIMapView<String, String>? {
            let (values) = try ComPtrs.initialize { valuesAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPropertyValuesFromIndex(pThis, fontIndex, propertyIdentifier, &valuesAbi))
                }
            }
            return Win2D.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: values)
        }

        public func GetPropertyValuesFromIdentifier(_ propertyIdentifier: Win2D.CanvasFontPropertyIdentifier, _ preferredLocaleNames: String) throws -> [Win2D.CanvasFontProperty] {
            var valueElements: WinRTArrayAbi<__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontProperty> = (0, nil)
            let _preferredLocaleNames = try! HString(preferredLocaleNames)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetPropertyValuesFromIdentifier(pThis, propertyIdentifier, _preferredLocaleNames.get(), &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func GetPropertyValues(_ propertyIdentifier: Win2D.CanvasFontPropertyIdentifier) throws -> [Win2D.CanvasFontProperty] {
            var valueElements: WinRTArrayAbi<__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontProperty> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSet.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetPropertyValues(pThis, propertyIdentifier, &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

    }

    public class ICanvasFontSetFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory }

        public func Create(_ uri: WindowsFoundation.Uri?) throws -> ICanvasFontSet {
            let (fontSet) = try ComPtrs.initialize { fontSetAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, RawPointer(uri), &fontSetAbi))
                }
            }
            return ICanvasFontSet(fontSet!)
        }

    }

    public class ICanvasFontSetStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics }

        public func GetSystemFontSet() throws -> Win2D.CanvasFontSet? {
            let (fontSet) = try ComPtrs.initialize { fontSetAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasFontSetStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetSystemFontSet(pThis, &fontSetAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas_Text.CanvasFontSetBridge.from(abi: fontSet)
        }

    }

    public class ICanvasNumberSubstitution: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitution }

    }

    public class ICanvasNumberSubstitutionFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory }

        public func Create(_ method: Win2D.CanvasNumberSubstitutionMethod) throws -> ICanvasNumberSubstitution {
            let (canvasNumberSubstitution) = try ComPtrs.initialize { canvasNumberSubstitutionAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, method, &canvasNumberSubstitutionAbi))
                }
            }
            return ICanvasNumberSubstitution(canvasNumberSubstitution!)
        }

        public func CreateWithLocaleAndIgnoreOverrides(_ method: Win2D.CanvasNumberSubstitutionMethod, _ localeName: String, _ ignoreEnvironmentOverrides: Bool) throws -> ICanvasNumberSubstitution {
            let (canvasNumberSubstitution) = try ComPtrs.initialize { canvasNumberSubstitutionAbi in
                let _localeName = try! HString(localeName)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasNumberSubstitutionFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithLocaleAndIgnoreOverrides(pThis, method, _localeName.get(), .init(from: ignoreEnvironmentOverrides), &canvasNumberSubstitutionAbi))
                }
            }
            return ICanvasNumberSubstitution(canvasNumberSubstitution!)
        }

    }

    public class ICanvasScaledFont: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont }

        public func get_FontFace() throws -> Win2D.CanvasFontFace? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFace(pThis, &valueAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas_Text.CanvasFontFaceBridge.from(abi: value)
        }

        public func get_ScaleFactor() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasScaledFont.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScaleFactor(pThis, &value))
            }
            return value
        }

    }

    public class ICanvasTextAnalyzer: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer }

        public func GetFontsUsingSystemFontSet(_ textFormat: Win2D.CanvasTextFormat?) throws -> WindowsFoundation.AnyIVectorView<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasScaledFont?>?>? {
            let (values) = try ComPtrs.initialize { valuesAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFontsUsingSystemFontSet(pThis, RawPointer(textFormat), &valuesAbi))
                }
            }
            return Win2D.__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.unwrapFrom(abi: values)
        }

        public func GetFonts(_ textFormat: Win2D.CanvasTextFormat?, _ fontSet: Win2D.CanvasFontSet?) throws -> WindowsFoundation.AnyIVectorView<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasScaledFont?>?>? {
            let (values) = try ComPtrs.initialize { valuesAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFonts(pThis, RawPointer(textFormat), RawPointer(fontSet), &valuesAbi))
                }
            }
            return Win2D.__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasScaledFontWrapper.unwrapFrom(abi: values)
        }

        public func GetBidi() throws -> WindowsFoundation.AnyIVectorView<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedBidi>?>? {
            let (values) = try ComPtrs.initialize { valuesAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetBidi(pThis, &valuesAbi))
                }
            }
            return Win2D.__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.unwrapFrom(abi: values)
        }

        public func GetBidiWithLocale(_ locale: String) throws -> WindowsFoundation.AnyIVectorView<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedBidi>?>? {
            let (values) = try ComPtrs.initialize { valuesAbi in
                let _locale = try! HString(locale)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetBidiWithLocale(pThis, _locale.get(), &valuesAbi))
                }
            }
            return Win2D.__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedBidiWrapper.unwrapFrom(abi: values)
        }

        public func GetBreakpoints() throws -> [Win2D.CanvasAnalyzedBreakpoint] {
            var valueElements: WinRTArrayAbi<__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBreakpoint> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetBreakpoints(pThis, &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func GetBreakpointsWithLocale(_ locale: String) throws -> [Win2D.CanvasAnalyzedBreakpoint] {
            var valueElements: WinRTArrayAbi<__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBreakpoint> = (0, nil)
            let _locale = try! HString(locale)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetBreakpointsWithLocale(pThis, _locale.get(), &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func GetNumberSubstitutions() throws -> WindowsFoundation.AnyIVectorView<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasNumberSubstitution?>?>? {
            let (values) = try ComPtrs.initialize { valuesAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetNumberSubstitutions(pThis, &valuesAbi))
                }
            }
            return Win2D.__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasNumberSubstitutionWrapper.unwrapFrom(abi: values)
        }

        public func GetScript() throws -> WindowsFoundation.AnyIVectorView<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedScript>?>? {
            let (values) = try ComPtrs.initialize { valuesAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetScript(pThis, &valuesAbi))
                }
            }
            return Win2D.__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.unwrapFrom(abi: values)
        }

        public func GetScriptWithLocale(_ locale: String) throws -> WindowsFoundation.AnyIVectorView<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedScript>?>? {
            let (values) = try ComPtrs.initialize { valuesAbi in
                let _locale = try! HString(locale)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetScriptWithLocale(pThis, _locale.get(), &valuesAbi))
                }
            }
            return Win2D.__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedScriptWrapper.unwrapFrom(abi: values)
        }

        public func GetGlyphOrientations() throws -> WindowsFoundation.AnyIVectorView<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedGlyphOrientation>?>? {
            let (values) = try ComPtrs.initialize { valuesAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetGlyphOrientations(pThis, &valuesAbi))
                }
            }
            return Win2D.__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.unwrapFrom(abi: values)
        }

        public func GetGlyphOrientationsWithLocale(_ locale: String) throws -> WindowsFoundation.AnyIVectorView<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasAnalyzedGlyphOrientation>?>? {
            let (values) = try ComPtrs.initialize { valuesAbi in
                let _locale = try! HString(locale)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetGlyphOrientationsWithLocale(pThis, _locale.get(), &valuesAbi))
                }
            }
            return Win2D.__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasAnalyzedGlyphOrientationWrapper.unwrapFrom(abi: values)
        }

        public func GetScriptProperties(_ analyzedScript: Win2D.CanvasAnalyzedScript) throws -> Win2D.CanvasScriptProperties {
            var scriptProperties: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScriptProperties = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetScriptProperties(pThis, .from(swift: analyzedScript), &scriptProperties))
            }
            return .from(abi: scriptProperties)
        }

        public func GetGlyphs(_ characterRange: Win2D.CanvasCharacterRange, _ fontFace: Win2D.CanvasFontFace?, _ fontSize: Float, _ isSideways: Bool, _ isRightToLeft: Bool, _ script: Win2D.CanvasAnalyzedScript) throws -> [Win2D.CanvasGlyph] {
            var valueElements: WinRTArrayAbi<__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetGlyphs(pThis, .from(swift: characterRange), RawPointer(fontFace), fontSize, .init(from: isSideways), .init(from: isRightToLeft), .from(swift: script), &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func GetGlyphsWithAllOptions(_ characterRange: Win2D.CanvasCharacterRange, _ fontFace: Win2D.CanvasFontFace?, _ fontSize: Float, _ isSideways: Bool, _ isRightToLeft: Bool, _ script: Win2D.CanvasAnalyzedScript, _ locale: String, _ numberSubstitution: Win2D.CanvasNumberSubstitution?, _ typographyRanges: WindowsFoundation.AnyIVectorView<WindowsFoundation.AnyIKeyValuePair<Win2D.CanvasCharacterRange, Win2D.CanvasTypography?>?>?, _ clusterMapIndicesElements: inout [Int32], _ isShapedAloneGlyphsElements: inout [Bool], _ glyphShapingResultsElements: inout [Win2D.CanvasGlyphShaping]) throws -> [Win2D.CanvasGlyph] {
            var valueElements: WinRTArrayAbi<__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph> = (0, nil)
            let _locale = try! HString(locale)
            let typographyRangesWrapper = Win2D.__x_ABI_C__FIVectorView_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasCharacterRange___x_ABI_CMicrosoft__CGraphics__CCanvas__CText__CCanvasTypographyWrapper(typographyRanges)
            let _typographyRanges = try! typographyRangesWrapper?.toABI { $0 }
            var _clusterMapIndicesElements: WinRTArrayAbi<INT32> = (0, nil)
            var _isShapedAloneGlyphsElements: WinRTArrayAbi<boolean> = (0, nil)
            var _glyphShapingResultsElements: WinRTArrayAbi<__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetGlyphsWithAllOptions(pThis, .from(swift: characterRange), RawPointer(fontFace), fontSize, .init(from: isSideways), .init(from: isRightToLeft), .from(swift: script), _locale.get(), RawPointer(numberSubstitution), _typographyRanges, &_clusterMapIndicesElements.count, &_clusterMapIndicesElements.start, &_isShapedAloneGlyphsElements.count, &_isShapedAloneGlyphsElements.start, &_glyphShapingResultsElements.count, &_glyphShapingResultsElements.start, &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(_glyphShapingResultsElements.start) }
            glyphShapingResultsElements = .from(abi: _glyphShapingResultsElements)
            defer { CoTaskMemFree(_isShapedAloneGlyphsElements.start) }
            isShapedAloneGlyphsElements = .from(abi: _isShapedAloneGlyphsElements)
            defer { CoTaskMemFree(_clusterMapIndicesElements.start) }
            clusterMapIndicesElements = .from(abi: _clusterMapIndicesElements)
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func GetJustificationOpportunities(_ characterRange: Win2D.CanvasCharacterRange, _ fontFace: Win2D.CanvasFontFace?, _ fontSize: Float, _ script: Win2D.CanvasAnalyzedScript, _ clusterMapIndicesElements: [Int32], _ glyphShapingResultsElements: [Win2D.CanvasGlyphShaping]) throws -> [Win2D.CanvasJustificationOpportunity] {
            var valueElements: WinRTArrayAbi<__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasJustificationOpportunity> = (0, nil)
            try clusterMapIndicesElements.toABI { _clusterMapIndicesElements in
                try glyphShapingResultsElements.toABI { _glyphShapingResultsElements in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetJustificationOpportunities(pThis, .from(swift: characterRange), RawPointer(fontFace), fontSize, .from(swift: script), _clusterMapIndicesElements.count, _clusterMapIndicesElements.start, _glyphShapingResultsElements.count, _glyphShapingResultsElements.start, &valueElements.count, &valueElements.start))
                }
            }
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func ApplyJustificationOpportunities(_ lineWidth: Float, _ justificationOpportunitiesElements: [Win2D.CanvasJustificationOpportunity], _ sourceGlyphsElements: [Win2D.CanvasGlyph]) throws -> [Win2D.CanvasGlyph] {
            var valueElements: WinRTArrayAbi<__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph> = (0, nil)
            try justificationOpportunitiesElements.toABI { _justificationOpportunitiesElements in
                try sourceGlyphsElements.toABI { _sourceGlyphsElements in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ApplyJustificationOpportunities(pThis, lineWidth, _justificationOpportunitiesElements.count, _justificationOpportunitiesElements.start, _sourceGlyphsElements.count, _sourceGlyphsElements.start, &valueElements.count, &valueElements.start))
                }
            }
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func AddGlyphsAfterJustification(_ fontFace: Win2D.CanvasFontFace?, _ fontSize: Float, _ script: Win2D.CanvasAnalyzedScript, _ clusterMapIndicesElements: [Int32], _ originalGlyphsElements: [Win2D.CanvasGlyph], _ justifiedGlyphsElements: [Win2D.CanvasGlyph], _ glyphShapingResultsElements: [Win2D.CanvasGlyphShaping]) throws -> [Win2D.CanvasGlyph] {
            var valueElements: WinRTArrayAbi<__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph> = (0, nil)
            try clusterMapIndicesElements.toABI { _clusterMapIndicesElements in
                try originalGlyphsElements.toABI { _originalGlyphsElements in
                try justifiedGlyphsElements.toABI { _justifiedGlyphsElements in
                try glyphShapingResultsElements.toABI { _glyphShapingResultsElements in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.AddGlyphsAfterJustification(pThis, RawPointer(fontFace), fontSize, .from(swift: script), _clusterMapIndicesElements.count, _clusterMapIndicesElements.start, _originalGlyphsElements.count, _originalGlyphsElements.start, _justifiedGlyphsElements.count, _justifiedGlyphsElements.start, _glyphShapingResultsElements.count, _glyphShapingResultsElements.start, &valueElements.count, &valueElements.start))
                }
            }
            }
            }
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func AddGlyphsAfterJustificationWithClusterMap(_ fontFace: Win2D.CanvasFontFace?, _ fontSize: Float, _ script: Win2D.CanvasAnalyzedScript, _ clusterMapIndicesElements: [Int32], _ originalGlyphsElements: [Win2D.CanvasGlyph], _ justifiedGlyphsElements: [Win2D.CanvasGlyph], _ glyphShapingResultsElements: [Win2D.CanvasGlyphShaping], _ outputClusterMapIndicesElements: inout [Int32]) throws -> [Win2D.CanvasGlyph] {
            var valueElements: WinRTArrayAbi<__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph> = (0, nil)
            try clusterMapIndicesElements.toABI { _clusterMapIndicesElements in
                try originalGlyphsElements.toABI { _originalGlyphsElements in
                try justifiedGlyphsElements.toABI { _justifiedGlyphsElements in
                try glyphShapingResultsElements.toABI { _glyphShapingResultsElements in
                var _outputClusterMapIndicesElements: WinRTArrayAbi<INT32> = (0, nil)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.AddGlyphsAfterJustificationWithClusterMap(pThis, RawPointer(fontFace), fontSize, .from(swift: script), _clusterMapIndicesElements.count, _clusterMapIndicesElements.start, _originalGlyphsElements.count, _originalGlyphsElements.start, _justifiedGlyphsElements.count, _justifiedGlyphsElements.start, _glyphShapingResultsElements.count, _glyphShapingResultsElements.start, &_outputClusterMapIndicesElements.count, &_outputClusterMapIndicesElements.start, &valueElements.count, &valueElements.start))
                }
                            defer { CoTaskMemFree(_outputClusterMapIndicesElements.start) }
                            outputClusterMapIndicesElements = .from(abi: _outputClusterMapIndicesElements)
            }
            }
            }
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

    }

    public class ICanvasTextAnalyzerFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory }

        public func Create(_ text: String, _ textDirection: Win2D.CanvasTextDirection) throws -> ICanvasTextAnalyzer {
            let (canvasTextAnalyzer) = try ComPtrs.initialize { canvasTextAnalyzerAbi in
                let _text = try! HString(text)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, _text.get(), textDirection, &canvasTextAnalyzerAbi))
                }
            }
            return ICanvasTextAnalyzer(canvasTextAnalyzer!)
        }

        public func CreateWithNumberSubstitutionAndVerticalGlyphOrientationAndBidiLevel(_ text: String, _ textDirection: Win2D.CanvasTextDirection, _ numberSubstitution: Win2D.CanvasNumberSubstitution?, _ verticalGlyphOrientation: Win2D.CanvasVerticalGlyphOrientation, _ bidiLevel: UInt32) throws -> ICanvasTextAnalyzer {
            let (canvasTextAnalyzer) = try ComPtrs.initialize { canvasTextAnalyzerAbi in
                let _text = try! HString(text)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithNumberSubstitutionAndVerticalGlyphOrientationAndBidiLevel(pThis, _text.get(), textDirection, RawPointer(numberSubstitution), verticalGlyphOrientation, bidiLevel, &canvasTextAnalyzerAbi))
                }
            }
            return ICanvasTextAnalyzer(canvasTextAnalyzer!)
        }

        public func CreateWithOptions(_ text: String, _ textDirection: Win2D.CanvasTextDirection, _ options: Win2D.AnyICanvasTextAnalyzerOptions?) throws -> ICanvasTextAnalyzer {
            let (canvasTextAnalyzer) = try ComPtrs.initialize { canvasTextAnalyzerAbi in
                let _text = try! HString(text)
                let optionsWrapper = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextAnalyzerOptionsWrapper(options)
                let _options = try! optionsWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithOptions(pThis, _text.get(), textDirection, _options, &canvasTextAnalyzerAbi))
                }
            }
            return ICanvasTextAnalyzer(canvasTextAnalyzer!)
        }

    }

    public class ICanvasTextAnalyzerOptions: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions }

        open func GetLocaleName(_ characterIndex: Int32, _ characterCount: inout Int32) throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetLocaleName(pThis, characterIndex, &characterCount, &value))
            }
            return .init(from: value)
        }

        open func GetNumberSubstitution(_ characterIndex: Int32, _ characterCount: inout Int32) throws -> Win2D.CanvasNumberSubstitution? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetNumberSubstitution(pThis, characterIndex, &characterCount, &valueAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas_Text.CanvasNumberSubstitutionBridge.from(abi: value)
        }

        open func GetVerticalGlyphOrientation(_ characterIndex: Int32, _ characterCount: inout Int32) throws -> Win2D.CanvasVerticalGlyphOrientation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetVerticalGlyphOrientation(pThis, characterIndex, &characterCount, &value))
            }
            return value
        }

        open func GetBidiLevel(_ characterIndex: Int32, _ characterCount: inout Int32) throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptions.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetBidiLevel(pThis, characterIndex, &characterCount, &value))
            }
            return value
        }

    }

    internal static var ICanvasTextAnalyzerOptionsVTable: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextAnalyzerOptionsVtbl = .init(
        QueryInterface: { ICanvasTextAnalyzerOptionsWrapper.queryInterface($0, $1, $2) },
        AddRef: { ICanvasTextAnalyzerOptionsWrapper.addRef($0) },
        Release: { ICanvasTextAnalyzerOptionsWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextAnalyzerOptionsWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.Graphics.Canvas.Text.ICanvasTextAnalyzerOptions").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        GetLocaleName: {
            do {
                guard let __unwrapped__instance = ICanvasTextAnalyzerOptionsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let characterIndex: Int32 = $1
                var characterCount: Int32 = 0
                let value = try __unwrapped__instance.getLocaleName(characterIndex, &characterCount)
                $2?.initialize(to: characterCount)
                $3?.initialize(to: try! HString(value).detach())
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetNumberSubstitution: {
            do {
                guard let __unwrapped__instance = ICanvasTextAnalyzerOptionsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let characterIndex: Int32 = $1
                var characterCount: Int32 = 0
                let value = try __unwrapped__instance.getNumberSubstitution(characterIndex, &characterCount)
                $2?.initialize(to: characterCount)
                value?.copyTo($3)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetVerticalGlyphOrientation: {
            do {
                guard let __unwrapped__instance = ICanvasTextAnalyzerOptionsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let characterIndex: Int32 = $1
                var characterCount: Int32 = 0
                let value = try __unwrapped__instance.getVerticalGlyphOrientation(characterIndex, &characterCount)
                $2?.initialize(to: characterCount)
                $3?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetBidiLevel: {
            do {
                guard let __unwrapped__instance = ICanvasTextAnalyzerOptionsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let characterIndex: Int32 = $1
                var characterCount: Int32 = 0
                let value = try __unwrapped__instance.getBidiLevel(characterIndex, &characterCount)
                $2?.initialize(to: characterCount)
                $3?.initialize(to: value)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias ICanvasTextAnalyzerOptionsWrapper = InterfaceWrapperBase<__IMPL_Microsoft_Graphics_Canvas_Text.ICanvasTextAnalyzerOptionsBridge>
    public class ICanvasTextFormat: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat }

        public func get_Direction() throws -> Win2D.CanvasTextDirection {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Direction(pThis, &value))
            }
            return value
        }

        public func put_Direction(_ value: Win2D.CanvasTextDirection) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Direction(pThis, value))
            }
        }

        public func get_FontFamily() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontFamily(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_FontFamily(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontFamily(pThis, _value.get()))
            }
        }

        public func get_FontSize() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontSize(pThis, &value))
            }
            return value
        }

        public func put_FontSize(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontSize(pThis, value))
            }
        }

        public func get_FontStretch() throws -> UWP.FontStretch {
            var value: __x_ABI_CWindows_CUI_CText_CFontStretch = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStretch(pThis, &value))
            }
            return value
        }

        public func put_FontStretch(_ value: UWP.FontStretch) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStretch(pThis, value))
            }
        }

        public func get_FontStyle() throws -> UWP.FontStyle {
            var value: __x_ABI_CWindows_CUI_CText_CFontStyle = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontStyle(pThis, &value))
            }
            return value
        }

        public func put_FontStyle(_ value: UWP.FontStyle) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontStyle(pThis, value))
            }
        }

        public func get_FontWeight() throws -> UWP.FontWeight {
            var value: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FontWeight(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_FontWeight(_ value: UWP.FontWeight) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_FontWeight(pThis, .from(swift: value)))
            }
        }

        public func get_IncrementalTabStop() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IncrementalTabStop(pThis, &value))
            }
            return value
        }

        public func put_IncrementalTabStop(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IncrementalTabStop(pThis, value))
            }
        }

        public func get_LineSpacing() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineSpacing(pThis, &value))
            }
            return value
        }

        public func put_LineSpacing(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineSpacing(pThis, value))
            }
        }

        public func get_LineSpacingBaseline() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineSpacingBaseline(pThis, &value))
            }
            return value
        }

        public func put_LineSpacingBaseline(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineSpacingBaseline(pThis, value))
            }
        }

        public func get_LocaleName() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LocaleName(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_LocaleName(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LocaleName(pThis, _value.get()))
            }
        }

        public func get_VerticalAlignment() throws -> Win2D.CanvasVerticalAlignment {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalAlignment(pThis, &value))
            }
            return value
        }

        public func put_VerticalAlignment(_ value: Win2D.CanvasVerticalAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalAlignment(pThis, value))
            }
        }

        public func get_HorizontalAlignment() throws -> Win2D.CanvasHorizontalAlignment {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalAlignment(pThis, &value))
            }
            return value
        }

        public func put_HorizontalAlignment(_ value: Win2D.CanvasHorizontalAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalAlignment(pThis, value))
            }
        }

        public func get_TrimmingGranularity() throws -> Win2D.CanvasTextTrimmingGranularity {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingGranularity(pThis, &value))
            }
            return value
        }

        public func put_TrimmingGranularity(_ value: Win2D.CanvasTextTrimmingGranularity) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingGranularity(pThis, value))
            }
        }

        public func get_TrimmingDelimiter() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingDelimiter(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_TrimmingDelimiter(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingDelimiter(pThis, _value.get()))
            }
        }

        public func get_TrimmingDelimiterCount() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingDelimiterCount(pThis, &value))
            }
            return value
        }

        public func put_TrimmingDelimiterCount(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingDelimiterCount(pThis, value))
            }
        }

        public func get_WordWrapping() throws -> Win2D.CanvasWordWrapping {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_WordWrapping(pThis, &value))
            }
            return value
        }

        public func put_WordWrapping(_ value: Win2D.CanvasWordWrapping) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_WordWrapping(pThis, value))
            }
        }

        public func get_Options() throws -> Win2D.CanvasDrawTextOptions {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Options(pThis, &value))
            }
            return value
        }

        public func put_Options(_ value: Win2D.CanvasDrawTextOptions) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Options(pThis, value))
            }
        }

        public func get_VerticalGlyphOrientation() throws -> Win2D.CanvasVerticalGlyphOrientation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalGlyphOrientation(pThis, &value))
            }
            return value
        }

        public func put_VerticalGlyphOrientation(_ value: Win2D.CanvasVerticalGlyphOrientation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalGlyphOrientation(pThis, value))
            }
        }

        public func get_OpticalAlignment() throws -> Win2D.CanvasOpticalAlignment {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpticalAlignment(pThis, &value))
            }
            return value
        }

        public func put_OpticalAlignment(_ value: Win2D.CanvasOpticalAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OpticalAlignment(pThis, value))
            }
        }

        public func get_LastLineWrapping() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LastLineWrapping(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_LastLineWrapping(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LastLineWrapping(pThis, .init(from: value)))
            }
        }

        public func get_LineSpacingMode() throws -> Win2D.CanvasLineSpacingMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineSpacingMode(pThis, &value))
            }
            return value
        }

        public func put_LineSpacingMode(_ value: Win2D.CanvasLineSpacingMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineSpacingMode(pThis, value))
            }
        }

        public func get_TrimmingSign() throws -> Win2D.CanvasTrimmingSign {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingSign(pThis, &value))
            }
            return value
        }

        public func put_TrimmingSign(_ value: Win2D.CanvasTrimmingSign) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingSign(pThis, value))
            }
        }

        public func get_CustomTrimmingSign() throws -> Win2D.AnyICanvasTextInlineObject? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CustomTrimmingSign(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextInlineObjectWrapper.unwrapFrom(abi: value)
        }

        public func put_CustomTrimmingSign(_ value: Win2D.AnyICanvasTextInlineObject?) throws {
            let valueWrapper = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextInlineObjectWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormat.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CustomTrimmingSign(pThis, _value))
            }
        }

    }

    public class ICanvasTextFormatStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics }

        public func GetSystemFontFamilies() throws -> [String] {
            var valueElements: WinRTArrayAbi<HSTRING?> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetSystemFontFamilies(pThis, &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func GetSystemFontFamiliesFromLocaleList(_ localeList: WindowsFoundation.AnyIVectorView<String>?) throws -> [String] {
            var valueElements: WinRTArrayAbi<HSTRING?> = (0, nil)
            let localeListWrapper = Win2D.__x_ABI_C__FIVectorView_1_HSTRINGWrapper(localeList)
            let _localeList = try! localeListWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextFormatStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetSystemFontFamiliesFromLocaleList(pThis, _localeList, &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

    }

    public class ICanvasTextInlineObject: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject }

        open func Draw(_ textRenderer: Win2D.AnyICanvasTextRenderer?, _ point: WindowsFoundation.Vector2, _ isSideways: Bool, _ isRightToLeft: Bool, _ brush: Any?) throws {
            let textRendererWrapper = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextRendererWrapper(textRenderer)
            let _textRenderer = try! textRendererWrapper?.toABI { $0 }
            let brushWrapper = __ABI_.AnyWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Draw(pThis, _textRenderer, .from(swift: point), .init(from: isSideways), .init(from: isRightToLeft), _brush))
            }
        }

        open func get_Size() throws -> WindowsFoundation.Size {
            var value: __x_ABI_CWindows_CFoundation_CSize = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &value))
            }
            return .from(abi: value)
        }

        open func get_Baseline() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Baseline(pThis, &value))
            }
            return value
        }

        open func get_SupportsSideways() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_SupportsSideways(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_DrawBounds() throws -> WindowsFoundation.Rect {
            var bounds: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DrawBounds(pThis, &bounds))
            }
            return .from(abi: bounds)
        }

        open func get_BreakBefore() throws -> Win2D.CanvasLineBreakCondition {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineBreakCondition = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BreakBefore(pThis, &value))
            }
            return value
        }

        open func get_BreakAfter() throws -> Win2D.CanvasLineBreakCondition {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineBreakCondition = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObject.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BreakAfter(pThis, &value))
            }
            return value
        }

    }

    internal static var ICanvasTextInlineObjectVTable: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextInlineObjectVtbl = .init(
        QueryInterface: { ICanvasTextInlineObjectWrapper.queryInterface($0, $1, $2) },
        AddRef: { ICanvasTextInlineObjectWrapper.addRef($0) },
        Release: { ICanvasTextInlineObjectWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextInlineObjectWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.Graphics.Canvas.Text.ICanvasTextInlineObject").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Draw: {
            do {
                guard let __unwrapped__instance = ICanvasTextInlineObjectWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let textRenderer: Win2D.AnyICanvasTextRenderer? = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextRendererWrapper.unwrapFrom(abi: ComPtr($1))
                let point: WindowsFoundation.Vector2 = .from(abi: $2)
                let isSideways: Bool = .init(from: $3)
                let isRightToLeft: Bool = .init(from: $4)
                let brush: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($5))
                try __unwrapped__instance.draw(textRenderer, point, isSideways, isRightToLeft, brush)
                return S_OK
            } catch { return failWith(error: error) }
        },

        get_Size: {
            guard let __unwrapped__instance = ICanvasTextInlineObjectWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.size
            $1?.initialize(to: .from(swift: value))
            return S_OK
        },

        get_Baseline: {
            guard let __unwrapped__instance = ICanvasTextInlineObjectWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.baseline
            $1?.initialize(to: value)
            return S_OK
        },

        get_SupportsSideways: {
            guard let __unwrapped__instance = ICanvasTextInlineObjectWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.supportsSideways
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        get_DrawBounds: {
            guard let __unwrapped__instance = ICanvasTextInlineObjectWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let bounds = __unwrapped__instance.drawBounds
            $1?.initialize(to: .from(swift: bounds))
            return S_OK
        },

        get_BreakBefore: {
            guard let __unwrapped__instance = ICanvasTextInlineObjectWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.breakBefore
            $1?.initialize(to: value)
            return S_OK
        },

        get_BreakAfter: {
            guard let __unwrapped__instance = ICanvasTextInlineObjectWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.breakAfter
            $1?.initialize(to: value)
            return S_OK
        }
    )

    public typealias ICanvasTextInlineObjectWrapper = InterfaceWrapperBase<__IMPL_Microsoft_Graphics_Canvas_Text.ICanvasTextInlineObjectBridge>
    public class ICanvasTextLayout: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout }

        public func GetFormatChangeIndices() throws -> [Int32] {
            var stops: WinRTArrayAbi<INT32> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetFormatChangeIndices(pThis, &stops.count, &stops.start))
            }
            defer { CoTaskMemFree(stops.start) }
            return .from(abi: stops)

        }

        public func get_Direction() throws -> Win2D.CanvasTextDirection {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextDirection = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Direction(pThis, &value))
            }
            return value
        }

        public func put_Direction(_ value: Win2D.CanvasTextDirection) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Direction(pThis, value))
            }
        }

        public func get_DefaultFontFamily() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultFontFamily(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_DefaultFontSize() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultFontSize(pThis, &value))
            }
            return value
        }

        public func get_DefaultFontStretch() throws -> UWP.FontStretch {
            var value: __x_ABI_CWindows_CUI_CText_CFontStretch = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultFontStretch(pThis, &value))
            }
            return value
        }

        public func get_DefaultFontStyle() throws -> UWP.FontStyle {
            var value: __x_ABI_CWindows_CUI_CText_CFontStyle = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultFontStyle(pThis, &value))
            }
            return value
        }

        public func get_DefaultFontWeight() throws -> UWP.FontWeight {
            var value: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultFontWeight(pThis, &value))
            }
            return .from(abi: value)
        }

        public func get_IncrementalTabStop() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IncrementalTabStop(pThis, &value))
            }
            return value
        }

        public func put_IncrementalTabStop(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IncrementalTabStop(pThis, value))
            }
        }

        public func get_LineSpacing() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineSpacing(pThis, &value))
            }
            return value
        }

        public func put_LineSpacing(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineSpacing(pThis, value))
            }
        }

        public func get_LineSpacingBaseline() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineSpacingBaseline(pThis, &value))
            }
            return value
        }

        public func put_LineSpacingBaseline(_ value: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineSpacingBaseline(pThis, value))
            }
        }

        public func get_DefaultLocaleName() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DefaultLocaleName(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_VerticalAlignment() throws -> Win2D.CanvasVerticalAlignment {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalAlignment(pThis, &value))
            }
            return value
        }

        public func put_VerticalAlignment(_ value: Win2D.CanvasVerticalAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalAlignment(pThis, value))
            }
        }

        public func get_HorizontalAlignment() throws -> Win2D.CanvasHorizontalAlignment {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasHorizontalAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HorizontalAlignment(pThis, &value))
            }
            return value
        }

        public func put_HorizontalAlignment(_ value: Win2D.CanvasHorizontalAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_HorizontalAlignment(pThis, value))
            }
        }

        public func get_TrimmingGranularity() throws -> Win2D.CanvasTextTrimmingGranularity {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextTrimmingGranularity = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingGranularity(pThis, &value))
            }
            return value
        }

        public func put_TrimmingGranularity(_ value: Win2D.CanvasTextTrimmingGranularity) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingGranularity(pThis, value))
            }
        }

        public func get_TrimmingDelimiter() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingDelimiter(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_TrimmingDelimiter(_ value: String) throws {
            let _value = try! HString(value)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingDelimiter(pThis, _value.get()))
            }
        }

        public func get_TrimmingDelimiterCount() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingDelimiterCount(pThis, &value))
            }
            return value
        }

        public func put_TrimmingDelimiterCount(_ value: Int32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingDelimiterCount(pThis, value))
            }
        }

        public func get_WordWrapping() throws -> Win2D.CanvasWordWrapping {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasWordWrapping = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_WordWrapping(pThis, &value))
            }
            return value
        }

        public func put_WordWrapping(_ value: Win2D.CanvasWordWrapping) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_WordWrapping(pThis, value))
            }
        }

        public func get_Options() throws -> Win2D.CanvasDrawTextOptions {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasDrawTextOptions = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Options(pThis, &value))
            }
            return value
        }

        public func put_Options(_ value: Win2D.CanvasDrawTextOptions) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Options(pThis, value))
            }
        }

        public func get_LineSpacingMode() throws -> Win2D.CanvasLineSpacingMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineSpacingMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineSpacingMode(pThis, &value))
            }
            return value
        }

        public func put_LineSpacingMode(_ value: Win2D.CanvasLineSpacingMode) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LineSpacingMode(pThis, value))
            }
        }

        public func get_TrimmingSign() throws -> Win2D.CanvasTrimmingSign {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTrimmingSign = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TrimmingSign(pThis, &value))
            }
            return value
        }

        public func put_TrimmingSign(_ value: Win2D.CanvasTrimmingSign) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_TrimmingSign(pThis, value))
            }
        }

        public func get_CustomTrimmingSign() throws -> Win2D.AnyICanvasTextInlineObject? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_CustomTrimmingSign(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextInlineObjectWrapper.unwrapFrom(abi: value)
        }

        public func put_CustomTrimmingSign(_ value: Win2D.AnyICanvasTextInlineObject?) throws {
            let valueWrapper = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextInlineObjectWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_CustomTrimmingSign(pThis, _value))
            }
        }

        public func get_RequestedSize() throws -> WindowsFoundation.Size {
            var value: __x_ABI_CWindows_CFoundation_CSize = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RequestedSize(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_RequestedSize(_ value: WindowsFoundation.Size) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_RequestedSize(pThis, .from(swift: value)))
            }
        }

        public func GetMinimumLineLength() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMinimumLineLength(pThis, &value))
            }
            return value
        }

        public func GetBrush(_ characterIndex: Int32) throws -> Win2D.AnyICanvasBrush? {
            let (brush) = try ComPtrs.initialize { brushAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetBrush(pThis, characterIndex, &brushAbi))
                }
            }
            return __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper.unwrapFrom(abi: brush)
        }

        public func GetCustomBrush(_ characterIndex: Int32) throws -> Any? {
            let (brush) = try ComPtrs.initialize { brushAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetCustomBrush(pThis, characterIndex, &brushAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: brush)
        }

        public func GetFontFamily(_ characterIndex: Int32) throws -> String {
            var fontFamily: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetFontFamily(pThis, characterIndex, &fontFamily))
            }
            return .init(from: fontFamily)
        }

        public func GetFontSize(_ characterIndex: Int32) throws -> Float {
            var fontSize: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetFontSize(pThis, characterIndex, &fontSize))
            }
            return fontSize
        }

        public func GetFontStretch(_ characterIndex: Int32) throws -> UWP.FontStretch {
            var fontStretch: __x_ABI_CWindows_CUI_CText_CFontStretch = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetFontStretch(pThis, characterIndex, &fontStretch))
            }
            return fontStretch
        }

        public func GetFontStyle(_ characterIndex: Int32) throws -> UWP.FontStyle {
            var fontStyle: __x_ABI_CWindows_CUI_CText_CFontStyle = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetFontStyle(pThis, characterIndex, &fontStyle))
            }
            return fontStyle
        }

        public func GetFontWeight(_ characterIndex: Int32) throws -> UWP.FontWeight {
            var fontWeight: __x_ABI_CWindows_CUI_CText_CFontWeight = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetFontWeight(pThis, characterIndex, &fontWeight))
            }
            return .from(abi: fontWeight)
        }

        public func GetLocaleName(_ characterIndex: Int32) throws -> String {
            var localeName: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetLocaleName(pThis, characterIndex, &localeName))
            }
            return .init(from: localeName)
        }

        public func GetStrikethrough(_ characterIndex: Int32) throws -> Bool {
            var hasStrikethrough: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetStrikethrough(pThis, characterIndex, &hasStrikethrough))
            }
            return .init(from: hasStrikethrough)
        }

        public func GetUnderline(_ characterIndex: Int32) throws -> Bool {
            var hasUnderline: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetUnderline(pThis, characterIndex, &hasUnderline))
            }
            return .init(from: hasUnderline)
        }

        public func GetInlineObject(_ characterIndex: Int32) throws -> Win2D.AnyICanvasTextInlineObject? {
            let (inlineObject) = try ComPtrs.initialize { inlineObjectAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetInlineObject(pThis, characterIndex, &inlineObjectAbi))
                }
            }
            return __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextInlineObjectWrapper.unwrapFrom(abi: inlineObject)
        }

        public func SetColor(_ characterIndex: Int32, _ characterCount: Int32, _ color: UWP.Color) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetColor(pThis, characterIndex, characterCount, .from(swift: color)))
            }
        }

        public func SetBrush(_ characterIndex: Int32, _ characterCount: Int32, _ brush: Win2D.AnyICanvasBrush?) throws {
            let brushWrapper = __ABI_Microsoft_Graphics_Canvas_Brushes.ICanvasBrushWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetBrush(pThis, characterIndex, characterCount, _brush))
            }
        }

        public func SetCustomBrush(_ characterIndex: Int32, _ characterCount: Int32, _ brush: Any?) throws {
            let brushWrapper = __ABI_.AnyWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetCustomBrush(pThis, characterIndex, characterCount, _brush))
            }
        }

        public func SetFontFamily(_ characterIndex: Int32, _ characterCount: Int32, _ fontFamily: String) throws {
            let _fontFamily = try! HString(fontFamily)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetFontFamily(pThis, characterIndex, characterCount, _fontFamily.get()))
            }
        }

        public func SetFontSize(_ characterIndex: Int32, _ characterCount: Int32, _ fontSize: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetFontSize(pThis, characterIndex, characterCount, fontSize))
            }
        }

        public func SetFontStretch(_ characterIndex: Int32, _ characterCount: Int32, _ fontStretch: UWP.FontStretch) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetFontStretch(pThis, characterIndex, characterCount, fontStretch))
            }
        }

        public func SetFontStyle(_ characterIndex: Int32, _ characterCount: Int32, _ fontStyle: UWP.FontStyle) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetFontStyle(pThis, characterIndex, characterCount, fontStyle))
            }
        }

        public func SetFontWeight(_ characterIndex: Int32, _ characterCount: Int32, _ fontWeight: UWP.FontWeight) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetFontWeight(pThis, characterIndex, characterCount, .from(swift: fontWeight)))
            }
        }

        public func SetLocaleName(_ characterIndex: Int32, _ characterCount: Int32, _ name: String) throws {
            let _name = try! HString(name)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetLocaleName(pThis, characterIndex, characterCount, _name.get()))
            }
        }

        public func SetStrikethrough(_ characterIndex: Int32, _ characterCount: Int32, _ hasStrikethrough: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetStrikethrough(pThis, characterIndex, characterCount, .init(from: hasStrikethrough)))
            }
        }

        public func SetUnderline(_ characterIndex: Int32, _ characterCount: Int32, _ hasUnderline: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetUnderline(pThis, characterIndex, characterCount, .init(from: hasUnderline)))
            }
        }

        public func SetInlineObject(_ characterIndex: Int32, _ characterCount: Int32, _ inlineObject: Win2D.AnyICanvasTextInlineObject?) throws {
            let inlineObjectWrapper = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextInlineObjectWrapper(inlineObject)
            let _inlineObject = try! inlineObjectWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetInlineObject(pThis, characterIndex, characterCount, _inlineObject))
            }
        }

        public func DrawToTextRenderer(_ textRenderer: Win2D.AnyICanvasTextRenderer?, _ position: WindowsFoundation.Vector2) throws {
            let textRendererWrapper = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextRendererWrapper(textRenderer)
            let _textRenderer = try! textRendererWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawToTextRenderer(pThis, _textRenderer, .from(swift: position)))
            }
        }

        public func DrawToTextRendererWithCoords(_ textRenderer: Win2D.AnyICanvasTextRenderer?, _ x: Float, _ y: Float) throws {
            let textRendererWrapper = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextRendererWrapper(textRenderer)
            let _textRenderer = try! textRendererWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawToTextRendererWithCoords(pThis, _textRenderer, x, y))
            }
        }

        public func get_LineMetrics() throws -> [Win2D.CanvasLineMetrics] {
            var valueElements: WinRTArrayAbi<__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineMetrics> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineMetrics(pThis, &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func get_ClusterMetrics() throws -> [Win2D.CanvasClusterMetrics] {
            var valueElements: WinRTArrayAbi<__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterMetrics> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ClusterMetrics(pThis, &valueElements.count, &valueElements.start))
            }
            defer { CoTaskMemFree(valueElements.start) }
            return .from(abi: valueElements)

        }

        public func SetTypography(_ characterIndex: Int32, _ characterCount: Int32, _ typography: Win2D.CanvasTypography?) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetTypography(pThis, characterIndex, characterCount, RawPointer(typography)))
            }
        }

        public func GetTypography(_ characterIndex: Int32) throws -> Win2D.CanvasTypography? {
            let (typography) = try ComPtrs.initialize { typographyAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetTypography(pThis, characterIndex, &typographyAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas_Text.CanvasTypographyBridge.from(abi: typography)
        }

        public func get_LayoutBounds() throws -> WindowsFoundation.Rect {
            var bounds: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LayoutBounds(pThis, &bounds))
            }
            return .from(abi: bounds)
        }

        public func get_LayoutBoundsIncludingTrailingWhitespace() throws -> WindowsFoundation.Rect {
            var bounds: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LayoutBoundsIncludingTrailingWhitespace(pThis, &bounds))
            }
            return .from(abi: bounds)
        }

        public func get_LineCount() throws -> Int32 {
            var lineCount: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LineCount(pThis, &lineCount))
            }
            return lineCount
        }

        public func get_MaximumBidiReorderingDepth() throws -> Int32 {
            var depth: INT32 = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_MaximumBidiReorderingDepth(pThis, &depth))
            }
            return depth
        }

        public func get_DrawBounds() throws -> WindowsFoundation.Rect {
            var bounds: __x_ABI_CWindows_CFoundation_CRect = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DrawBounds(pThis, &bounds))
            }
            return .from(abi: bounds)
        }

        public func HitTest(_ point: WindowsFoundation.Vector2) throws -> Bool {
            var isHit: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.HitTest(pThis, .from(swift: point), &isHit))
            }
            return .init(from: isHit)
        }

        public func HitTestWithCoords(_ x: Float, _ y: Float) throws -> Bool {
            var isHit: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.HitTestWithCoords(pThis, x, y, &isHit))
            }
            return .init(from: isHit)
        }

        public func HitTestWithDescription(_ point: WindowsFoundation.Vector2, _ textLayoutRegion: inout Win2D.CanvasTextLayoutRegion) throws -> Bool {
            var isHit: boolean = 0
            var _textLayoutRegion: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.HitTestWithDescription(pThis, .from(swift: point), &_textLayoutRegion, &isHit))
            }
            textLayoutRegion = .from(abi: _textLayoutRegion)
            return .init(from: isHit)
        }

        public func HitTestWithDescriptionAndCoords(_ x: Float, _ y: Float, _ textLayoutRegion: inout Win2D.CanvasTextLayoutRegion) throws -> Bool {
            var isHit: boolean = 0
            var _textLayoutRegion: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.HitTestWithDescriptionAndCoords(pThis, x, y, &_textLayoutRegion, &isHit))
            }
            textLayoutRegion = .from(abi: _textLayoutRegion)
            return .init(from: isHit)
        }

        public func HitTestWithDescriptionAndTrailingSide(_ point: WindowsFoundation.Vector2, _ textLayoutRegion: inout Win2D.CanvasTextLayoutRegion, _ trailingSideOfCharacter: inout Bool) throws -> Bool {
            var isHit: boolean = 0
            var _textLayoutRegion: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion = .init()
            var _trailingSideOfCharacter: boolean = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.HitTestWithDescriptionAndTrailingSide(pThis, .from(swift: point), &_textLayoutRegion, &_trailingSideOfCharacter, &isHit))
            }
            textLayoutRegion = .from(abi: _textLayoutRegion)
            trailingSideOfCharacter = .init(from: _trailingSideOfCharacter)
            return .init(from: isHit)
        }

        public func HitTestWithDescriptionAndCoordsAndTrailingSide(_ x: Float, _ y: Float, _ textLayoutRegion: inout Win2D.CanvasTextLayoutRegion, _ trailingSideOfCharacter: inout Bool) throws -> Bool {
            var isHit: boolean = 0
            var _textLayoutRegion: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion = .init()
            var _trailingSideOfCharacter: boolean = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.HitTestWithDescriptionAndCoordsAndTrailingSide(pThis, x, y, &_textLayoutRegion, &_trailingSideOfCharacter, &isHit))
            }
            textLayoutRegion = .from(abi: _textLayoutRegion)
            trailingSideOfCharacter = .init(from: _trailingSideOfCharacter)
            return .init(from: isHit)
        }

        public func GetCaretPosition(_ characterIndex: Int32, _ trailingSideOfCharacter: Bool) throws -> WindowsFoundation.Vector2 {
            var location: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetCaretPosition(pThis, characterIndex, .init(from: trailingSideOfCharacter), &location))
            }
            return .from(abi: location)
        }

        public func GetCaretPositionWithDescription(_ characterIndex: Int32, _ trailingSideOfCharacter: Bool, _ textLayoutRegion: inout Win2D.CanvasTextLayoutRegion) throws -> WindowsFoundation.Vector2 {
            var location: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
            var _textLayoutRegion: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetCaretPositionWithDescription(pThis, characterIndex, .init(from: trailingSideOfCharacter), &_textLayoutRegion, &location))
            }
            textLayoutRegion = .from(abi: _textLayoutRegion)
            return .from(abi: location)
        }

        public func GetCharacterRegions(_ characterIndex: Int32, _ characterCount: Int32) throws -> [Win2D.CanvasTextLayoutRegion] {
            var hitTestDescriptions: WinRTArrayAbi<__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetCharacterRegions(pThis, characterIndex, characterCount, &hitTestDescriptions.count, &hitTestDescriptions.start))
            }
            defer { CoTaskMemFree(hitTestDescriptions.start) }
            return .from(abi: hitTestDescriptions)

        }

        public func GetPairKerning(_ characterIndex: Int32) throws -> Bool {
            var hasPairKerning: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetPairKerning(pThis, characterIndex, &hasPairKerning))
            }
            return .init(from: hasPairKerning)
        }

        public func SetPairKerning(_ characterIndex: Int32, _ characterCount: Int32, _ hasPairKerning: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetPairKerning(pThis, characterIndex, characterCount, .init(from: hasPairKerning)))
            }
        }

        public func GetLeadingCharacterSpacing(_ characterIndex: Int32) throws -> Float {
            var leadingSpacing: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetLeadingCharacterSpacing(pThis, characterIndex, &leadingSpacing))
            }
            return leadingSpacing
        }

        public func GetTrailingCharacterSpacing(_ characterIndex: Int32) throws -> Float {
            var trailingSpacing: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetTrailingCharacterSpacing(pThis, characterIndex, &trailingSpacing))
            }
            return trailingSpacing
        }

        public func GetMinimumCharacterAdvance(_ characterIndex: Int32) throws -> Float {
            var minimumAdvance: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMinimumCharacterAdvance(pThis, characterIndex, &minimumAdvance))
            }
            return minimumAdvance
        }

        public func SetCharacterSpacing(_ characterIndex: Int32, _ characterCount: Int32, _ leadingSpacing: Float, _ trailingSpacing: Float, _ minimumAdvance: Float) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetCharacterSpacing(pThis, characterIndex, characterCount, leadingSpacing, trailingSpacing, minimumAdvance))
            }
        }

        public func get_VerticalGlyphOrientation() throws -> Win2D.CanvasVerticalGlyphOrientation {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasVerticalGlyphOrientation = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_VerticalGlyphOrientation(pThis, &value))
            }
            return value
        }

        public func put_VerticalGlyphOrientation(_ value: Win2D.CanvasVerticalGlyphOrientation) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_VerticalGlyphOrientation(pThis, value))
            }
        }

        public func get_OpticalAlignment() throws -> Win2D.CanvasOpticalAlignment {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasOpticalAlignment = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OpticalAlignment(pThis, &value))
            }
            return value
        }

        public func put_OpticalAlignment(_ value: Win2D.CanvasOpticalAlignment) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_OpticalAlignment(pThis, value))
            }
        }

        public func get_LastLineWrapping() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_LastLineWrapping(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_LastLineWrapping(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_LastLineWrapping(pThis, .init(from: value)))
            }
        }

        public func get_Device() throws -> Win2D.CanvasDevice? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayout.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Device(pThis, &valueAbi))
                }
            }
            return __IMPL_Microsoft_Graphics_Canvas.CanvasDeviceBridge.from(abi: value)
        }

    }

    public class ICanvasTextLayoutFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory }

        public func Create(_ resourceCreator: Win2D.AnyICanvasResourceCreator?, _ textString: String, _ textFormat: Win2D.CanvasTextFormat?, _ requestedWidth: Float, _ requestedHeight: Float) throws -> ICanvasTextLayout {
            let (canvasTextLayout) = try ComPtrs.initialize { canvasTextLayoutAbi in
                let resourceCreatorWrapper = __ABI_Microsoft_Graphics_Canvas.ICanvasResourceCreatorWrapper(resourceCreator)
                let _resourceCreator = try! resourceCreatorWrapper?.toABI { $0 }
                let _textString = try! HString(textString)
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, _resourceCreator, _textString.get(), RawPointer(textFormat), requestedWidth, requestedHeight, &canvasTextLayoutAbi))
                }
            }
            return ICanvasTextLayout(canvasTextLayout!)
        }

    }

    public class ICanvasTextLayoutStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics }

        public func GetGlyphOrientationTransform(_ glyphOrientation: Win2D.CanvasGlyphOrientation, _ isSideways: Bool, _ position: WindowsFoundation.Vector2) throws -> WindowsFoundation.Matrix3x2 {
            var transform: __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextLayoutStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetGlyphOrientationTransform(pThis, glyphOrientation, .init(from: isSideways), .from(swift: position), &transform))
            }
            return .from(abi: transform)
        }

    }

    public class ICanvasTextRenderer: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer }

        open func DrawGlyphRun(_ point: WindowsFoundation.Vector2, _ fontFace: Win2D.CanvasFontFace?, _ fontSize: Float, _ glyphs: [Win2D.CanvasGlyph], _ isSideways: Bool, _ bidiLevel: UInt32, _ brush: Any?, _ measuringMode: Win2D.CanvasTextMeasuringMode, _ localeName: String, _ textString: String, _ clusterMapIndices: [Int32], _ characterIndex: UInt32, _ glyphOrientation: Win2D.CanvasGlyphOrientation) throws {
            try glyphs.toABI { _glyphs in
                let brushWrapper = __ABI_.AnyWrapper(brush)
                let _brush = try! brushWrapper?.toABI { $0 }
                let _localeName = try! HString(localeName)
                let _textString = try! HString(textString)
                try clusterMapIndices.toABI { _clusterMapIndices in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.DrawGlyphRun(pThis, .from(swift: point), RawPointer(fontFace), fontSize, _glyphs.count, _glyphs.start, .init(from: isSideways), bidiLevel, _brush, measuringMode, _localeName.get(), _textString.get(), _clusterMapIndices.count, _clusterMapIndices.start, characterIndex, glyphOrientation))
                }
            }
            }
        }

        open func DrawStrikethrough(_ point: WindowsFoundation.Vector2, _ strikethroughWidth: Float, _ strikethroughThickness: Float, _ strikethroughOffset: Float, _ textDirection: Win2D.CanvasTextDirection, _ brush: Any?, _ textMeasuringMode: Win2D.CanvasTextMeasuringMode, _ localeName: String, _ glyphOrientation: Win2D.CanvasGlyphOrientation) throws {
            let brushWrapper = __ABI_.AnyWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            let _localeName = try! HString(localeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawStrikethrough(pThis, .from(swift: point), strikethroughWidth, strikethroughThickness, strikethroughOffset, textDirection, _brush, textMeasuringMode, _localeName.get(), glyphOrientation))
            }
        }

        open func DrawUnderline(_ point: WindowsFoundation.Vector2, _ underlineWidth: Float, _ underlineThickness: Float, _ underlineOffset: Float, _ runHeight: Float, _ textDirection: Win2D.CanvasTextDirection, _ brush: Any?, _ textMeasuringMode: Win2D.CanvasTextMeasuringMode, _ localeName: String, _ glyphOrientation: Win2D.CanvasGlyphOrientation) throws {
            let brushWrapper = __ABI_.AnyWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            let _localeName = try! HString(localeName)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawUnderline(pThis, .from(swift: point), underlineWidth, underlineThickness, underlineOffset, runHeight, textDirection, _brush, textMeasuringMode, _localeName.get(), glyphOrientation))
            }
        }

        open func DrawInlineObject(_ point: WindowsFoundation.Vector2, _ inlineObject: Win2D.AnyICanvasTextInlineObject?, _ isSideways: Bool, _ isRightToLeft: Bool, _ brush: Any?, _ glyphOrientation: Win2D.CanvasGlyphOrientation) throws {
            let inlineObjectWrapper = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextInlineObjectWrapper(inlineObject)
            let _inlineObject = try! inlineObjectWrapper?.toABI { $0 }
            let brushWrapper = __ABI_.AnyWrapper(brush)
            let _brush = try! brushWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DrawInlineObject(pThis, .from(swift: point), _inlineObject, .init(from: isSideways), .init(from: isRightToLeft), _brush, glyphOrientation))
            }
        }

        open func get_PixelSnappingDisabled() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PixelSnappingDisabled(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_Transform() throws -> WindowsFoundation.Matrix3x2 {
            var value: __x_ABI_CWindows_CFoundation_CNumerics_CMatrix3x2 = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Transform(pThis, &value))
            }
            return .from(abi: value)
        }

        open func get_Dpi() throws -> Float {
            var value: FLOAT = 0.0
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Dpi(pThis, &value))
            }
            return value
        }

    }

    internal static var ICanvasTextRendererVTable: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRendererVtbl = .init(
        QueryInterface: { ICanvasTextRendererWrapper.queryInterface($0, $1, $2) },
        AddRef: { ICanvasTextRendererWrapper.addRef($0) },
        Release: { ICanvasTextRendererWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextRendererWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.Graphics.Canvas.Text.ICanvasTextRenderer").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        DrawGlyphRun: {
            do {
                guard let __unwrapped__instance = ICanvasTextRendererWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let point: WindowsFoundation.Vector2 = .from(abi: $1)
                let fontFace: Win2D.CanvasFontFace? = __IMPL_Microsoft_Graphics_Canvas_Text.CanvasFontFaceBridge.from(abi: ComPtr($2))
                let fontSize: Float = $3
                let glyphs: [Win2D.CanvasGlyph] = .from(abi: (count: $4, start: $5))
                let isSideways: Bool = .init(from: $6)
                let bidiLevel: UInt32 = $7
                let brush: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($8))
                let measuringMode: Win2D.CanvasTextMeasuringMode = $9
                let localeName: String = .init(from: $10)
                let textString: String = .init(from: $11)
                let clusterMapIndices: [Int32] = .from(abi: (count: $12, start: $13))
                let characterIndex: UInt32 = $14
                let glyphOrientation: Win2D.CanvasGlyphOrientation = $15
                try __unwrapped__instance.drawGlyphRun(point, fontFace, fontSize, glyphs, isSideways, bidiLevel, brush, measuringMode, localeName, textString, clusterMapIndices, characterIndex, glyphOrientation)
                return S_OK
            } catch { return failWith(error: error) }
        },

        DrawStrikethrough: {
            do {
                guard let __unwrapped__instance = ICanvasTextRendererWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let point: WindowsFoundation.Vector2 = .from(abi: $1)
                let strikethroughWidth: Float = $2
                let strikethroughThickness: Float = $3
                let strikethroughOffset: Float = $4
                let textDirection: Win2D.CanvasTextDirection = $5
                let brush: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($6))
                let textMeasuringMode: Win2D.CanvasTextMeasuringMode = $7
                let localeName: String = .init(from: $8)
                let glyphOrientation: Win2D.CanvasGlyphOrientation = $9
                try __unwrapped__instance.drawStrikethrough(point, strikethroughWidth, strikethroughThickness, strikethroughOffset, textDirection, brush, textMeasuringMode, localeName, glyphOrientation)
                return S_OK
            } catch { return failWith(error: error) }
        },

        DrawUnderline: {
            do {
                guard let __unwrapped__instance = ICanvasTextRendererWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let point: WindowsFoundation.Vector2 = .from(abi: $1)
                let underlineWidth: Float = $2
                let underlineThickness: Float = $3
                let underlineOffset: Float = $4
                let runHeight: Float = $5
                let textDirection: Win2D.CanvasTextDirection = $6
                let brush: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($7))
                let textMeasuringMode: Win2D.CanvasTextMeasuringMode = $8
                let localeName: String = .init(from: $9)
                let glyphOrientation: Win2D.CanvasGlyphOrientation = $10
                try __unwrapped__instance.drawUnderline(point, underlineWidth, underlineThickness, underlineOffset, runHeight, textDirection, brush, textMeasuringMode, localeName, glyphOrientation)
                return S_OK
            } catch { return failWith(error: error) }
        },

        DrawInlineObject: {
            do {
                guard let __unwrapped__instance = ICanvasTextRendererWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let point: WindowsFoundation.Vector2 = .from(abi: $1)
                let inlineObject: Win2D.AnyICanvasTextInlineObject? = __ABI_Microsoft_Graphics_Canvas_Text.ICanvasTextInlineObjectWrapper.unwrapFrom(abi: ComPtr($2))
                let isSideways: Bool = .init(from: $3)
                let isRightToLeft: Bool = .init(from: $4)
                let brush: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($5))
                let glyphOrientation: Win2D.CanvasGlyphOrientation = $6
                try __unwrapped__instance.drawInlineObject(point, inlineObject, isSideways, isRightToLeft, brush, glyphOrientation)
                return S_OK
            } catch { return failWith(error: error) }
        },

        get_PixelSnappingDisabled: {
            guard let __unwrapped__instance = ICanvasTextRendererWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.pixelSnappingDisabled
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        get_Transform: {
            guard let __unwrapped__instance = ICanvasTextRendererWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.transform
            $1?.initialize(to: .from(swift: value))
            return S_OK
        },

        get_Dpi: {
            guard let __unwrapped__instance = ICanvasTextRendererWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.dpi
            $1?.initialize(to: value)
            return S_OK
        }
    )

    public typealias ICanvasTextRendererWrapper = InterfaceWrapperBase<__IMPL_Microsoft_Graphics_Canvas_Text.ICanvasTextRendererBridge>
    public class ICanvasTextRenderingParameters: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters }

        public func get_RenderingMode() throws -> Win2D.CanvasTextRenderingMode {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextRenderingMode = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_RenderingMode(pThis, &value))
            }
            return value
        }

        public func get_GridFit() throws -> Win2D.CanvasTextGridFit {
            var value: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextGridFit = .init(0)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParameters.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GridFit(pThis, &value))
            }
            return value
        }

    }

    public class ICanvasTextRenderingParametersFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory }

        public func Create(_ textRenderingMode: Win2D.CanvasTextRenderingMode, _ gridFit: Win2D.CanvasTextGridFit) throws -> ICanvasTextRenderingParameters {
            let (textRenderingParameters) = try ComPtrs.initialize { textRenderingParametersAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTextRenderingParametersFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, textRenderingMode, gridFit, &textRenderingParametersAbi))
                }
            }
            return ICanvasTextRenderingParameters(textRenderingParameters!)
        }

    }

    public class ICanvasTypography: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography }

        public func AddFeature(_ feature: Win2D.CanvasTypographyFeature) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddFeature(pThis, .from(swift: feature)))
            }
        }

        public func AddFeatureWithNameAndParameter(_ name: Win2D.CanvasTypographyFeatureName, _ parameter: UInt32) throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddFeatureWithNameAndParameter(pThis, name, parameter))
            }
        }

        public func GetFeatures() throws -> [Win2D.CanvasTypographyFeature] {
            var features: WinRTArrayAbi<__x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeature> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CICanvasTypography.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetFeatures(pThis, &features.count, &features.start))
            }
            defer { CoTaskMemFree(features.start) }
            return .from(abi: features)

        }

    }

    public class _ABI_CanvasAnalyzedBreakpoint {
        public var val: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBreakpoint = .init()
        public init() { }
        public init(from swift: Win2D.CanvasAnalyzedBreakpoint) {
            val.BreakBefore = swift.breakBefore
            val.BreakAfter = swift.breakAfter
            val.IsWhitespace = .init(from: swift.isWhitespace)
            val.IsSoftHyphen = .init(from: swift.isSoftHyphen)
        }

        public func detach() -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBreakpoint {
            let result = val
            return result
        }

        deinit {
        }
    }
    public class _ABI_CanvasAnalyzedGlyphOrientation {
        public var val: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedGlyphOrientation = .init()
        public init() { }
        public init(from swift: Win2D.CanvasAnalyzedGlyphOrientation) {
            val.GlyphOrientation = swift.glyphOrientation
            val.AdjustedBidiLevel = swift.adjustedBidiLevel
            val.IsSideways = .init(from: swift.isSideways)
            val.IsRightToLeft = .init(from: swift.isRightToLeft)
        }

        public func detach() -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedGlyphOrientation {
            let result = val
            return result
        }

        deinit {
        }
    }
    public class _ABI_CanvasFontProperty {
        public var val: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontProperty = .init()
        public init() { }
        public init(from swift: Win2D.CanvasFontProperty) {
            val.Identifier = swift.identifier
            val.Value = try! HString(swift.value).detach()
            val.Locale = try! HString(swift.locale).detach()
        }

        public func detach() -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasFontProperty {
            let result = val
            val.Value = nil
            val.Locale = nil
            return result
        }

        deinit {
            WindowsDeleteString(val.Value)
            WindowsDeleteString(val.Locale)
        }
    }
    public class _ABI_CanvasGlyphShaping {
        public var val: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping = .init()
        public init() { }
        public init(from swift: Win2D.CanvasGlyphShaping) {
            val.Justification = swift.justification
            val.IsClusterStart = .init(from: swift.isClusterStart)
            val.IsDiacritic = .init(from: swift.isDiacritic)
            val.IsZeroWidthSpace = .init(from: swift.isZeroWidthSpace)
        }

        public func detach() -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphShaping {
            let result = val
            return result
        }

        deinit {
        }
    }
    public class _ABI_CanvasJustificationOpportunity {
        public var val: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasJustificationOpportunity = .init()
        public init() { }
        public init(from swift: Win2D.CanvasJustificationOpportunity) {
            val.ExpansionMinimum = swift.expansionMinimum
            val.ExpansionMaximum = swift.expansionMaximum
            val.CompressionMaximum = swift.compressionMaximum
            val.ExpansionPriority = swift.expansionPriority
            val.CompressionPriority = swift.compressionPriority
            val.AllowResidualExpansion = .init(from: swift.allowResidualExpansion)
            val.AllowResidualCompression = .init(from: swift.allowResidualCompression)
            val.ApplyToLeadingEdge = .init(from: swift.applyToLeadingEdge)
            val.ApplyToTrailingEdge = .init(from: swift.applyToTrailingEdge)
        }

        public func detach() -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasJustificationOpportunity {
            let result = val
            return result
        }

        deinit {
        }
    }
    public class _ABI_CanvasLineMetrics {
        public var val: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineMetrics = .init()
        public init() { }
        public init(from swift: Win2D.CanvasLineMetrics) {
            val.CharacterCount = swift.characterCount
            val.TrailingWhitespaceCount = swift.trailingWhitespaceCount
            val.TerminalNewlineCount = swift.terminalNewlineCount
            val.Height = swift.height
            val.Baseline = swift.baseline
            val.IsTrimmed = .init(from: swift.isTrimmed)
            val.LeadingWhitespaceBefore = swift.leadingWhitespaceBefore
            val.LeadingWhitespaceAfter = swift.leadingWhitespaceAfter
        }

        public func detach() -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasLineMetrics {
            let result = val
            return result
        }

        deinit {
        }
    }
    public class _ABI_CanvasScriptProperties {
        public var val: __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScriptProperties = .init()
        public init() { }
        public init(from swift: Win2D.CanvasScriptProperties) {
            val.IsoScriptCode = try! HString(swift.isoScriptCode).detach()
            val.IsoScriptNumber = swift.isoScriptNumber
            val.ClusterLookahead = swift.clusterLookahead
            val.JustificationCharacter = try! HString(swift.justificationCharacter).detach()
            val.RestrictCaretToClusters = .init(from: swift.restrictCaretToClusters)
            val.UsesWordDividers = .init(from: swift.usesWordDividers)
            val.IsDiscreteWriting = .init(from: swift.isDiscreteWriting)
            val.IsBlockWriting = .init(from: swift.isBlockWriting)
            val.IsDistributedWithinCluster = .init(from: swift.isDistributedWithinCluster)
            val.IsConnectedWriting = .init(from: swift.isConnectedWriting)
            val.IsCursiveWriting = .init(from: swift.isCursiveWriting)
        }

        public func detach() -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasScriptProperties {
            let result = val
            val.IsoScriptCode = nil
            val.JustificationCharacter = nil
            return result
        }

        deinit {
            WindowsDeleteString(val.IsoScriptCode)
            WindowsDeleteString(val.JustificationCharacter)
        }
    }
}
extension __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBidi {
        public static func from(swift: Win2D.CanvasAnalyzedBidi) -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedBidi {
            .init(ExplicitLevel: swift.explicitLevel, ResolvedLevel: swift.resolvedLevel)
        }
    }
    extension __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript {
        public static func from(swift: Win2D.CanvasAnalyzedScript) -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasAnalyzedScript {
            .init(ScriptIdentifier: swift.scriptIdentifier, Shape: swift.shape)
        }
    }
    extension __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange {
        public static func from(swift: Win2D.CanvasCharacterRange) -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasCharacterRange {
            .init(CharacterIndex: swift.characterIndex, CharacterCount: swift.characterCount)
        }
    }
    extension __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterMetrics {
        public static func from(swift: Win2D.CanvasClusterMetrics) -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasClusterMetrics {
            .init(CharacterCount: swift.characterCount, Width: swift.width, Properties: swift.properties)
        }
    }
    extension __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph {
        public static func from(swift: Win2D.CanvasGlyph) -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyph {
            .init(Index: swift.index, Advance: swift.advance, AdvanceOffset: swift.advanceOffset, AscenderOffset: swift.ascenderOffset)
        }
    }
    extension __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphMetrics {
        public static func from(swift: Win2D.CanvasGlyphMetrics) -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasGlyphMetrics {
            .init(LeftSideBearing: swift.leftSideBearing, AdvanceWidth: swift.advanceWidth, RightSideBearing: swift.rightSideBearing, TopSideBearing: swift.topSideBearing, AdvanceHeight: swift.advanceHeight, BottomSideBearing: swift.bottomSideBearing, VerticalOrigin: swift.verticalOrigin, DrawBounds: .from(swift: swift.drawBounds))
        }
    }
    extension __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion {
        public static func from(swift: Win2D.CanvasTextLayoutRegion) -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTextLayoutRegion {
            .init(CharacterIndex: swift.characterIndex, CharacterCount: swift.characterCount, LayoutBounds: .from(swift: swift.layoutBounds))
        }
    }
    extension __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeature {
        public static func from(swift: Win2D.CanvasTypographyFeature) -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasTypographyFeature {
            .init(Name: swift.name, Parameter: swift.parameter)
        }
    }
    extension __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasUnicodeRange {
        public static func from(swift: Win2D.CanvasUnicodeRange) -> __x_ABI_CMicrosoft_CGraphics_CCanvas_CText_CCanvasUnicodeRange {
            .init(First: swift.first, Last: swift.last)
        }
    }
    