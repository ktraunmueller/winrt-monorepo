// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIComponentConnector: WindowsFoundation.IID {
    .init(Data1: 0xAD401812, Data2: 0xB091, Data3: 0x51D0, Data4: ( 0xB9,0x15,0x2D,0x68,0x2C,0xD2,0xAF,0x10 ))// AD401812-B091-51D0-B915-2D682CD2AF10
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIDataTemplateComponent: WindowsFoundation.IID {
    .init(Data1: 0x1743DDF7, Data2: 0x38BA, Data3: 0x58C9, Data4: ( 0xA2,0xA6,0xB0,0xAE,0x28,0x71,0x3B,0xEE ))// 1743DDF7-38BA-58C9-A2A6-B0AE28713BEE
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember: WindowsFoundation.IID {
    .init(Data1: 0xBF3A2913, Data2: 0x5C63, Data3: 0x50EC, Data4: ( 0x86,0x60,0x61,0x80,0x9B,0xE7,0xB9,0xB9 ))// BF3A2913-5C63-50EC-8660-61809BE7B9B9
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMetadataProvider: WindowsFoundation.IID {
    .init(Data1: 0xA96251F0, Data2: 0x2214, Data3: 0x5D53, Data4: ( 0x87,0x46,0xCE,0x99,0xA2,0x59,0x3C,0xD7 ))// A96251F0-2214-5D53-8746-CE99A2593CD7
}

private var IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType: WindowsFoundation.IID {
    .init(Data1: 0xD24219DF, Data2: 0x7EC9, Data3: 0x57F1, Data4: ( 0xA2,0x7B,0x6A,0xF2,0x51,0xD9,0xC5,0xBC ))// D24219DF-7EC9-57F1-A27B-6AF251D9C5BC
}

@_spi(WinRTInternal)
public enum __ABI_Microsoft_UI_Xaml_Markup {
    public class IComponentConnector: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIComponentConnector }

        open func Connect(_ connectionId: Int32, _ target: Any?) throws {
            let targetWrapper = __ABI_.AnyWrapper(target)
            let _target = try! targetWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIComponentConnector.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Connect(pThis, connectionId, _target))
            }
        }

        open func GetBindingConnector(_ connectionId: Int32, _ target: Any?) throws -> WinUI.AnyIComponentConnector? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let targetWrapper = __ABI_.AnyWrapper(target)
                let _target = try! targetWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIComponentConnector.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetBindingConnector(pThis, connectionId, _target, &resultAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Markup.IComponentConnectorWrapper.unwrapFrom(abi: result)
        }

    }

    internal static var IComponentConnectorVTable: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIComponentConnectorVtbl = .init(
        QueryInterface: { IComponentConnectorWrapper.queryInterface($0, $1, $2) },
        AddRef: { IComponentConnectorWrapper.addRef($0) },
        Release: { IComponentConnectorWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Markup.IComponentConnectorWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.UI.Xaml.Markup.IComponentConnector").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Connect: {
            do {
                guard let __unwrapped__instance = IComponentConnectorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let connectionId: Int32 = $1
                let target: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
                try __unwrapped__instance.connect(connectionId, target)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetBindingConnector: {
            do {
                guard let __unwrapped__instance = IComponentConnectorWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let connectionId: Int32 = $1
                let target: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
                let result = try __unwrapped__instance.getBindingConnector(connectionId, target)
                let resultWrapper = __ABI_Microsoft_UI_Xaml_Markup.IComponentConnectorWrapper(result)
                resultWrapper?.copyTo($3)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IComponentConnectorWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Markup.IComponentConnectorBridge>
    public class IDataTemplateComponent: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIDataTemplateComponent }

        open func Recycle() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIDataTemplateComponent.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Recycle(pThis))
            }
        }

        open func ProcessBindings(_ item: Any?, _ itemIndex: Int32, _ phase: Int32, _ nextPhase: inout Int32) throws {
            let itemWrapper = __ABI_.AnyWrapper(item)
            let _item = try! itemWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIDataTemplateComponent.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ProcessBindings(pThis, _item, itemIndex, phase, &nextPhase))
            }
        }

    }

    internal static var IDataTemplateComponentVTable: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIDataTemplateComponentVtbl = .init(
        QueryInterface: { IDataTemplateComponentWrapper.queryInterface($0, $1, $2) },
        AddRef: { IDataTemplateComponentWrapper.addRef($0) },
        Release: { IDataTemplateComponentWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Markup.IDataTemplateComponentWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.UI.Xaml.Markup.IDataTemplateComponent").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Recycle: {
            do {
                guard let __unwrapped__instance = IDataTemplateComponentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.recycle()
                return S_OK
            } catch { return failWith(error: error) }
        },

        ProcessBindings: {
            do {
                guard let __unwrapped__instance = IDataTemplateComponentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let item: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                let itemIndex: Int32 = $2
                let phase: Int32 = $3
                var nextPhase: Int32 = 0
                try __unwrapped__instance.processBindings(item, itemIndex, phase, &nextPhase)
                $4?.initialize(to: nextPhase)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IDataTemplateComponentWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Markup.IDataTemplateComponentBridge>
    public class IXamlMember: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember }

        open func get_IsAttachable() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsAttachable(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_IsDependencyProperty() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDependencyProperty(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_IsReadOnly() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsReadOnly(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_Name() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Name(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_TargetType() throws -> WinUI.AnyIXamlType? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_TargetType(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper.unwrapFrom(abi: value)
        }

        open func get_Type() throws -> WinUI.AnyIXamlType? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Type(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper.unwrapFrom(abi: value)
        }

        open func GetValue(_ instance: Any?) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let instanceWrapper = __ABI_.AnyWrapper(instance)
                let _instance = try! instanceWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetValue(pThis, _instance, &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        open func SetValue(_ instance: Any?, _ value: Any?) throws {
            let instanceWrapper = __ABI_.AnyWrapper(instance)
            let _instance = try! instanceWrapper?.toABI { $0 }
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMember.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetValue(pThis, _instance, _value))
            }
        }

    }

    internal static var IXamlMemberVTable: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMemberVtbl = .init(
        QueryInterface: { IXamlMemberWrapper.queryInterface($0, $1, $2) },
        AddRef: { IXamlMemberWrapper.addRef($0) },
        Release: { IXamlMemberWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Markup.IXamlMemberWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.UI.Xaml.Markup.IXamlMember").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_IsAttachable: {
            guard let __unwrapped__instance = IXamlMemberWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isAttachable
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        get_IsDependencyProperty: {
            guard let __unwrapped__instance = IXamlMemberWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isDependencyProperty
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        get_IsReadOnly: {
            guard let __unwrapped__instance = IXamlMemberWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isReadOnly
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        get_Name: {
            guard let __unwrapped__instance = IXamlMemberWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.name
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        },

        get_TargetType: {
            guard let __unwrapped__instance = IXamlMemberWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.targetType
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        get_Type: {
            guard let __unwrapped__instance = IXamlMemberWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.type
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        GetValue: {
            do {
                guard let __unwrapped__instance = IXamlMemberWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let instance: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                let result = try __unwrapped__instance.getValue(instance)
                let resultWrapper = __ABI_.AnyWrapper(result)
                resultWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        SetValue: {
            do {
                guard let __unwrapped__instance = IXamlMemberWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let instance: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
                try __unwrapped__instance.setValue(instance, value)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IXamlMemberWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Markup.IXamlMemberBridge>
    public class IXamlMetadataProvider: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMetadataProvider }

        open func GetXamlType(_ type: WinUI.TypeName) throws -> WinUI.AnyIXamlType? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _type = __ABI_Windows_UI_Xaml_Interop._ABI_TypeName(from: type)
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMetadataProvider.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetXamlType(pThis, _type.val, &resultAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper.unwrapFrom(abi: result)
        }

        open func GetXamlTypeByFullName(_ fullName: String) throws -> WinUI.AnyIXamlType? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _fullName = try! HString(fullName)
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMetadataProvider.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetXamlTypeByFullName(pThis, _fullName.get(), &resultAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper.unwrapFrom(abi: result)
        }

        open func GetXmlnsDefinitions() throws -> [WinUI.XmlnsDefinition] {
            var result: WinRTArrayAbi<__x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CXmlnsDefinition> = (0, nil)
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMetadataProvider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetXmlnsDefinitions(pThis, &result.count, &result.start))
            }
            defer { CoTaskMemFree(result.start) }
            return .from(abi: result)

        }

    }

    internal static var IXamlMetadataProviderVTable: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlMetadataProviderVtbl = .init(
        QueryInterface: { IXamlMetadataProviderWrapper.queryInterface($0, $1, $2) },
        AddRef: { IXamlMetadataProviderWrapper.addRef($0) },
        Release: { IXamlMetadataProviderWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Markup.IXamlMetadataProviderWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.UI.Xaml.Markup.IXamlMetadataProvider").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        GetXamlType: {
            do {
                guard let __unwrapped__instance = IXamlMetadataProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let type: WinUI.TypeName = .from(abi: $1)
                let result = try __unwrapped__instance.getXamlType(type)
                let resultWrapper = __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper(result)
                resultWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetXamlTypeByFullName: {
            do {
                guard let __unwrapped__instance = IXamlMetadataProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let fullName: String = .init(from: $1)
                let result = try __unwrapped__instance.getXamlType(fullName)
                let resultWrapper = __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper(result)
                resultWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetXmlnsDefinitions: {
            do {
                guard let __unwrapped__instance = IXamlMetadataProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.getXmlnsDefinitions()
                $1?.initialize(to: UInt32(result.count))
                do {
                    try result.fill(abi: $2)
                } catch { return failWith(error: error) }
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IXamlMetadataProviderWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Markup.IXamlMetadataProviderBridge>
    public class IXamlType: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType }

        open func get_BaseType() throws -> WinUI.AnyIXamlType? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BaseType(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper.unwrapFrom(abi: value)
        }

        open func get_ContentProperty() throws -> WinUI.AnyIXamlMember? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ContentProperty(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Markup.IXamlMemberWrapper.unwrapFrom(abi: value)
        }

        open func get_FullName() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FullName(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_IsArray() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsArray(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_IsCollection() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsCollection(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_IsConstructible() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsConstructible(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_IsDictionary() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsDictionary(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_IsMarkupExtension() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsMarkupExtension(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_IsBindable() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsBindable(pThis, &value))
            }
            return .init(from: value)
        }

        open func get_ItemType() throws -> WinUI.AnyIXamlType? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_ItemType(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper.unwrapFrom(abi: value)
        }

        open func get_KeyType() throws -> WinUI.AnyIXamlType? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_KeyType(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper.unwrapFrom(abi: value)
        }

        open func get_BoxedType() throws -> WinUI.AnyIXamlType? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BoxedType(pThis, &valueAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper.unwrapFrom(abi: value)
        }

        open func get_UnderlyingType() throws -> WinUI.TypeName {
            var value: __x_ABI_CWindows_CUI_CXaml_CInterop_CTypeName = .init()
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_UnderlyingType(pThis, &value))
            }
            return .from(abi: value)
        }

        open func ActivateInstance() throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ActivateInstance(pThis, &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        open func CreateFromString(_ value: String) throws -> Any? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _value = try! HString(value)
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateFromString(pThis, _value.get(), &resultAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: result)
        }

        open func GetMember(_ name: String) throws -> WinUI.AnyIXamlMember? {
            let (result) = try ComPtrs.initialize { resultAbi in
                let _name = try! HString(name)
                _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetMember(pThis, _name.get(), &resultAbi))
                }
            }
            return __ABI_Microsoft_UI_Xaml_Markup.IXamlMemberWrapper.unwrapFrom(abi: result)
        }

        open func AddToVector(_ instance: Any?, _ value: Any?) throws {
            let instanceWrapper = __ABI_.AnyWrapper(instance)
            let _instance = try! instanceWrapper?.toABI { $0 }
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddToVector(pThis, _instance, _value))
            }
        }

        open func AddToMap(_ instance: Any?, _ key: Any?, _ value: Any?) throws {
            let instanceWrapper = __ABI_.AnyWrapper(instance)
            let _instance = try! instanceWrapper?.toABI { $0 }
            let keyWrapper = __ABI_.AnyWrapper(key)
            let _key = try! keyWrapper?.toABI { $0 }
            let valueWrapper = __ABI_.AnyWrapper(value)
            let _value = try! valueWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.AddToMap(pThis, _instance, _key, _value))
            }
        }

        open func RunInitializer() throws {
            _ = try perform(as: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlType.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.RunInitializer(pThis))
            }
        }

    }

    internal static var IXamlTypeVTable: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CIXamlTypeVtbl = .init(
        QueryInterface: { IXamlTypeWrapper.queryInterface($0, $1, $2) },
        AddRef: { IXamlTypeWrapper.addRef($0) },
        Release: { IXamlTypeWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Microsoft.UI.Xaml.Markup.IXamlType").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_BaseType: {
            guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.baseType
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        get_ContentProperty: {
            guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.contentProperty
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Markup.IXamlMemberWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        get_FullName: {
            guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.fullName
            $1?.initialize(to: try! HString(value).detach())
            return S_OK
        },

        get_IsArray: {
            guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isArray
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        get_IsCollection: {
            guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isCollection
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        get_IsConstructible: {
            guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isConstructible
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        get_IsDictionary: {
            guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isDictionary
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        get_IsMarkupExtension: {
            guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isMarkupExtension
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        get_IsBindable: {
            guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.isBindable
            $1?.initialize(to: .init(from: value))
            return S_OK
        },

        get_ItemType: {
            guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.itemType
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        get_KeyType: {
            guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.keyType
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        get_BoxedType: {
            guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.boxedType
            let valueWrapper = __ABI_Microsoft_UI_Xaml_Markup.IXamlTypeWrapper(value)
            valueWrapper?.copyTo($1)
            return S_OK
        },

        get_UnderlyingType: {
            guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.underlyingType
            let _value = __ABI_Windows_UI_Xaml_Interop._ABI_TypeName(from: value)
            	$1?.initialize(to: _value.detach())
            return S_OK
        },

        ActivateInstance: {
            do {
                guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let result = try __unwrapped__instance.activateInstance()
                let resultWrapper = __ABI_.AnyWrapper(result)
                resultWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        },

        CreateFromString: {
            do {
                guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value: String = .init(from: $1)
                let result = try __unwrapped__instance.createFromString(value)
                let resultWrapper = __ABI_.AnyWrapper(result)
                resultWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetMember: {
            do {
                guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let name: String = .init(from: $1)
                let result = try __unwrapped__instance.getMember(name)
                let resultWrapper = __ABI_Microsoft_UI_Xaml_Markup.IXamlMemberWrapper(result)
                resultWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        },

        AddToVector: {
            do {
                guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let instance: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
                try __unwrapped__instance.addToVector(instance, value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        AddToMap: {
            do {
                guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let instance: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
                let key: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
                let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($3))
                try __unwrapped__instance.addToMap(instance, key, value)
                return S_OK
            } catch { return failWith(error: error) }
        },

        RunInitializer: {
            do {
                guard let __unwrapped__instance = IXamlTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.runInitializer()
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IXamlTypeWrapper = InterfaceWrapperBase<__IMPL_Microsoft_UI_Xaml_Markup.IXamlTypeBridge>
    public class _ABI_XmlnsDefinition {
        public var val: __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CXmlnsDefinition = .init()
        public init() { }
        public init(from swift: WinUI.XmlnsDefinition) {
            val.XmlNamespace = try! HString(swift.xmlNamespace).detach()
            val.Namespace = try! HString(swift.namespace).detach()
        }

        public func detach() -> __x_ABI_CMicrosoft_CUI_CXaml_CMarkup_CXmlnsDefinition {
            let result = val
            val.XmlNamespace = nil
            val.Namespace = nil
            return result
        }

        deinit {
            WindowsDeleteString(val.XmlNamespace)
            WindowsDeleteString(val.Namespace)
        }
    }
}
