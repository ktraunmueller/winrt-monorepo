// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

@_spi(WinRTInternal)
public enum __IMPL_Windows_ApplicationModel_Core {
    public enum ICoreApplicationUnhandledErrorBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationUnhandledError
        public typealias SwiftABI = __ABI_Windows_ApplicationModel_Core.ICoreApplicationUnhandledError
        public typealias SwiftProjection = AnyICoreApplicationUnhandledError
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return ICoreApplicationUnhandledErrorImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_ApplicationModel_Core.ICoreApplicationUnhandledErrorVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class ICoreApplicationUnhandledErrorImpl: ICoreApplicationUnhandledError, WinRTAbiImpl {
        fileprivate typealias Bridge = ICoreApplicationUnhandledErrorBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.core.icoreapplicationunhandlederror.unhandlederrordetected)
        fileprivate lazy var unhandledErrorDetected : Event<EventHandler<UnhandledErrorDetectedEventArgs?>> = {
          .init(
            add: { [weak self] in
              guard let this = self?._default else { return .init() }
              return try! this.add_UnhandledErrorDetected($0)
            },
            remove: { [weak self] in
             try? self?._default.remove_UnhandledErrorDetected($0)
           }
          )
        }()

    }

    public enum IFrameworkViewBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CApplicationModel_CCore_CIFrameworkView
        public typealias SwiftABI = __ABI_Windows_ApplicationModel_Core.IFrameworkView
        public typealias SwiftProjection = AnyIFrameworkView
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IFrameworkViewImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_ApplicationModel_Core.IFrameworkViewVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IFrameworkViewImpl: IFrameworkView, WinRTAbiImpl {
        fileprivate typealias Bridge = IFrameworkViewBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.core.iframeworkview.initialize)
        fileprivate func initialize(_ applicationView: CoreApplicationView!) throws {
            try _default.Initialize(applicationView)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.core.iframeworkview.setwindow)
        fileprivate func setWindow(_ window: UWP.CoreWindow!) throws {
            try _default.SetWindow(window)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.core.iframeworkview.load)
        fileprivate func load(_ entryPoint: String) throws {
            try _default.Load(entryPoint)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.core.iframeworkview.run)
        fileprivate func run() throws {
            try _default.Run()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.core.iframeworkview.uninitialize)
        fileprivate func uninitialize() throws {
            try _default.Uninitialize()
        }

    }

    public enum IFrameworkViewSourceBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CApplicationModel_CCore_CIFrameworkViewSource
        public typealias SwiftABI = __ABI_Windows_ApplicationModel_Core.IFrameworkViewSource
        public typealias SwiftProjection = AnyIFrameworkViewSource
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IFrameworkViewSourceImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_ApplicationModel_Core.IFrameworkViewSourceVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IFrameworkViewSourceImpl: IFrameworkViewSource, WinRTAbiImpl {
        fileprivate typealias Bridge = IFrameworkViewSourceBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.applicationmodel.core.iframeworkviewsource.createview)
        fileprivate func createView() throws -> AnyIFrameworkView! {
            try _default.CreateView()
        }

    }

    public enum AppListEntryBridge: AbiBridge {
        public typealias SwiftProjection = AppListEntry
        public typealias CABI = __x_ABI_CWindows_CApplicationModel_CCore_CIAppListEntry
        public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CCore_CIAppListEntry>?) -> AppListEntry? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum CoreApplicationViewBridge: AbiBridge {
        public typealias SwiftProjection = CoreApplicationView
        public typealias CABI = __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationView
        public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationView>?) -> CoreApplicationView? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum CoreApplicationViewTitleBarBridge: AbiBridge {
        public typealias SwiftProjection = CoreApplicationViewTitleBar
        public typealias CABI = __x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationViewTitleBar
        public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CCore_CICoreApplicationViewTitleBar>?) -> CoreApplicationViewTitleBar? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum HostedViewClosingEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = HostedViewClosingEventArgs
        public typealias CABI = __x_ABI_CWindows_CApplicationModel_CCore_CIHostedViewClosingEventArgs
        public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CCore_CIHostedViewClosingEventArgs>?) -> HostedViewClosingEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum UnhandledErrorBridge: AbiBridge {
        public typealias SwiftProjection = UnhandledError
        public typealias CABI = __x_ABI_CWindows_CApplicationModel_CCore_CIUnhandledError
        public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CCore_CIUnhandledError>?) -> UnhandledError? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum UnhandledErrorDetectedEventArgsBridge: AbiBridge {
        public typealias SwiftProjection = UnhandledErrorDetectedEventArgs
        public typealias CABI = __x_ABI_CWindows_CApplicationModel_CCore_CIUnhandledErrorDetectedEventArgs
        public static func from(abi: ComPtr<__x_ABI_CWindows_CApplicationModel_CCore_CIUnhandledErrorDetectedEventArgs>?) -> UnhandledErrorDetectedEventArgs? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class ICoreApplicationUnhandledErrorMaker: MakeFromAbi {
    public typealias SwiftType = AnyICoreApplicationUnhandledError
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_ApplicationModel_Core.ICoreApplicationUnhandledError = try! abi.QueryInterface()
        return __IMPL_Windows_ApplicationModel_Core.ICoreApplicationUnhandledErrorBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class IFrameworkViewMaker: MakeFromAbi {
    public typealias SwiftType = AnyIFrameworkView
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_ApplicationModel_Core.IFrameworkView = try! abi.QueryInterface()
        return __IMPL_Windows_ApplicationModel_Core.IFrameworkViewBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class IFrameworkViewSourceMaker: MakeFromAbi {
    public typealias SwiftType = AnyIFrameworkViewSource
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_ApplicationModel_Core.IFrameworkViewSource = try! abi.QueryInterface()
        return __IMPL_Windows_ApplicationModel_Core.IFrameworkViewSourceBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class AppListEntryMaker: MakeFromAbi {
    public typealias SwiftType = AppListEntry
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return AppListEntry(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class CoreApplicationViewMaker: MakeFromAbi {
    public typealias SwiftType = CoreApplicationView
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return CoreApplicationView(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class CoreApplicationViewTitleBarMaker: MakeFromAbi {
    public typealias SwiftType = CoreApplicationViewTitleBar
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return CoreApplicationViewTitleBar(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class HostedViewClosingEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = HostedViewClosingEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return HostedViewClosingEventArgs(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class UnhandledErrorMaker: MakeFromAbi {
    public typealias SwiftType = UnhandledError
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return UnhandledError(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class UnhandledErrorDetectedEventArgsMaker: MakeFromAbi {
    public typealias SwiftType = UnhandledErrorDetectedEventArgs
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return UnhandledErrorDetectedEventArgs(fromAbi: abi)
    }
}
