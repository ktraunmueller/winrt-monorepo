// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.coreacceleratorkeyeventtype)
public typealias CoreAcceleratorKeyEventType = __x_ABI_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corecursortype)
public typealias CoreCursorType = __x_ABI_CWindows_CUI_CCore_CCoreCursorType
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.coredispatcherpriority)
public typealias CoreDispatcherPriority = __x_ABI_CWindows_CUI_CCore_CCoreDispatcherPriority
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.coreprocesseventsoption)
public typealias CoreProcessEventsOption = __x_ABI_CWindows_CUI_CCore_CCoreProcessEventsOption
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corevirtualkeystates)
public typealias CoreVirtualKeyStates = __x_ABI_CWindows_CUI_CCore_CCoreVirtualKeyStates
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindowactivationmode)
public typealias CoreWindowActivationMode = __x_ABI_CWindows_CUI_CCore_CCoreWindowActivationMode
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindowactivationstate)
public typealias CoreWindowActivationState = __x_ABI_CWindows_CUI_CCore_CCoreWindowActivationState
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindowflowdirection)
public typealias CoreWindowFlowDirection = __x_ABI_CWindows_CUI_CCore_CCoreWindowFlowDirection
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.acceleratorkeyeventargs)
public final class AcceleratorKeyEventArgs : WinRTClass, ICoreWindowEventArgs {
    private typealias SwiftABI = __ABI_Windows_UI_Core.IAcceleratorKeyEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CCore_CIAcceleratorKeyEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _ICoreWindowEventArgs: __ABI_Windows_UI_Core.ICoreWindowEventArgs! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.acceleratorkeyeventargs.handled)
    public var handled : Bool {
        get { try! _ICoreWindowEventArgs.get_Handled() }
        set { try! _ICoreWindowEventArgs.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.acceleratorkeyeventargs.eventtype)
    public var eventType : CoreAcceleratorKeyEventType {
        get { try! _default.get_EventType() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.acceleratorkeyeventargs.keystatus)
    public var keyStatus : CorePhysicalKeyStatus {
        get { try! _default.get_KeyStatus() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.acceleratorkeyeventargs.virtualkey)
    public var virtualKey : UWP.VirtualKey {
        get { try! _default.get_VirtualKey() }
    }

    private lazy var _IAcceleratorKeyEventArgs2: __ABI_Windows_UI_Core.IAcceleratorKeyEventArgs2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.acceleratorkeyeventargs.deviceid)
    public var deviceId : String {
        get { try! _IAcceleratorKeyEventArgs2.get_DeviceId() }
    }

    deinit {
        _ICoreWindowEventArgs = nil
        _default = nil
        _IAcceleratorKeyEventArgs2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.automationproviderrequestedeventargs)
public final class AutomationProviderRequestedEventArgs : WinRTClass, ICoreWindowEventArgs {
    private typealias SwiftABI = __ABI_Windows_UI_Core.IAutomationProviderRequestedEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CCore_CIAutomationProviderRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _ICoreWindowEventArgs: __ABI_Windows_UI_Core.ICoreWindowEventArgs! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.automationproviderrequestedeventargs.handled)
    public var handled : Bool {
        get { try! _ICoreWindowEventArgs.get_Handled() }
        set { try! _ICoreWindowEventArgs.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.automationproviderrequestedeventargs.automationprovider)
    public var automationProvider : Any! {
        get { try! _default.get_AutomationProvider() }
        set { try! _default.put_AutomationProvider(newValue) }
    }

    deinit {
        _ICoreWindowEventArgs = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.characterreceivedeventargs)
public final class CharacterReceivedEventArgs : WinRTClass, ICoreWindowEventArgs {
    private typealias SwiftABI = __ABI_Windows_UI_Core.ICharacterReceivedEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CCore_CICharacterReceivedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _ICoreWindowEventArgs: __ABI_Windows_UI_Core.ICoreWindowEventArgs! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.characterreceivedeventargs.handled)
    public var handled : Bool {
        get { try! _ICoreWindowEventArgs.get_Handled() }
        set { try! _ICoreWindowEventArgs.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.characterreceivedeventargs.keycode)
    public var keyCode : UInt32 {
        get { try! _default.get_KeyCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.characterreceivedeventargs.keystatus)
    public var keyStatus : CorePhysicalKeyStatus {
        get { try! _default.get_KeyStatus() }
    }

    deinit {
        _ICoreWindowEventArgs = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.closestinteractiveboundsrequestedeventargs)
public final class ClosestInteractiveBoundsRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Core.IClosestInteractiveBoundsRequestedEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CCore_CIClosestInteractiveBoundsRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.closestinteractiveboundsrequestedeventargs.closestinteractivebounds)
    public var closestInteractiveBounds : WindowsFoundation.Rect {
        get { try! _default.get_ClosestInteractiveBounds() }
        set { try! _default.put_ClosestInteractiveBounds(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.closestinteractiveboundsrequestedeventargs.pointerposition)
    public var pointerPosition : WindowsFoundation.Point {
        get { try! _default.get_PointerPosition() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.closestinteractiveboundsrequestedeventargs.searchbounds)
    public var searchBounds : WindowsFoundation.Rect {
        get { try! _default.get_SearchBounds() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corecursor)
public final class CoreCursor : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Core.ICoreCursor
    private typealias CABI = __x_ABI_CWindows_CUI_CCore_CICoreCursor
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _ICoreCursorFactory: __ABI_Windows_UI_Core.ICoreCursorFactory = try! RoGetActivationFactory("Windows.UI.Core.CoreCursor")
    public init(_ type: CoreCursorType, _ id: UInt32) {
        super.init(try! Self._ICoreCursorFactory.CreateCursor(type, id))
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corecursor.id)
    public var id : UInt32 {
        get { try! _default.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corecursor.type)
    public var type : CoreCursorType {
        get { try! _default.get_Type() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.coredispatcher)
public final class CoreDispatcher : WinRTClass, ICoreAcceleratorKeys {
    private typealias SwiftABI = __ABI_Windows_UI_Core.ICoreDispatcher
    private typealias CABI = __x_ABI_CWindows_CUI_CCore_CICoreDispatcher
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _ICoreAcceleratorKeys: __ABI_Windows_UI_Core.ICoreAcceleratorKeys! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.coredispatcher.acceleratorkeyactivated)
    public lazy var acceleratorKeyActivated : Event<TypedEventHandler<CoreDispatcher?, AcceleratorKeyEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreAcceleratorKeys else { return .init() }
          return try! this.add_AcceleratorKeyActivated($0)
        },
        remove: { [weak self] in
         try? self?._ICoreAcceleratorKeys.remove_AcceleratorKeyActivated($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.coredispatcher.processevents)
    public func processEvents(_ options: CoreProcessEventsOption) throws {
        try _default.ProcessEvents(options)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.coredispatcher.runasync)
    public func runAsync(_ priority: CoreDispatcherPriority, _ agileCallback: DispatchedHandler!) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.RunAsync(priority, agileCallback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.coredispatcher.runidleasync)
    public func runIdleAsync(_ agileCallback: IdleDispatchedHandler!) throws -> WindowsFoundation.AnyIAsyncAction! {
        try _default.RunIdleAsync(agileCallback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.coredispatcher.hasthreadaccess)
    public var hasThreadAccess : Bool {
        get { try! _default.get_HasThreadAccess() }
    }

    private lazy var _ICoreDispatcherWithTaskPriority: __ABI_Windows_UI_Core.ICoreDispatcherWithTaskPriority! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.coredispatcher.shouldyield)
    public func shouldYield() throws -> Bool {
        try _ICoreDispatcherWithTaskPriority.ShouldYield()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.coredispatcher.shouldyield)
    public func shouldYield(_ priority: CoreDispatcherPriority) throws -> Bool {
        try _ICoreDispatcherWithTaskPriority.ShouldYieldToPriority(priority)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.coredispatcher.stopprocessevents)
    public func stopProcessEvents() throws {
        try _ICoreDispatcherWithTaskPriority.StopProcessEvents()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.coredispatcher.currentpriority)
    public var currentPriority : CoreDispatcherPriority {
        get { try! _ICoreDispatcherWithTaskPriority.get_CurrentPriority() }
        set { try! _ICoreDispatcherWithTaskPriority.put_CurrentPriority(newValue) }
    }

    private lazy var _ICoreDispatcher2: __ABI_Windows_UI_Core.ICoreDispatcher2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.coredispatcher.tryrunasync)
    public func tryRunAsync(_ priority: CoreDispatcherPriority, _ agileCallback: DispatchedHandler!) throws -> WindowsFoundation.AnyIAsyncOperation<Bool>! {
        try _ICoreDispatcher2.TryRunAsync(priority, agileCallback)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.coredispatcher.tryrunidleasync)
    public func tryRunIdleAsync(_ agileCallback: IdleDispatchedHandler!) throws -> WindowsFoundation.AnyIAsyncOperation<Bool>! {
        try _ICoreDispatcher2.TryRunIdleAsync(agileCallback)
    }

    deinit {
        _ICoreAcceleratorKeys = nil
        _default = nil
        _ICoreDispatcherWithTaskPriority = nil
        _ICoreDispatcher2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow)
public final class CoreWindow : WinRTClass, ICoreWindow, ICorePointerRedirector {
    private typealias SwiftABI = __ABI_Windows_UI_Core.ICoreWindow
    private typealias CABI = __x_ABI_CWindows_CUI_CCore_CICoreWindow
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private static let _ICoreWindowStatic: __ABI_Windows_UI_Core.ICoreWindowStatic = try! RoGetActivationFactory("Windows.UI.Core.CoreWindow")
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.getforcurrentthread)
    public static func getForCurrentThread() throws -> CoreWindow! {
        return try _ICoreWindowStatic.GetForCurrentThread()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.activate)
    public func activate() throws {
        try _default.Activate()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.close)
    public func close() throws {
        try _default.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.getasynckeystate)
    public func getAsyncKeyState(_ virtualKey: UWP.VirtualKey) throws -> CoreVirtualKeyStates {
        try _default.GetAsyncKeyState(virtualKey)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.getkeystate)
    public func getKeyState(_ virtualKey: UWP.VirtualKey) throws -> CoreVirtualKeyStates {
        try _default.GetKeyState(virtualKey)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.releasepointercapture)
    public func releasePointerCapture() throws {
        try _default.ReleasePointerCapture()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.setpointercapture)
    public func setPointerCapture() throws {
        try _default.SetPointerCapture()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.automationhostprovider)
    public var automationHostProvider : Any! {
        get { try! _default.get_AutomationHostProvider() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.bounds)
    public var bounds : WindowsFoundation.Rect {
        get { try! _default.get_Bounds() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.customproperties)
    public var customProperties : WindowsFoundation.AnyIPropertySet! {
        get { try! _default.get_CustomProperties() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.dispatcher)
    public var dispatcher : CoreDispatcher! {
        get { try! _default.get_Dispatcher() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.flowdirection)
    public var flowDirection : CoreWindowFlowDirection {
        get { try! _default.get_FlowDirection() }
        set { try! _default.put_FlowDirection(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.isinputenabled)
    public var isInputEnabled : Bool {
        get { try! _default.get_IsInputEnabled() }
        set { try! _default.put_IsInputEnabled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.pointercursor)
    public var pointerCursor : CoreCursor! {
        get { try! _default.get_PointerCursor() }
        set { try! _default.put_PointerCursor(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.pointerposition)
    public var pointerPosition : WindowsFoundation.Point {
        get { try! _default.get_PointerPosition() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.visible)
    public var visible : Bool {
        get { try! _default.get_Visible() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.activated)
    public lazy var activated : Event<TypedEventHandler<CoreWindow?, WindowActivatedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Activated($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Activated($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.automationproviderrequested)
    public lazy var automationProviderRequested : Event<TypedEventHandler<CoreWindow?, AutomationProviderRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_AutomationProviderRequested($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_AutomationProviderRequested($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.characterreceived)
    public lazy var characterReceived : Event<TypedEventHandler<CoreWindow?, CharacterReceivedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CharacterReceived($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CharacterReceived($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.closed)
    public lazy var closed : Event<TypedEventHandler<CoreWindow?, CoreWindowEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_Closed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_Closed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.inputenabled)
    public lazy var inputEnabled : Event<TypedEventHandler<CoreWindow?, InputEnabledEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_InputEnabled($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_InputEnabled($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.keydown)
    public lazy var keyDown : Event<TypedEventHandler<CoreWindow?, KeyEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_KeyDown($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_KeyDown($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.keyup)
    public lazy var keyUp : Event<TypedEventHandler<CoreWindow?, KeyEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_KeyUp($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_KeyUp($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.pointercapturelost)
    public lazy var pointerCaptureLost : Event<TypedEventHandler<CoreWindow?, PointerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerCaptureLost($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerCaptureLost($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.pointerentered)
    public lazy var pointerEntered : Event<TypedEventHandler<CoreWindow?, PointerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerEntered($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerEntered($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.pointerexited)
    public lazy var pointerExited : Event<TypedEventHandler<CoreWindow?, PointerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerExited($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerExited($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.pointermoved)
    public lazy var pointerMoved : Event<TypedEventHandler<CoreWindow?, PointerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerMoved($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerMoved($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.pointerpressed)
    public lazy var pointerPressed : Event<TypedEventHandler<CoreWindow?, PointerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerPressed($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerPressed($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.pointerreleased)
    public lazy var pointerReleased : Event<TypedEventHandler<CoreWindow?, PointerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerReleased($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerReleased($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.pointerwheelchanged)
    public lazy var pointerWheelChanged : Event<TypedEventHandler<CoreWindow?, PointerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_PointerWheelChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_PointerWheelChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.sizechanged)
    public lazy var sizeChanged : Event<TypedEventHandler<CoreWindow?, WindowSizeChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SizeChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SizeChanged($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.touchhittesting)
    public lazy var touchHitTesting : Event<TypedEventHandler<CoreWindow?, TouchHitTestingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TouchHitTesting($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TouchHitTesting($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.visibilitychanged)
    public lazy var visibilityChanged : Event<TypedEventHandler<CoreWindow?, VisibilityChangedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_VisibilityChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_VisibilityChanged($0)
       }
      )
    }()

    private lazy var _ICoreWindow2: __ABI_Windows_UI_Core.ICoreWindow2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.pointerposition)
    private lazy var _ICorePointerRedirector: __ABI_Windows_UI_Core.ICorePointerRedirector! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.pointerroutedaway)
    public lazy var pointerRoutedAway : Event<TypedEventHandler<ICorePointerRedirector?, PointerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICorePointerRedirector else { return .init() }
          return try! this.add_PointerRoutedAway($0)
        },
        remove: { [weak self] in
         try? self?._ICorePointerRedirector.remove_PointerRoutedAway($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.pointerroutedreleased)
    public lazy var pointerRoutedReleased : Event<TypedEventHandler<ICorePointerRedirector?, PointerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICorePointerRedirector else { return .init() }
          return try! this.add_PointerRoutedReleased($0)
        },
        remove: { [weak self] in
         try? self?._ICorePointerRedirector.remove_PointerRoutedReleased($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.pointerroutedto)
    public lazy var pointerRoutedTo : Event<TypedEventHandler<ICorePointerRedirector?, PointerEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICorePointerRedirector else { return .init() }
          return try! this.add_PointerRoutedTo($0)
        },
        remove: { [weak self] in
         try? self?._ICorePointerRedirector.remove_PointerRoutedTo($0)
       }
      )
    }()

    private lazy var _ICoreWindow3: __ABI_Windows_UI_Core.ICoreWindow3! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.getcurrentkeyeventdeviceid)
    public func getCurrentKeyEventDeviceId() throws -> String {
        try _ICoreWindow3.GetCurrentKeyEventDeviceId()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.closestinteractiveboundsrequested)
    public lazy var closestInteractiveBoundsRequested : Event<TypedEventHandler<CoreWindow?, ClosestInteractiveBoundsRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreWindow3 else { return .init() }
          return try! this.add_ClosestInteractiveBoundsRequested($0)
        },
        remove: { [weak self] in
         try? self?._ICoreWindow3.remove_ClosestInteractiveBoundsRequested($0)
       }
      )
    }()

    private lazy var _ICoreWindow4: __ABI_Windows_UI_Core.ICoreWindow4! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.resizecompleted)
    public lazy var resizeCompleted : Event<TypedEventHandler<CoreWindow?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreWindow4 else { return .init() }
          return try! this.add_ResizeCompleted($0)
        },
        remove: { [weak self] in
         try? self?._ICoreWindow4.remove_ResizeCompleted($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.resizestarted)
    public lazy var resizeStarted : Event<TypedEventHandler<CoreWindow?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreWindow4 else { return .init() }
          return try! this.add_ResizeStarted($0)
        },
        remove: { [weak self] in
         try? self?._ICoreWindow4.remove_ResizeStarted($0)
       }
      )
    }()

    private lazy var _ICoreWindow5: __ABI_Windows_UI_Core.ICoreWindow5! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.activationmode)
    public var activationMode : CoreWindowActivationMode {
        get { try! _ICoreWindow5.get_ActivationMode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.dispatcherqueue)
    public var dispatcherQueue : UWP.DispatcherQueue! {
        get { try! _ICoreWindow5.get_DispatcherQueue() }
    }

    private lazy var _ICoreWindowWithContext: __ABI_Windows_UI_Core.ICoreWindowWithContext! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindow.uicontext)
    public var uiContext : UWP.UIContext! {
        get { try! _ICoreWindowWithContext.get_UIContext() }
    }

    deinit {
        _default = nil
        _ICoreWindow2 = nil
        _ICorePointerRedirector = nil
        _ICoreWindow3 = nil
        _ICoreWindow4 = nil
        _ICoreWindow5 = nil
        _ICoreWindowWithContext = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindoweventargs)
public final class CoreWindowEventArgs : WinRTClass, ICoreWindowEventArgs {
    private typealias SwiftABI = __ABI_Windows_UI_Core.ICoreWindowEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CCore_CICoreWindowEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corewindoweventargs.handled)
    public var handled : Bool {
        get { try! _default.get_Handled() }
        set { try! _default.put_Handled(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.idledispatchedhandlerargs)
public final class IdleDispatchedHandlerArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Core.IIdleDispatchedHandlerArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CCore_CIIdleDispatchedHandlerArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.idledispatchedhandlerargs.isdispatcheridle)
    public var isDispatcherIdle : Bool {
        get { try! _default.get_IsDispatcherIdle() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.inputenabledeventargs)
public final class InputEnabledEventArgs : WinRTClass, ICoreWindowEventArgs {
    private typealias SwiftABI = __ABI_Windows_UI_Core.IInputEnabledEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CCore_CIInputEnabledEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _ICoreWindowEventArgs: __ABI_Windows_UI_Core.ICoreWindowEventArgs! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.inputenabledeventargs.handled)
    public var handled : Bool {
        get { try! _ICoreWindowEventArgs.get_Handled() }
        set { try! _ICoreWindowEventArgs.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.inputenabledeventargs.inputenabled)
    public var inputEnabled : Bool {
        get { try! _default.get_InputEnabled() }
    }

    deinit {
        _ICoreWindowEventArgs = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.keyeventargs)
public final class KeyEventArgs : WinRTClass, ICoreWindowEventArgs {
    private typealias SwiftABI = __ABI_Windows_UI_Core.IKeyEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CCore_CIKeyEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _ICoreWindowEventArgs: __ABI_Windows_UI_Core.ICoreWindowEventArgs! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.keyeventargs.handled)
    public var handled : Bool {
        get { try! _ICoreWindowEventArgs.get_Handled() }
        set { try! _ICoreWindowEventArgs.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.keyeventargs.keystatus)
    public var keyStatus : CorePhysicalKeyStatus {
        get { try! _default.get_KeyStatus() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.keyeventargs.virtualkey)
    public var virtualKey : UWP.VirtualKey {
        get { try! _default.get_VirtualKey() }
    }

    private lazy var _IKeyEventArgs2: __ABI_Windows_UI_Core.IKeyEventArgs2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.keyeventargs.deviceid)
    public var deviceId : String {
        get { try! _IKeyEventArgs2.get_DeviceId() }
    }

    deinit {
        _ICoreWindowEventArgs = nil
        _default = nil
        _IKeyEventArgs2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.pointereventargs)
public final class PointerEventArgs : WinRTClass, ICoreWindowEventArgs {
    private typealias SwiftABI = __ABI_Windows_UI_Core.IPointerEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CCore_CIPointerEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _ICoreWindowEventArgs: __ABI_Windows_UI_Core.ICoreWindowEventArgs! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.pointereventargs.handled)
    public var handled : Bool {
        get { try! _ICoreWindowEventArgs.get_Handled() }
        set { try! _ICoreWindowEventArgs.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.pointereventargs.getintermediatepoints)
    public func getIntermediatePoints() throws -> WindowsFoundation.AnyIVector<UWP.PointerPoint?>! {
        try _default.GetIntermediatePoints()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.pointereventargs.currentpoint)
    public var currentPoint : UWP.PointerPoint! {
        get { try! _default.get_CurrentPoint() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.pointereventargs.keymodifiers)
    public var keyModifiers : UWP.VirtualKeyModifiers {
        get { try! _default.get_KeyModifiers() }
    }

    deinit {
        _ICoreWindowEventArgs = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.touchhittestingeventargs)
public final class TouchHitTestingEventArgs : WinRTClass, ICoreWindowEventArgs {
    private typealias SwiftABI = __ABI_Windows_UI_Core.ITouchHitTestingEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CCore_CITouchHitTestingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _ICoreWindowEventArgs: __ABI_Windows_UI_Core.ICoreWindowEventArgs! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.touchhittestingeventargs.handled)
    public var handled : Bool {
        get { try! _ICoreWindowEventArgs.get_Handled() }
        set { try! _ICoreWindowEventArgs.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.touchhittestingeventargs.evaluateproximity)
    public func evaluateProximity(_ controlBoundingBox: WindowsFoundation.Rect) throws -> CoreProximityEvaluation {
        try _default.EvaluateProximityToRect(controlBoundingBox)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.touchhittestingeventargs.evaluateproximity)
    public func evaluateProximity(_ controlVertices: [WindowsFoundation.Point]) throws -> CoreProximityEvaluation {
        try _default.EvaluateProximityToPolygon(controlVertices)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.touchhittestingeventargs.boundingbox)
    public var boundingBox : WindowsFoundation.Rect {
        get { try! _default.get_BoundingBox() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.touchhittestingeventargs.point)
    public var point : WindowsFoundation.Point {
        get { try! _default.get_Point() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.touchhittestingeventargs.proximityevaluation)
    public var proximityEvaluation : CoreProximityEvaluation {
        get { try! _default.get_ProximityEvaluation() }
        set { try! _default.put_ProximityEvaluation(newValue) }
    }

    deinit {
        _ICoreWindowEventArgs = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.visibilitychangedeventargs)
public final class VisibilityChangedEventArgs : WinRTClass, ICoreWindowEventArgs {
    private typealias SwiftABI = __ABI_Windows_UI_Core.IVisibilityChangedEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CCore_CIVisibilityChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _ICoreWindowEventArgs: __ABI_Windows_UI_Core.ICoreWindowEventArgs! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.visibilitychangedeventargs.handled)
    public var handled : Bool {
        get { try! _ICoreWindowEventArgs.get_Handled() }
        set { try! _ICoreWindowEventArgs.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.visibilitychangedeventargs.visible)
    public var visible : Bool {
        get { try! _default.get_Visible() }
    }

    deinit {
        _ICoreWindowEventArgs = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.windowactivatedeventargs)
public final class WindowActivatedEventArgs : WinRTClass, ICoreWindowEventArgs {
    private typealias SwiftABI = __ABI_Windows_UI_Core.IWindowActivatedEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CCore_CIWindowActivatedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _ICoreWindowEventArgs: __ABI_Windows_UI_Core.ICoreWindowEventArgs! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.windowactivatedeventargs.handled)
    public var handled : Bool {
        get { try! _ICoreWindowEventArgs.get_Handled() }
        set { try! _ICoreWindowEventArgs.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.windowactivatedeventargs.windowactivationstate)
    public var windowActivationState : CoreWindowActivationState {
        get { try! _default.get_WindowActivationState() }
    }

    deinit {
        _ICoreWindowEventArgs = nil
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.windowsizechangedeventargs)
public final class WindowSizeChangedEventArgs : WinRTClass, ICoreWindowEventArgs {
    private typealias SwiftABI = __ABI_Windows_UI_Core.IWindowSizeChangedEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CCore_CIWindowSizeChangedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    override public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        return super.queryInterface(iid)
    }
    private lazy var _ICoreWindowEventArgs: __ABI_Windows_UI_Core.ICoreWindowEventArgs! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.windowsizechangedeventargs.handled)
    public var handled : Bool {
        get { try! _ICoreWindowEventArgs.get_Handled() }
        set { try! _ICoreWindowEventArgs.put_Handled(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.windowsizechangedeventargs.size)
    public var size : WindowsFoundation.Size {
        get { try! _default.get_Size() }
    }

    deinit {
        _ICoreWindowEventArgs = nil
        _default = nil
    }
}

public typealias DispatchedHandler = () throws -> ()
public typealias IdleDispatchedHandler = (IdleDispatchedHandlerArgs?) throws -> ()
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corephysicalkeystatus)
public struct CorePhysicalKeyStatus: Hashable, Codable, Sendable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corephysicalkeystatus.repeatcount)
    public var repeatCount: UInt32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corephysicalkeystatus.scancode)
    public var scanCode: UInt32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corephysicalkeystatus.isextendedkey)
    public var isExtendedKey: Bool = false
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corephysicalkeystatus.ismenukeydown)
    public var isMenuKeyDown: Bool = false
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corephysicalkeystatus.waskeydown)
    public var wasKeyDown: Bool = false
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.corephysicalkeystatus.iskeyreleased)
    public var isKeyReleased: Bool = false
    public init() {}
    public init(repeatCount: UInt32, scanCode: UInt32, isExtendedKey: Bool, isMenuKeyDown: Bool, wasKeyDown: Bool, isKeyReleased: Bool) {
        self.repeatCount = repeatCount
        self.scanCode = scanCode
        self.isExtendedKey = isExtendedKey
        self.isMenuKeyDown = isMenuKeyDown
        self.wasKeyDown = wasKeyDown
        self.isKeyReleased = isKeyReleased
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.coreproximityevaluation)
public struct CoreProximityEvaluation: Hashable, Codable, Sendable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.coreproximityevaluation.score)
    public var score: Int32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.coreproximityevaluation.adjustedpoint)
    public var adjustedPoint: WindowsFoundation.Point = .init()
    public init() {}
    public init(score: Int32, adjustedPoint: WindowsFoundation.Point) {
        self.score = score
        self.adjustedPoint = adjustedPoint
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icoreacceleratorkeys)
public protocol ICoreAcceleratorKeys : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icoreacceleratorkeys.acceleratorkeyactivated)
    var acceleratorKeyActivated: Event<TypedEventHandler<CoreDispatcher?, AcceleratorKeyEventArgs?>> { get }
}

extension ICoreAcceleratorKeys {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_UI_Core.ICoreAcceleratorKeysWrapper.IID:
                let wrapper = __ABI_Windows_UI_Core.ICoreAcceleratorKeysWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyICoreAcceleratorKeys = any ICoreAcceleratorKeys

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorepointerredirector)
public protocol ICorePointerRedirector : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorepointerredirector.pointerroutedaway)
    var pointerRoutedAway: Event<TypedEventHandler<ICorePointerRedirector?, PointerEventArgs?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorepointerredirector.pointerroutedreleased)
    var pointerRoutedReleased: Event<TypedEventHandler<ICorePointerRedirector?, PointerEventArgs?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorepointerredirector.pointerroutedto)
    var pointerRoutedTo: Event<TypedEventHandler<ICorePointerRedirector?, PointerEventArgs?>> { get }
}

extension ICorePointerRedirector {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_UI_Core.ICorePointerRedirectorWrapper.IID:
                let wrapper = __ABI_Windows_UI_Core.ICorePointerRedirectorWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyICorePointerRedirector = any ICorePointerRedirector

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow)
public protocol ICoreWindow : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.activate)
    func activate() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.close)
    func close() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.getasynckeystate)
    func getAsyncKeyState(_ virtualKey: UWP.VirtualKey) throws -> UWP.CoreVirtualKeyStates
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.getkeystate)
    func getKeyState(_ virtualKey: UWP.VirtualKey) throws -> UWP.CoreVirtualKeyStates
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.releasepointercapture)
    func releasePointerCapture() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.setpointercapture)
    func setPointerCapture() throws
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.automationhostprovider)
    var automationHostProvider: Any! { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.bounds)
    var bounds: WindowsFoundation.Rect { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.customproperties)
    var customProperties: WindowsFoundation.AnyIPropertySet! { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.dispatcher)
    var dispatcher: UWP.CoreDispatcher! { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.flowdirection)
    var flowDirection: UWP.CoreWindowFlowDirection { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.isinputenabled)
    var isInputEnabled: Bool { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.pointercursor)
    var pointerCursor: UWP.CoreCursor! { get set }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.pointerposition)
    var pointerPosition: WindowsFoundation.Point { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.visible)
    var visible: Bool { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.activated)
    var activated: Event<TypedEventHandler<CoreWindow?, WindowActivatedEventArgs?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.automationproviderrequested)
    var automationProviderRequested: Event<TypedEventHandler<CoreWindow?, AutomationProviderRequestedEventArgs?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.characterreceived)
    var characterReceived: Event<TypedEventHandler<CoreWindow?, CharacterReceivedEventArgs?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.closed)
    var closed: Event<TypedEventHandler<CoreWindow?, CoreWindowEventArgs?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.inputenabled)
    var inputEnabled: Event<TypedEventHandler<CoreWindow?, InputEnabledEventArgs?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.keydown)
    var keyDown: Event<TypedEventHandler<CoreWindow?, KeyEventArgs?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.keyup)
    var keyUp: Event<TypedEventHandler<CoreWindow?, KeyEventArgs?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.pointercapturelost)
    var pointerCaptureLost: Event<TypedEventHandler<CoreWindow?, PointerEventArgs?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.pointerentered)
    var pointerEntered: Event<TypedEventHandler<CoreWindow?, PointerEventArgs?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.pointerexited)
    var pointerExited: Event<TypedEventHandler<CoreWindow?, PointerEventArgs?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.pointermoved)
    var pointerMoved: Event<TypedEventHandler<CoreWindow?, PointerEventArgs?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.pointerpressed)
    var pointerPressed: Event<TypedEventHandler<CoreWindow?, PointerEventArgs?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.pointerreleased)
    var pointerReleased: Event<TypedEventHandler<CoreWindow?, PointerEventArgs?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.pointerwheelchanged)
    var pointerWheelChanged: Event<TypedEventHandler<CoreWindow?, PointerEventArgs?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.sizechanged)
    var sizeChanged: Event<TypedEventHandler<CoreWindow?, WindowSizeChangedEventArgs?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.touchhittesting)
    var touchHitTesting: Event<TypedEventHandler<CoreWindow?, TouchHitTestingEventArgs?>> { get }
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindow.visibilitychanged)
    var visibilityChanged: Event<TypedEventHandler<CoreWindow?, VisibilityChangedEventArgs?>> { get }
}

extension ICoreWindow {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_UI_Core.ICoreWindowWrapper.IID:
                let wrapper = __ABI_Windows_UI_Core.ICoreWindowWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyICoreWindow = any ICoreWindow

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindoweventargs)
public protocol ICoreWindowEventArgs : WinRTInterface {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.core.icorewindoweventargs.handled)
    var handled: Bool { get set }
}

extension ICoreWindowEventArgs {
    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? {
        switch iid {
            case __ABI_Windows_UI_Core.ICoreWindowEventArgsWrapper.IID:
                let wrapper = __ABI_Windows_UI_Core.ICoreWindowEventArgsWrapper(self)
                return wrapper!.queryInterface(iid)
            default: return nil
        }
    }
}
public typealias AnyICoreWindowEventArgs = any ICoreWindowEventArgs

extension UWP.CoreAcceleratorKeyEventType {
    public static var character : UWP.CoreAcceleratorKeyEventType {
        __x_ABI_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType_Character
    }
    public static var deadCharacter : UWP.CoreAcceleratorKeyEventType {
        __x_ABI_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType_DeadCharacter
    }
    public static var keyDown : UWP.CoreAcceleratorKeyEventType {
        __x_ABI_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType_KeyDown
    }
    public static var keyUp : UWP.CoreAcceleratorKeyEventType {
        __x_ABI_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType_KeyUp
    }
    public static var systemCharacter : UWP.CoreAcceleratorKeyEventType {
        __x_ABI_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType_SystemCharacter
    }
    public static var systemDeadCharacter : UWP.CoreAcceleratorKeyEventType {
        __x_ABI_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType_SystemDeadCharacter
    }
    public static var systemKeyDown : UWP.CoreAcceleratorKeyEventType {
        __x_ABI_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType_SystemKeyDown
    }
    public static var systemKeyUp : UWP.CoreAcceleratorKeyEventType {
        __x_ABI_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType_SystemKeyUp
    }
    public static var unicodeCharacter : UWP.CoreAcceleratorKeyEventType {
        __x_ABI_CWindows_CUI_CCore_CCoreAcceleratorKeyEventType_UnicodeCharacter
    }
}
extension UWP.CoreAcceleratorKeyEventType: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension UWP.CoreCursorType {
    public static var arrow : UWP.CoreCursorType {
        __x_ABI_CWindows_CUI_CCore_CCoreCursorType_Arrow
    }
    public static var cross : UWP.CoreCursorType {
        __x_ABI_CWindows_CUI_CCore_CCoreCursorType_Cross
    }
    public static var custom : UWP.CoreCursorType {
        __x_ABI_CWindows_CUI_CCore_CCoreCursorType_Custom
    }
    public static var hand : UWP.CoreCursorType {
        __x_ABI_CWindows_CUI_CCore_CCoreCursorType_Hand
    }
    public static var help : UWP.CoreCursorType {
        __x_ABI_CWindows_CUI_CCore_CCoreCursorType_Help
    }
    public static var ibeam : UWP.CoreCursorType {
        __x_ABI_CWindows_CUI_CCore_CCoreCursorType_IBeam
    }
    public static var sizeAll : UWP.CoreCursorType {
        __x_ABI_CWindows_CUI_CCore_CCoreCursorType_SizeAll
    }
    public static var sizeNortheastSouthwest : UWP.CoreCursorType {
        __x_ABI_CWindows_CUI_CCore_CCoreCursorType_SizeNortheastSouthwest
    }
    public static var sizeNorthSouth : UWP.CoreCursorType {
        __x_ABI_CWindows_CUI_CCore_CCoreCursorType_SizeNorthSouth
    }
    public static var sizeNorthwestSoutheast : UWP.CoreCursorType {
        __x_ABI_CWindows_CUI_CCore_CCoreCursorType_SizeNorthwestSoutheast
    }
    public static var sizeWestEast : UWP.CoreCursorType {
        __x_ABI_CWindows_CUI_CCore_CCoreCursorType_SizeWestEast
    }
    public static var universalNo : UWP.CoreCursorType {
        __x_ABI_CWindows_CUI_CCore_CCoreCursorType_UniversalNo
    }
    public static var upArrow : UWP.CoreCursorType {
        __x_ABI_CWindows_CUI_CCore_CCoreCursorType_UpArrow
    }
    public static var wait : UWP.CoreCursorType {
        __x_ABI_CWindows_CUI_CCore_CCoreCursorType_Wait
    }
    public static var pin : UWP.CoreCursorType {
        __x_ABI_CWindows_CUI_CCore_CCoreCursorType_Pin
    }
    public static var person : UWP.CoreCursorType {
        __x_ABI_CWindows_CUI_CCore_CCoreCursorType_Person
    }
}
extension UWP.CoreCursorType: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension UWP.CoreDispatcherPriority {
    public static var idle : UWP.CoreDispatcherPriority {
        __x_ABI_CWindows_CUI_CCore_CCoreDispatcherPriority_Idle
    }
    public static var low : UWP.CoreDispatcherPriority {
        __x_ABI_CWindows_CUI_CCore_CCoreDispatcherPriority_Low
    }
    public static var normal : UWP.CoreDispatcherPriority {
        __x_ABI_CWindows_CUI_CCore_CCoreDispatcherPriority_Normal
    }
    public static var high : UWP.CoreDispatcherPriority {
        __x_ABI_CWindows_CUI_CCore_CCoreDispatcherPriority_High
    }
}
extension UWP.CoreDispatcherPriority: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension UWP.CoreProcessEventsOption {
    public static var processOneAndAllPending : UWP.CoreProcessEventsOption {
        __x_ABI_CWindows_CUI_CCore_CCoreProcessEventsOption_ProcessOneAndAllPending
    }
    public static var processOneIfPresent : UWP.CoreProcessEventsOption {
        __x_ABI_CWindows_CUI_CCore_CCoreProcessEventsOption_ProcessOneIfPresent
    }
    public static var processUntilQuit : UWP.CoreProcessEventsOption {
        __x_ABI_CWindows_CUI_CCore_CCoreProcessEventsOption_ProcessUntilQuit
    }
    public static var processAllIfPresent : UWP.CoreProcessEventsOption {
        __x_ABI_CWindows_CUI_CCore_CCoreProcessEventsOption_ProcessAllIfPresent
    }
}
extension UWP.CoreProcessEventsOption: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension UWP.CoreVirtualKeyStates {
    public static var none : UWP.CoreVirtualKeyStates {
        __x_ABI_CWindows_CUI_CCore_CCoreVirtualKeyStates_None
    }
    public static var down : UWP.CoreVirtualKeyStates {
        __x_ABI_CWindows_CUI_CCore_CCoreVirtualKeyStates_Down
    }
    public static var locked : UWP.CoreVirtualKeyStates {
        __x_ABI_CWindows_CUI_CCore_CCoreVirtualKeyStates_Locked
    }
}
extension UWP.CoreVirtualKeyStates: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension UWP.CoreWindowActivationMode {
    public static var none : UWP.CoreWindowActivationMode {
        __x_ABI_CWindows_CUI_CCore_CCoreWindowActivationMode_None
    }
    public static var deactivated : UWP.CoreWindowActivationMode {
        __x_ABI_CWindows_CUI_CCore_CCoreWindowActivationMode_Deactivated
    }
    public static var activatedNotForeground : UWP.CoreWindowActivationMode {
        __x_ABI_CWindows_CUI_CCore_CCoreWindowActivationMode_ActivatedNotForeground
    }
    public static var activatedInForeground : UWP.CoreWindowActivationMode {
        __x_ABI_CWindows_CUI_CCore_CCoreWindowActivationMode_ActivatedInForeground
    }
}
extension UWP.CoreWindowActivationMode: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension UWP.CoreWindowActivationState {
    public static var codeActivated : UWP.CoreWindowActivationState {
        __x_ABI_CWindows_CUI_CCore_CCoreWindowActivationState_CodeActivated
    }
    public static var deactivated : UWP.CoreWindowActivationState {
        __x_ABI_CWindows_CUI_CCore_CCoreWindowActivationState_Deactivated
    }
    public static var pointerActivated : UWP.CoreWindowActivationState {
        __x_ABI_CWindows_CUI_CCore_CCoreWindowActivationState_PointerActivated
    }
}
extension UWP.CoreWindowActivationState: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension UWP.CoreWindowFlowDirection {
    public static var leftToRight : UWP.CoreWindowFlowDirection {
        __x_ABI_CWindows_CUI_CCore_CCoreWindowFlowDirection_LeftToRight
    }
    public static var rightToLeft : UWP.CoreWindowFlowDirection {
        __x_ABI_CWindows_CUI_CCore_CCoreWindowFlowDirection_RightToLeft
    }
}
extension UWP.CoreWindowFlowDirection: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

