// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextformatupdatingreason)
public typealias CoreTextFormatUpdatingReason = __x_ABI_CWindows_CUI_CText_CCore_CCoreTextFormatUpdatingReason
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextformatupdatingresult)
public typealias CoreTextFormatUpdatingResult = __x_ABI_CWindows_CUI_CText_CCore_CCoreTextFormatUpdatingResult
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextinputpanedisplaypolicy)
public typealias CoreTextInputPaneDisplayPolicy = __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputPaneDisplayPolicy
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextinputscope)
public typealias CoreTextInputScope = __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextselectionupdatingresult)
public typealias CoreTextSelectionUpdatingResult = __x_ABI_CWindows_CUI_CText_CCore_CCoreTextSelectionUpdatingResult
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexttextupdatingresult)
public typealias CoreTextTextUpdatingResult = __x_ABI_CWindows_CUI_CText_CCore_CCoreTextTextUpdatingResult
/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextcompositioncompletedeventargs)
public final class CoreTextCompositionCompletedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Text_Core.ICoreTextCompositionCompletedEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CText_CCore_CICoreTextCompositionCompletedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextcompositioncompletedeventargs.getdeferral)
    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferral()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextcompositioncompletedeventargs.compositionsegments)
    public var compositionSegments : WindowsFoundation.AnyIVectorView<CoreTextCompositionSegment?>! {
        get { try! _default.get_CompositionSegments() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextcompositioncompletedeventargs.iscanceled)
    public var isCanceled : Bool {
        get { try! _default.get_IsCanceled() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextcompositionsegment)
public final class CoreTextCompositionSegment : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Text_Core.ICoreTextCompositionSegment
    private typealias CABI = __x_ABI_CWindows_CUI_CText_CCore_CICoreTextCompositionSegment
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextcompositionsegment.preconversionstring)
    public var preconversionString : String {
        get { try! _default.get_PreconversionString() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextcompositionsegment.range)
    public var range : CoreTextRange {
        get { try! _default.get_Range() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextcompositionstartedeventargs)
public final class CoreTextCompositionStartedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Text_Core.ICoreTextCompositionStartedEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CText_CCore_CICoreTextCompositionStartedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextcompositionstartedeventargs.getdeferral)
    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferral()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextcompositionstartedeventargs.iscanceled)
    public var isCanceled : Bool {
        get { try! _default.get_IsCanceled() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexteditcontext)
public final class CoreTextEditContext : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Text_Core.ICoreTextEditContext
    private typealias CABI = __x_ABI_CWindows_CUI_CText_CCore_CICoreTextEditContext
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexteditcontext.notifyfocusenter)
    public func notifyFocusEnter() throws {
        try _default.NotifyFocusEnter()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexteditcontext.notifyfocusleave)
    public func notifyFocusLeave() throws {
        try _default.NotifyFocusLeave()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexteditcontext.notifytextchanged)
    public func notifyTextChanged(_ modifiedRange: CoreTextRange, _ newLength: Int32, _ newSelection: CoreTextRange) throws {
        try _default.NotifyTextChanged(modifiedRange, newLength, newSelection)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexteditcontext.notifyselectionchanged)
    public func notifySelectionChanged(_ selection: CoreTextRange) throws {
        try _default.NotifySelectionChanged(selection)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexteditcontext.notifylayoutchanged)
    public func notifyLayoutChanged() throws {
        try _default.NotifyLayoutChanged()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexteditcontext.inputpanedisplaypolicy)
    public var inputPaneDisplayPolicy : CoreTextInputPaneDisplayPolicy {
        get { try! _default.get_InputPaneDisplayPolicy() }
        set { try! _default.put_InputPaneDisplayPolicy(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexteditcontext.inputscope)
    public var inputScope : CoreTextInputScope {
        get { try! _default.get_InputScope() }
        set { try! _default.put_InputScope(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexteditcontext.isreadonly)
    public var isReadOnly : Bool {
        get { try! _default.get_IsReadOnly() }
        set { try! _default.put_IsReadOnly(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexteditcontext.name)
    public var name : String {
        get { try! _default.get_Name() }
        set { try! _default.put_Name(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexteditcontext.compositioncompleted)
    public lazy var compositionCompleted : Event<TypedEventHandler<CoreTextEditContext?, CoreTextCompositionCompletedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CompositionCompleted($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CompositionCompleted($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexteditcontext.compositionstarted)
    public lazy var compositionStarted : Event<TypedEventHandler<CoreTextEditContext?, CoreTextCompositionStartedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_CompositionStarted($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_CompositionStarted($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexteditcontext.focusremoved)
    public lazy var focusRemoved : Event<TypedEventHandler<CoreTextEditContext?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_FocusRemoved($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_FocusRemoved($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexteditcontext.formatupdating)
    public lazy var formatUpdating : Event<TypedEventHandler<CoreTextEditContext?, CoreTextFormatUpdatingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_FormatUpdating($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_FormatUpdating($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexteditcontext.layoutrequested)
    public lazy var layoutRequested : Event<TypedEventHandler<CoreTextEditContext?, CoreTextLayoutRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_LayoutRequested($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_LayoutRequested($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexteditcontext.selectionrequested)
    public lazy var selectionRequested : Event<TypedEventHandler<CoreTextEditContext?, CoreTextSelectionRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SelectionRequested($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SelectionRequested($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexteditcontext.selectionupdating)
    public lazy var selectionUpdating : Event<TypedEventHandler<CoreTextEditContext?, CoreTextSelectionUpdatingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_SelectionUpdating($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_SelectionUpdating($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexteditcontext.textrequested)
    public lazy var textRequested : Event<TypedEventHandler<CoreTextEditContext?, CoreTextTextRequestedEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TextRequested($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TextRequested($0)
       }
      )
    }()

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexteditcontext.textupdating)
    public lazy var textUpdating : Event<TypedEventHandler<CoreTextEditContext?, CoreTextTextUpdatingEventArgs?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_TextUpdating($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_TextUpdating($0)
       }
      )
    }()

    private lazy var _ICoreTextEditContext2: __ABI_Windows_UI_Text_Core.ICoreTextEditContext2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexteditcontext.notifyfocusleavecompleted)
    public lazy var notifyFocusLeaveCompleted : Event<TypedEventHandler<CoreTextEditContext?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._ICoreTextEditContext2 else { return .init() }
          return try! this.add_NotifyFocusLeaveCompleted($0)
        },
        remove: { [weak self] in
         try? self?._ICoreTextEditContext2.remove_NotifyFocusLeaveCompleted($0)
       }
      )
    }()

    deinit {
        _default = nil
        _ICoreTextEditContext2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextformatupdatingeventargs)
public final class CoreTextFormatUpdatingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Text_Core.ICoreTextFormatUpdatingEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CText_CCore_CICoreTextFormatUpdatingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextformatupdatingeventargs.getdeferral)
    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferral()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextformatupdatingeventargs.backgroundcolor)
    public var backgroundColor : UWP.UIElementType? {
        get { try! _default.get_BackgroundColor() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextformatupdatingeventargs.iscanceled)
    public var isCanceled : Bool {
        get { try! _default.get_IsCanceled() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextformatupdatingeventargs.range)
    public var range : CoreTextRange {
        get { try! _default.get_Range() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextformatupdatingeventargs.reason)
    public var reason : CoreTextFormatUpdatingReason {
        get { try! _default.get_Reason() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextformatupdatingeventargs.result)
    public var result : CoreTextFormatUpdatingResult {
        get { try! _default.get_Result() }
        set { try! _default.put_Result(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextformatupdatingeventargs.textcolor)
    public var textColor : UWP.UIElementType? {
        get { try! _default.get_TextColor() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextformatupdatingeventargs.underlinecolor)
    public var underlineColor : UWP.UIElementType? {
        get { try! _default.get_UnderlineColor() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextformatupdatingeventargs.underlinetype)
    public var underlineType : UWP.UnderlineType? {
        get { try! _default.get_UnderlineType() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextlayoutbounds)
public final class CoreTextLayoutBounds : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Text_Core.ICoreTextLayoutBounds
    private typealias CABI = __x_ABI_CWindows_CUI_CText_CCore_CICoreTextLayoutBounds
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextlayoutbounds.controlbounds)
    public var controlBounds : WindowsFoundation.Rect {
        get { try! _default.get_ControlBounds() }
        set { try! _default.put_ControlBounds(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextlayoutbounds.textbounds)
    public var textBounds : WindowsFoundation.Rect {
        get { try! _default.get_TextBounds() }
        set { try! _default.put_TextBounds(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextlayoutrequest)
public final class CoreTextLayoutRequest : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Text_Core.ICoreTextLayoutRequest
    private typealias CABI = __x_ABI_CWindows_CUI_CText_CCore_CICoreTextLayoutRequest
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextlayoutrequest.getdeferral)
    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferral()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextlayoutrequest.iscanceled)
    public var isCanceled : Bool {
        get { try! _default.get_IsCanceled() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextlayoutrequest.layoutbounds)
    public var layoutBounds : CoreTextLayoutBounds! {
        get { try! _default.get_LayoutBounds() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextlayoutrequest.range)
    public var range : CoreTextRange {
        get { try! _default.get_Range() }
    }

    private lazy var _ICoreTextLayoutRequest2: __ABI_Windows_UI_Text_Core.ICoreTextLayoutRequest2! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextlayoutrequest.layoutboundsvisualpixels)
    public var layoutBoundsVisualPixels : CoreTextLayoutBounds! {
        get { try! _ICoreTextLayoutRequest2.get_LayoutBoundsVisualPixels() }
    }

    deinit {
        _default = nil
        _ICoreTextLayoutRequest2 = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextlayoutrequestedeventargs)
public final class CoreTextLayoutRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Text_Core.ICoreTextLayoutRequestedEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CText_CCore_CICoreTextLayoutRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextlayoutrequestedeventargs.request)
    public var request : CoreTextLayoutRequest! {
        get { try! _default.get_Request() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextselectionrequest)
public final class CoreTextSelectionRequest : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Text_Core.ICoreTextSelectionRequest
    private typealias CABI = __x_ABI_CWindows_CUI_CText_CCore_CICoreTextSelectionRequest
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextselectionrequest.getdeferral)
    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferral()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextselectionrequest.iscanceled)
    public var isCanceled : Bool {
        get { try! _default.get_IsCanceled() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextselectionrequest.selection)
    public var selection : CoreTextRange {
        get { try! _default.get_Selection() }
        set { try! _default.put_Selection(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextselectionrequestedeventargs)
public final class CoreTextSelectionRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Text_Core.ICoreTextSelectionRequestedEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CText_CCore_CICoreTextSelectionRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextselectionrequestedeventargs.request)
    public var request : CoreTextSelectionRequest! {
        get { try! _default.get_Request() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextselectionupdatingeventargs)
public final class CoreTextSelectionUpdatingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Text_Core.ICoreTextSelectionUpdatingEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CText_CCore_CICoreTextSelectionUpdatingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextselectionupdatingeventargs.getdeferral)
    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferral()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextselectionupdatingeventargs.iscanceled)
    public var isCanceled : Bool {
        get { try! _default.get_IsCanceled() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextselectionupdatingeventargs.result)
    public var result : CoreTextSelectionUpdatingResult {
        get { try! _default.get_Result() }
        set { try! _default.put_Result(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextselectionupdatingeventargs.selection)
    public var selection : CoreTextRange {
        get { try! _default.get_Selection() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextservicesconstants)
public final class CoreTextServicesConstants {
    private static let _ICoreTextServicesStatics: __ABI_Windows_UI_Text_Core.ICoreTextServicesStatics = try! RoGetActivationFactory("Windows.UI.Text.Core.CoreTextServicesConstants")
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextservicesconstants.hiddencharacter)
    public static var hiddenCharacter : Character {
        get { try! _ICoreTextServicesStatics.get_HiddenCharacter() }
    }

}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextservicesmanager)
public final class CoreTextServicesManager : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Text_Core.ICoreTextServicesManager
    private typealias CABI = __x_ABI_CWindows_CUI_CText_CCore_CICoreTextServicesManager
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    private static let _ICoreTextServicesManagerStatics: __ABI_Windows_UI_Text_Core.ICoreTextServicesManagerStatics = try! RoGetActivationFactory("Windows.UI.Text.Core.CoreTextServicesManager")
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextservicesmanager.getforcurrentview)
    public static func getForCurrentView() throws -> CoreTextServicesManager! {
        return try _ICoreTextServicesManagerStatics.GetForCurrentView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextservicesmanager.createeditcontext)
    public func createEditContext() throws -> CoreTextEditContext! {
        try _default.CreateEditContext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextservicesmanager.inputlanguage)
    public var inputLanguage : UWP.Language! {
        get { try! _default.get_InputLanguage() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextservicesmanager.inputlanguagechanged)
    public lazy var inputLanguageChanged : Event<TypedEventHandler<CoreTextServicesManager?, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_InputLanguageChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_InputLanguageChanged($0)
       }
      )
    }()

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexttextrequest)
public final class CoreTextTextRequest : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Text_Core.ICoreTextTextRequest
    private typealias CABI = __x_ABI_CWindows_CUI_CText_CCore_CICoreTextTextRequest
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexttextrequest.getdeferral)
    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferral()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexttextrequest.iscanceled)
    public var isCanceled : Bool {
        get { try! _default.get_IsCanceled() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexttextrequest.range)
    public var range : CoreTextRange {
        get { try! _default.get_Range() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexttextrequest.text)
    public var text : String {
        get { try! _default.get_Text() }
        set { try! _default.put_Text(newValue) }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexttextrequestedeventargs)
public final class CoreTextTextRequestedEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Text_Core.ICoreTextTextRequestedEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CText_CCore_CICoreTextTextRequestedEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexttextrequestedeventargs.request)
    public var request : CoreTextTextRequest! {
        get { try! _default.get_Request() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexttextupdatingeventargs)
public final class CoreTextTextUpdatingEventArgs : WinRTClass {
    private typealias SwiftABI = __ABI_Windows_UI_Text_Core.ICoreTextTextUpdatingEventArgs
    private typealias CABI = __x_ABI_CWindows_CUI_CText_CCore_CICoreTextTextUpdatingEventArgs
    private lazy var _default: SwiftABI! = getInterfaceForCaching()
    @_spi(WinRTInternal)
    override public func _getABI<T>() -> UnsafeMutablePointer<T>? {
        if T.self == CABI.self {
            return RawPointer(_default)
        }
        return super._getABI()
    }

    @_spi(WinRTInternal)
    public init(fromAbi: WindowsFoundation.IInspectable) {
        super.init(fromAbi)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexttextupdatingeventargs.getdeferral)
    public func getDeferral() throws -> WindowsFoundation.Deferral! {
        try _default.GetDeferral()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexttextupdatingeventargs.inputlanguage)
    public var inputLanguage : UWP.Language! {
        get { try! _default.get_InputLanguage() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexttextupdatingeventargs.iscanceled)
    public var isCanceled : Bool {
        get { try! _default.get_IsCanceled() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexttextupdatingeventargs.newselection)
    public var newSelection : CoreTextRange {
        get { try! _default.get_NewSelection() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexttextupdatingeventargs.range)
    public var range : CoreTextRange {
        get { try! _default.get_Range() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexttextupdatingeventargs.result)
    public var result : CoreTextTextUpdatingResult {
        get { try! _default.get_Result() }
        set { try! _default.put_Result(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretexttextupdatingeventargs.text)
    public var text : String {
        get { try! _default.get_Text() }
    }

    deinit {
        _default = nil
    }
}

/// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextrange)
public struct CoreTextRange: Hashable, Codable, Sendable {
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextrange.startcaretposition)
    public var startCaretPosition: Int32 = 0
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.ui.text.core.coretextrange.endcaretposition)
    public var endCaretPosition: Int32 = 0
    public init() {}
    public init(startCaretPosition: Int32, endCaretPosition: Int32) {
        self.startCaretPosition = startCaretPosition
        self.endCaretPosition = endCaretPosition
    }
}

extension UWP.CoreTextFormatUpdatingReason {
    public static var none : UWP.CoreTextFormatUpdatingReason {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextFormatUpdatingReason_None
    }
    public static var compositionUnconverted : UWP.CoreTextFormatUpdatingReason {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextFormatUpdatingReason_CompositionUnconverted
    }
    public static var compositionConverted : UWP.CoreTextFormatUpdatingReason {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextFormatUpdatingReason_CompositionConverted
    }
    public static var compositionTargetUnconverted : UWP.CoreTextFormatUpdatingReason {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextFormatUpdatingReason_CompositionTargetUnconverted
    }
    public static var compositionTargetConverted : UWP.CoreTextFormatUpdatingReason {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextFormatUpdatingReason_CompositionTargetConverted
    }
}
extension UWP.CoreTextFormatUpdatingReason: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension UWP.CoreTextFormatUpdatingResult {
    public static var succeeded : UWP.CoreTextFormatUpdatingResult {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextFormatUpdatingResult_Succeeded
    }
    public static var failed : UWP.CoreTextFormatUpdatingResult {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextFormatUpdatingResult_Failed
    }
}
extension UWP.CoreTextFormatUpdatingResult: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension UWP.CoreTextInputPaneDisplayPolicy {
    public static var automatic : UWP.CoreTextInputPaneDisplayPolicy {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputPaneDisplayPolicy_Automatic
    }
    public static var manual : UWP.CoreTextInputPaneDisplayPolicy {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputPaneDisplayPolicy_Manual
    }
}
extension UWP.CoreTextInputPaneDisplayPolicy: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension UWP.CoreTextInputScope {
    public static var `default` : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_Default
    }
    public static var url : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_Url
    }
    public static var filePath : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_FilePath
    }
    public static var fileName : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_FileName
    }
    public static var emailUserName : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_EmailUserName
    }
    public static var emailAddress : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_EmailAddress
    }
    public static var userName : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_UserName
    }
    public static var personalFullName : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_PersonalFullName
    }
    public static var personalNamePrefix : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_PersonalNamePrefix
    }
    public static var personalGivenName : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_PersonalGivenName
    }
    public static var personalMiddleName : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_PersonalMiddleName
    }
    public static var personalSurname : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_PersonalSurname
    }
    public static var personalNameSuffix : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_PersonalNameSuffix
    }
    public static var address : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_Address
    }
    public static var addressPostalCode : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_AddressPostalCode
    }
    public static var addressStreet : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_AddressStreet
    }
    public static var addressStateOrProvince : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_AddressStateOrProvince
    }
    public static var addressCity : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_AddressCity
    }
    public static var addressCountryName : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_AddressCountryName
    }
    public static var addressCountryShortName : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_AddressCountryShortName
    }
    public static var currencyAmountAndSymbol : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_CurrencyAmountAndSymbol
    }
    public static var currencyAmount : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_CurrencyAmount
    }
    public static var date : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_Date
    }
    public static var dateMonth : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_DateMonth
    }
    public static var dateDay : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_DateDay
    }
    public static var dateYear : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_DateYear
    }
    public static var dateMonthName : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_DateMonthName
    }
    public static var dateDayName : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_DateDayName
    }
    public static var number : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_Number
    }
    public static var singleCharacter : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_SingleCharacter
    }
    public static var password : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_Password
    }
    public static var telephoneNumber : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_TelephoneNumber
    }
    public static var telephoneCountryCode : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_TelephoneCountryCode
    }
    public static var telephoneAreaCode : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_TelephoneAreaCode
    }
    public static var telephoneLocalNumber : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_TelephoneLocalNumber
    }
    public static var time : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_Time
    }
    public static var timeHour : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_TimeHour
    }
    public static var timeMinuteOrSecond : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_TimeMinuteOrSecond
    }
    public static var numberFullWidth : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_NumberFullWidth
    }
    public static var alphanumericHalfWidth : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_AlphanumericHalfWidth
    }
    public static var alphanumericFullWidth : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_AlphanumericFullWidth
    }
    public static var currencyChinese : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_CurrencyChinese
    }
    public static var bopomofo : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_Bopomofo
    }
    public static var hiragana : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_Hiragana
    }
    public static var katakanaHalfWidth : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_KatakanaHalfWidth
    }
    public static var katakanaFullWidth : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_KatakanaFullWidth
    }
    public static var hanja : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_Hanja
    }
    public static var hangulHalfWidth : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_HangulHalfWidth
    }
    public static var hangulFullWidth : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_HangulFullWidth
    }
    public static var search : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_Search
    }
    public static var formula : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_Formula
    }
    public static var searchIncremental : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_SearchIncremental
    }
    public static var chineseHalfWidth : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_ChineseHalfWidth
    }
    public static var chineseFullWidth : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_ChineseFullWidth
    }
    public static var nativeScript : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_NativeScript
    }
    public static var text : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_Text
    }
    public static var chat : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_Chat
    }
    public static var nameOrPhoneNumber : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_NameOrPhoneNumber
    }
    public static var emailUserNameOrAddress : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_EmailUserNameOrAddress
    }
    public static var `private` : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_Private
    }
    public static var maps : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_Maps
    }
    public static var passwordNumeric : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_PasswordNumeric
    }
    public static var formulaNumber : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_FormulaNumber
    }
    public static var chatWithoutEmoji : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_ChatWithoutEmoji
    }
    public static var digits : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_Digits
    }
    public static var pinNumeric : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_PinNumeric
    }
    public static var pinAlphanumeric : UWP.CoreTextInputScope {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextInputScope_PinAlphanumeric
    }
}
extension UWP.CoreTextInputScope: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension UWP.CoreTextSelectionUpdatingResult {
    public static var succeeded : UWP.CoreTextSelectionUpdatingResult {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextSelectionUpdatingResult_Succeeded
    }
    public static var failed : UWP.CoreTextSelectionUpdatingResult {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextSelectionUpdatingResult_Failed
    }
}
extension UWP.CoreTextSelectionUpdatingResult: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

extension UWP.CoreTextTextUpdatingResult {
    public static var succeeded : UWP.CoreTextTextUpdatingResult {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextTextUpdatingResult_Succeeded
    }
    public static var failed : UWP.CoreTextTextUpdatingResult {
        __x_ABI_CWindows_CUI_CText_CCore_CCoreTextTextUpdatingResult_Failed
    }
}
extension UWP.CoreTextTextUpdatingResult: @retroactive Hashable, @retroactive Codable, @retroactive @unchecked Sendable {}

