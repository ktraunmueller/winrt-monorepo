// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapBuffer: WindowsFoundation.IID {
    .init(Data1: 0xA53E04C4, Data2: 0x399C, Data3: 0x438C, Data4: ( 0xB2,0x8F,0xA6,0x3A,0x6B,0x83,0xD1,0xA1 ))// A53E04C4-399C-438C-B28F-A63A6B83D1A1
}

private var IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation: WindowsFoundation.IID {
    .init(Data1: 0x400CAAF2, Data2: 0xC4B0, Data3: 0x4392, Data4: ( 0xA3,0xB0,0x6F,0x6F,0x9B,0xA9,0x5C,0xB4 ))// 400CAAF2-C4B0-4392-A3B0-6F6F9BA95CB4
}

private var IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder: WindowsFoundation.IID {
    .init(Data1: 0xACEF22BA, Data2: 0x1D74, Data3: 0x4C91, Data4: ( 0x9D,0xFC,0x96,0x20,0x74,0x52,0x33,0xE6 ))// ACEF22BA-1D74-4C91-9DFC-9620745233E6
}

private var IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics: WindowsFoundation.IID {
    .init(Data1: 0x438CCB26, Data2: 0xBCEF, Data3: 0x4E95, Data4: ( 0xBA,0xD6,0x23,0xA8,0x22,0xE5,0x8D,0x01 ))// 438CCB26-BCEF-4E95-BAD6-23A822E58D01
}

private var IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics2: WindowsFoundation.IID {
    .init(Data1: 0x50BA68EA, Data2: 0x99A1, Data3: 0x40C4, Data4: ( 0x80,0xD9,0xAE,0xF0,0xDA,0xFA,0x6C,0x3F ))// 50BA68EA-99A1-40C4-80D9-AEF0DAFA6C3F
}

private var IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder: WindowsFoundation.IID {
    .init(Data1: 0x2BC468E3, Data2: 0xE1F8, Data3: 0x4B54, Data4: ( 0x95,0xE8,0x32,0x91,0x95,0x51,0xCE,0x62 ))// 2BC468E3-E1F8-4B54-95E8-32919551CE62
}

private var IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics: WindowsFoundation.IID {
    .init(Data1: 0xA74356A7, Data2: 0xA4E4, Data3: 0x4EB9, Data4: ( 0x8E,0x40,0x56,0x4D,0xE7,0xE1,0xCC,0xB2 ))// A74356A7-A4E4-4EB9-8E40-564DE7E1CCB2
}

private var IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics2: WindowsFoundation.IID {
    .init(Data1: 0x33CBC259, Data2: 0xFE31, Data3: 0x41B1, Data4: ( 0xB8,0x12,0x08,0x6D,0x21,0xE8,0x7E,0x16 ))// 33CBC259-FE31-41B1-B812-086D21E87E16
}

private var IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderWithSoftwareBitmap: WindowsFoundation.IID {
    .init(Data1: 0x686CD241, Data2: 0x4330, Data3: 0x4C77, Data4: ( 0xAC,0xE4,0x03,0x34,0x96,0x8B,0x17,0x68 ))// 686CD241-4330-4C77-ACE4-0334968B1768
}

private var IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame: WindowsFoundation.IID {
    .init(Data1: 0x72A49A1C, Data2: 0x8081, Data3: 0x438D, Data4: ( 0x91,0xBC,0x94,0xEC,0xFC,0x81,0x85,0xC6 ))// 72A49A1C-8081-438D-91BC-94ECFC8185C6
}

private var IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmap: WindowsFoundation.IID {
    .init(Data1: 0xFE287C9A, Data2: 0x420C, Data3: 0x4963, Data4: ( 0x87,0xAD,0x69,0x14,0x36,0xE0,0x83,0x83 ))// FE287C9A-420C-4963-87AD-691436E08383
}

private var IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapProperties: WindowsFoundation.IID {
    .init(Data1: 0xEA9F4F1B, Data2: 0xB505, Data3: 0x4450, Data4: ( 0xA4,0xD1,0xE8,0xCA,0x94,0x52,0x9D,0x8D ))// EA9F4F1B-B505-4450-A4D1-E8CA94529D8D
}

private var IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesView: WindowsFoundation.IID {
    .init(Data1: 0x7E0FE87A, Data2: 0x3A70, Data3: 0x48F8, Data4: ( 0x9C,0x55,0x19,0x6C,0xF5,0xA5,0x45,0xF5 ))// 7E0FE87A-3A70-48F8-9C55-196CF5A545F5
}

private var IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform: WindowsFoundation.IID {
    .init(Data1: 0xAE755344, Data2: 0xE268, Data3: 0x4D35, Data4: ( 0xAD,0xCF,0xE9,0x95,0xD3,0x1A,0x8D,0x34 ))// AE755344-E268-4D35-ADCF-E995D31A8D34
}

private var IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue: WindowsFoundation.IID {
    .init(Data1: 0xCD8044A9, Data2: 0x2443, Data3: 0x4000, Data4: ( 0xB0,0xCD,0x79,0x31,0x6C,0x56,0xF5,0x89 ))// CD8044A9-2443-4000-B0CD-79316C56F589
}

private var IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValueFactory: WindowsFoundation.IID {
    .init(Data1: 0x92DBB599, Data2: 0xCE13, Data3: 0x46BB, Data4: ( 0x95,0x45,0xCB,0x3A,0x3F,0x63,0xEB,0x8B ))// 92DBB599-CE13-46BB-9545-CB3A3F63EB8B
}

private var IID___x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProvider: WindowsFoundation.IID {
    .init(Data1: 0xDD831F25, Data2: 0x185C, Data3: 0x4595, Data4: ( 0x9F,0xB9,0xCC,0xBE,0x6E,0xC1,0x8A,0x6F ))// DD831F25-185C-4595-9FB9-CCBE6EC18A6F
}

private var IID___x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap: WindowsFoundation.IID {
    .init(Data1: 0x689E0708, Data2: 0x7EEF, Data3: 0x483F, Data4: ( 0x96,0x3F,0xDA,0x93,0x88,0x18,0xE0,0x73 ))// 689E0708-7EEF-483F-963F-DA938818E073
}

private var IID___x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory: WindowsFoundation.IID {
    .init(Data1: 0xC99FEB69, Data2: 0x2D62, Data3: 0x4D47, Data4: ( 0xA6,0xB3,0x4F,0xDB,0x6A,0x07,0xFD,0xF8 ))// C99FEB69-2D62-4D47-A6B3-4FDB6A07FDF8
}

private var IID___x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics: WindowsFoundation.IID {
    .init(Data1: 0xDF0385DB, Data2: 0x672F, Data3: 0x4A9D, Data4: ( 0x80,0x6E,0xC2,0x44,0x2F,0x34,0x3E,0x86 ))// DF0385DB-672F-4A9D-806E-C2442F343E86
}

@_spi(WinRTInternal)
public enum __ABI_Windows_Graphics_Imaging {
    public class IBitmapBuffer: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapBuffer }

        public func GetPlaneCount() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapBuffer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetPlaneCount(pThis, &value))
            }
            return value
        }

        public func GetPlaneDescription(_ index: Int32) throws -> UWP.BitmapPlaneDescription {
            var value: __x_ABI_CWindows_CGraphics_CImaging_CBitmapPlaneDescription = .init()
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapBuffer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetPlaneDescription(pThis, index, &value))
            }
            return .from(abi: value)
        }

    }

    public class IBitmapCodecInformation: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation }

        public func get_CodecId() throws -> Foundation.UUID {
            var value: WindowsFoundation.GUID = .init()
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_CodecId(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_FileExtensions() throws -> WindowsFoundation.AnyIVectorView<String>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_FileExtensions(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

        public func get_FriendlyName() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FriendlyName(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_MimeTypes() throws -> WindowsFoundation.AnyIVectorView<String>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_MimeTypes(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.unwrapFrom(abi: value)
        }

    }

    public class IBitmapDecoder: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder }

        public func get_BitmapContainerProperties() throws -> UWP.BitmapPropertiesView? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BitmapContainerProperties(pThis, &valueAbi))
                }
            }
            return __IMPL_Windows_Graphics_Imaging.BitmapPropertiesViewBridge.from(abi: value)
        }

        public func get_DecoderInformation() throws -> UWP.BitmapCodecInformation? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DecoderInformation(pThis, &valueAbi))
                }
            }
            return __IMPL_Windows_Graphics_Imaging.BitmapCodecInformationBridge.from(abi: value)
        }

        public func get_FrameCount() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_FrameCount(pThis, &value))
            }
            return value
        }

        public func GetPreviewAsync() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.ImageStream?>? {
            let (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPreviewAsync(pThis, &asyncInfoAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamWrapper.unwrapFrom(abi: asyncInfo)
        }

        public func GetFrameAsync(_ frameIndex: UInt32) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.BitmapFrame?>? {
            let (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetFrameAsync(pThis, frameIndex, &asyncInfoAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameWrapper.unwrapFrom(abi: asyncInfo)
        }

    }

    public class IBitmapDecoderStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics }

        public func get_BmpDecoderId() throws -> Foundation.UUID {
            var value: WindowsFoundation.GUID = .init()
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BmpDecoderId(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_JpegDecoderId() throws -> Foundation.UUID {
            var value: WindowsFoundation.GUID = .init()
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_JpegDecoderId(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_PngDecoderId() throws -> Foundation.UUID {
            var value: WindowsFoundation.GUID = .init()
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PngDecoderId(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_TiffDecoderId() throws -> Foundation.UUID {
            var value: WindowsFoundation.GUID = .init()
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TiffDecoderId(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_GifDecoderId() throws -> Foundation.UUID {
            var value: WindowsFoundation.GUID = .init()
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GifDecoderId(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_JpegXRDecoderId() throws -> Foundation.UUID {
            var value: WindowsFoundation.GUID = .init()
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_JpegXRDecoderId(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_IcoDecoderId() throws -> Foundation.UUID {
            var value: WindowsFoundation.GUID = .init()
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IcoDecoderId(pThis, &value))
            }
            return .init(from: value)
        }

        public func GetDecoderInformationEnumerator() throws -> WindowsFoundation.AnyIVectorView<UWP.BitmapCodecInformation?>? {
            let (decoderInformationEnumerator) = try ComPtrs.initialize { decoderInformationEnumeratorAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDecoderInformationEnumerator(pThis, &decoderInformationEnumeratorAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper.unwrapFrom(abi: decoderInformationEnumerator)
        }

        public func CreateAsync(_ stream: UWP.AnyIRandomAccessStream?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.BitmapDecoder?>? {
            let (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
                let _stream = try! streamWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateAsync(pThis, _stream, &asyncInfoAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderWrapper.unwrapFrom(abi: asyncInfo)
        }

        public func CreateWithIdAsync(_ decoderId: Foundation.UUID, _ stream: UWP.AnyIRandomAccessStream?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.BitmapDecoder?>? {
            let (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
                let _stream = try! streamWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithIdAsync(pThis, .init(from: decoderId), _stream, &asyncInfoAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderWrapper.unwrapFrom(abi: asyncInfo)
        }

    }

    public class IBitmapDecoderStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics2 }

        public func get_HeifDecoderId() throws -> Foundation.UUID {
            var value: WindowsFoundation.GUID = .init()
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeifDecoderId(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_WebpDecoderId() throws -> Foundation.UUID {
            var value: WindowsFoundation.GUID = .init()
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoderStatics2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_WebpDecoderId(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IBitmapEncoder: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder }

        public func get_EncoderInformation() throws -> UWP.BitmapCodecInformation? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_EncoderInformation(pThis, &valueAbi))
                }
            }
            return __IMPL_Windows_Graphics_Imaging.BitmapCodecInformationBridge.from(abi: value)
        }

        public func get_BitmapProperties() throws -> UWP.BitmapProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BitmapProperties(pThis, &valueAbi))
                }
            }
            return __IMPL_Windows_Graphics_Imaging.BitmapPropertiesBridge.from(abi: value)
        }

        public func get_BitmapContainerProperties() throws -> UWP.BitmapProperties? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BitmapContainerProperties(pThis, &valueAbi))
                }
            }
            return __IMPL_Windows_Graphics_Imaging.BitmapPropertiesBridge.from(abi: value)
        }

        public func get_IsThumbnailGenerated() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsThumbnailGenerated(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_IsThumbnailGenerated(_ value: Bool) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_IsThumbnailGenerated(pThis, .init(from: value)))
            }
        }

        public func get_GeneratedThumbnailWidth() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GeneratedThumbnailWidth(pThis, &value))
            }
            return value
        }

        public func put_GeneratedThumbnailWidth(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_GeneratedThumbnailWidth(pThis, value))
            }
        }

        public func get_GeneratedThumbnailHeight() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GeneratedThumbnailHeight(pThis, &value))
            }
            return value
        }

        public func put_GeneratedThumbnailHeight(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_GeneratedThumbnailHeight(pThis, value))
            }
        }

        public func get_BitmapTransform() throws -> UWP.BitmapTransform? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BitmapTransform(pThis, &valueAbi))
                }
            }
            return __IMPL_Windows_Graphics_Imaging.BitmapTransformBridge.from(abi: value)
        }

        public func SetPixelData(_ pixelFormat: UWP.BitmapPixelFormat, _ alphaMode: UWP.BitmapAlphaMode, _ width: UInt32, _ height: UInt32, _ dpiX: Double, _ dpiY: Double, _ pixels: [UInt8]) throws {
            try pixels.toABI { _pixels in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SetPixelData(pThis, pixelFormat, alphaMode, width, height, dpiX, dpiY, _pixels.count, _pixels.start))
                }
            }
        }

        public func GoToNextFrameAsync() throws -> WindowsFoundation.AnyIAsyncAction? {
            let (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GoToNextFrameAsync(pThis, &asyncInfoAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncInfo)
        }

        public func GoToNextFrameWithEncodingOptionsAsync(_ encodingOptions: WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, UWP.BitmapTypedValue?>?>?) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                let encodingOptionsWrapper = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper(encodingOptions)
                let _encodingOptions = try! encodingOptionsWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GoToNextFrameWithEncodingOptionsAsync(pThis, _encodingOptions, &asyncInfoAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncInfo)
        }

        public func FlushAsync() throws -> WindowsFoundation.AnyIAsyncAction? {
            let (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.FlushAsync(pThis, &asyncInfoAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncInfo)
        }

    }

    public class IBitmapEncoderStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics }

        public func get_BmpEncoderId() throws -> Foundation.UUID {
            var value: WindowsFoundation.GUID = .init()
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BmpEncoderId(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_JpegEncoderId() throws -> Foundation.UUID {
            var value: WindowsFoundation.GUID = .init()
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_JpegEncoderId(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_PngEncoderId() throws -> Foundation.UUID {
            var value: WindowsFoundation.GUID = .init()
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PngEncoderId(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_TiffEncoderId() throws -> Foundation.UUID {
            var value: WindowsFoundation.GUID = .init()
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_TiffEncoderId(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_GifEncoderId() throws -> Foundation.UUID {
            var value: WindowsFoundation.GUID = .init()
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_GifEncoderId(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_JpegXREncoderId() throws -> Foundation.UUID {
            var value: WindowsFoundation.GUID = .init()
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_JpegXREncoderId(pThis, &value))
            }
            return .init(from: value)
        }

        public func GetEncoderInformationEnumerator() throws -> WindowsFoundation.AnyIVectorView<UWP.BitmapCodecInformation?>? {
            let (encoderInformationEnumerator) = try ComPtrs.initialize { encoderInformationEnumeratorAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetEncoderInformationEnumerator(pThis, &encoderInformationEnumeratorAbi))
                }
            }
            return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper.unwrapFrom(abi: encoderInformationEnumerator)
        }

        public func CreateAsync(_ encoderId: Foundation.UUID, _ stream: UWP.AnyIRandomAccessStream?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.BitmapEncoder?>? {
            let (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
                let _stream = try! streamWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateAsync(pThis, .init(from: encoderId), _stream, &asyncInfoAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderWrapper.unwrapFrom(abi: asyncInfo)
        }

        public func CreateWithEncodingOptionsAsync(_ encoderId: Foundation.UUID, _ stream: UWP.AnyIRandomAccessStream?, _ encodingOptions: WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, UWP.BitmapTypedValue?>?>?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.BitmapEncoder?>? {
            let (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
                let _stream = try! streamWrapper?.toABI { $0 }
                let encodingOptionsWrapper = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper(encodingOptions)
                let _encodingOptions = try! encodingOptionsWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithEncodingOptionsAsync(pThis, .init(from: encoderId), _stream, _encodingOptions, &asyncInfoAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderWrapper.unwrapFrom(abi: asyncInfo)
        }

        public func CreateForTranscodingAsync(_ stream: UWP.AnyIRandomAccessStream?, _ bitmapDecoder: UWP.BitmapDecoder?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.BitmapEncoder?>? {
            let (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                let streamWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(stream)
                let _stream = try! streamWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateForTranscodingAsync(pThis, _stream, RawPointer(bitmapDecoder), &asyncInfoAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderWrapper.unwrapFrom(abi: asyncInfo)
        }

        public func CreateForInPlacePropertyEncodingAsync(_ bitmapDecoder: UWP.BitmapDecoder?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.BitmapEncoder?>? {
            let (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateForInPlacePropertyEncodingAsync(pThis, RawPointer(bitmapDecoder), &asyncInfoAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderWrapper.unwrapFrom(abi: asyncInfo)
        }

    }

    public class IBitmapEncoderStatics2: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics2 }

        public func get_HeifEncoderId() throws -> Foundation.UUID {
            var value: WindowsFoundation.GUID = .init()
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderStatics2.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_HeifEncoderId(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IBitmapEncoderWithSoftwareBitmap: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderWithSoftwareBitmap }

        public func SetSoftwareBitmap(_ bitmap: UWP.SoftwareBitmap?) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoderWithSoftwareBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.SetSoftwareBitmap(pThis, RawPointer(bitmap)))
            }
        }

    }

    public class IBitmapFrame: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame }

        open func GetThumbnailAsync() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.ImageStream?>? {
            let (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetThumbnailAsync(pThis, &asyncInfoAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamWrapper.unwrapFrom(abi: asyncInfo)
        }

        open func get_BitmapProperties() throws -> UWP.BitmapPropertiesView? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_BitmapProperties(pThis, &valueAbi))
                }
            }
            return __IMPL_Windows_Graphics_Imaging.BitmapPropertiesViewBridge.from(abi: value)
        }

        open func get_BitmapPixelFormat() throws -> UWP.BitmapPixelFormat {
            var value: __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BitmapPixelFormat(pThis, &value))
            }
            return value
        }

        open func get_BitmapAlphaMode() throws -> UWP.BitmapAlphaMode {
            var value: __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BitmapAlphaMode(pThis, &value))
            }
            return value
        }

        open func get_DpiX() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DpiX(pThis, &value))
            }
            return value
        }

        open func get_DpiY() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DpiY(pThis, &value))
            }
            return value
        }

        open func get_PixelWidth() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PixelWidth(pThis, &value))
            }
            return value
        }

        open func get_PixelHeight() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PixelHeight(pThis, &value))
            }
            return value
        }

        open func get_OrientedPixelWidth() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OrientedPixelWidth(pThis, &value))
            }
            return value
        }

        open func get_OrientedPixelHeight() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_OrientedPixelHeight(pThis, &value))
            }
            return value
        }

        open func GetPixelDataAsync() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.PixelDataProvider?>? {
            let (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPixelDataAsync(pThis, &asyncInfoAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderWrapper.unwrapFrom(abi: asyncInfo)
        }

        open func GetPixelDataTransformedAsync(_ pixelFormat: UWP.BitmapPixelFormat, _ alphaMode: UWP.BitmapAlphaMode, _ transform: UWP.BitmapTransform?, _ exifOrientationMode: UWP.ExifOrientationMode, _ colorManagementMode: UWP.ColorManagementMode) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.PixelDataProvider?>? {
            let (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPixelDataTransformedAsync(pThis, pixelFormat, alphaMode, RawPointer(transform), exifOrientationMode, colorManagementMode, &asyncInfoAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderWrapper.unwrapFrom(abi: asyncInfo)
        }

    }

    internal static var IBitmapFrameVTable: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameVtbl = .init(
        QueryInterface: { IBitmapFrameWrapper.queryInterface($0, $1, $2) },
        AddRef: { IBitmapFrameWrapper.addRef($0) },
        Release: { IBitmapFrameWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Graphics_Imaging.IBitmapFrameWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Graphics.Imaging.IBitmapFrame").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        GetThumbnailAsync: {
            do {
                guard let __unwrapped__instance = IBitmapFrameWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let asyncInfo = try __unwrapped__instance.getThumbnailAsync()
                let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamWrapper(asyncInfo)
                asyncInfoWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        },

        get_BitmapProperties: {
            guard let __unwrapped__instance = IBitmapFrameWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.bitmapProperties
            value?.copyTo($1)
            return S_OK
        },

        get_BitmapPixelFormat: {
            guard let __unwrapped__instance = IBitmapFrameWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.bitmapPixelFormat
            $1?.initialize(to: value)
            return S_OK
        },

        get_BitmapAlphaMode: {
            guard let __unwrapped__instance = IBitmapFrameWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.bitmapAlphaMode
            $1?.initialize(to: value)
            return S_OK
        },

        get_DpiX: {
            guard let __unwrapped__instance = IBitmapFrameWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.dpiX
            $1?.initialize(to: value)
            return S_OK
        },

        get_DpiY: {
            guard let __unwrapped__instance = IBitmapFrameWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.dpiY
            $1?.initialize(to: value)
            return S_OK
        },

        get_PixelWidth: {
            guard let __unwrapped__instance = IBitmapFrameWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.pixelWidth
            $1?.initialize(to: value)
            return S_OK
        },

        get_PixelHeight: {
            guard let __unwrapped__instance = IBitmapFrameWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.pixelHeight
            $1?.initialize(to: value)
            return S_OK
        },

        get_OrientedPixelWidth: {
            guard let __unwrapped__instance = IBitmapFrameWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.orientedPixelWidth
            $1?.initialize(to: value)
            return S_OK
        },

        get_OrientedPixelHeight: {
            guard let __unwrapped__instance = IBitmapFrameWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.orientedPixelHeight
            $1?.initialize(to: value)
            return S_OK
        },

        GetPixelDataAsync: {
            do {
                guard let __unwrapped__instance = IBitmapFrameWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let asyncInfo = try __unwrapped__instance.getPixelDataAsync()
                let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderWrapper(asyncInfo)
                asyncInfoWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetPixelDataTransformedAsync: {
            do {
                guard let __unwrapped__instance = IBitmapFrameWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let pixelFormat: UWP.BitmapPixelFormat = $1
                let alphaMode: UWP.BitmapAlphaMode = $2
                let transform: UWP.BitmapTransform? = __IMPL_Windows_Graphics_Imaging.BitmapTransformBridge.from(abi: ComPtr($3))
                let exifOrientationMode: UWP.ExifOrientationMode = $4
                let colorManagementMode: UWP.ColorManagementMode = $5
                let asyncInfo = try __unwrapped__instance.getPixelDataAsync(pixelFormat, alphaMode, transform, exifOrientationMode, colorManagementMode)
                let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderWrapper(asyncInfo)
                asyncInfoWrapper?.copyTo($6)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IBitmapFrameWrapper = InterfaceWrapperBase<__IMPL_Windows_Graphics_Imaging.IBitmapFrameBridge>
    public class IBitmapFrameWithSoftwareBitmap: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmap }

        open func GetSoftwareBitmapAsync() throws -> WindowsFoundation.AnyIAsyncOperation<UWP.SoftwareBitmap?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmap.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetSoftwareBitmapAsync(pThis, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper.unwrapFrom(abi: value)
        }

        open func GetSoftwareBitmapConvertedAsync(_ pixelFormat: UWP.BitmapPixelFormat, _ alphaMode: UWP.BitmapAlphaMode) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.SoftwareBitmap?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmap.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetSoftwareBitmapConvertedAsync(pThis, pixelFormat, alphaMode, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper.unwrapFrom(abi: value)
        }

        open func GetSoftwareBitmapTransformedAsync(_ pixelFormat: UWP.BitmapPixelFormat, _ alphaMode: UWP.BitmapAlphaMode, _ transform: UWP.BitmapTransform?, _ exifOrientationMode: UWP.ExifOrientationMode, _ colorManagementMode: UWP.ColorManagementMode) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.SoftwareBitmap?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmap.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetSoftwareBitmapTransformedAsync(pThis, pixelFormat, alphaMode, RawPointer(transform), exifOrientationMode, colorManagementMode, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper.unwrapFrom(abi: value)
        }

    }

    internal static var IBitmapFrameWithSoftwareBitmapVTable: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmapVtbl = .init(
        QueryInterface: { IBitmapFrameWithSoftwareBitmapWrapper.queryInterface($0, $1, $2) },
        AddRef: { IBitmapFrameWithSoftwareBitmapWrapper.addRef($0) },
        Release: { IBitmapFrameWithSoftwareBitmapWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Graphics_Imaging.IBitmapFrameWithSoftwareBitmapWrapper.IID
            iids[3] = __ABI_Windows_Graphics_Imaging.IBitmapFrameWrapper.IID
            $1!.pointee = 4
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Graphics.Imaging.IBitmapFrameWithSoftwareBitmap").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        GetSoftwareBitmapAsync: {
            do {
                guard let __unwrapped__instance = IBitmapFrameWithSoftwareBitmapWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getSoftwareBitmapAsync()
                let valueWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper(value)
                valueWrapper?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetSoftwareBitmapConvertedAsync: {
            do {
                guard let __unwrapped__instance = IBitmapFrameWithSoftwareBitmapWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let pixelFormat: UWP.BitmapPixelFormat = $1
                let alphaMode: UWP.BitmapAlphaMode = $2
                let value = try __unwrapped__instance.getSoftwareBitmapAsync(pixelFormat, alphaMode)
                let valueWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper(value)
                valueWrapper?.copyTo($3)
                return S_OK
            } catch { return failWith(error: error) }
        },

        GetSoftwareBitmapTransformedAsync: {
            do {
                guard let __unwrapped__instance = IBitmapFrameWithSoftwareBitmapWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let pixelFormat: UWP.BitmapPixelFormat = $1
                let alphaMode: UWP.BitmapAlphaMode = $2
                let transform: UWP.BitmapTransform? = __IMPL_Windows_Graphics_Imaging.BitmapTransformBridge.from(abi: ComPtr($3))
                let exifOrientationMode: UWP.ExifOrientationMode = $4
                let colorManagementMode: UWP.ColorManagementMode = $5
                let value = try __unwrapped__instance.getSoftwareBitmapAsync(pixelFormat, alphaMode, transform, exifOrientationMode, colorManagementMode)
                let valueWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper(value)
                valueWrapper?.copyTo($6)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IBitmapFrameWithSoftwareBitmapWrapper = InterfaceWrapperBase<__IMPL_Windows_Graphics_Imaging.IBitmapFrameWithSoftwareBitmapBridge>
    public class IBitmapProperties: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapProperties }

        public func SetPropertiesAsync(_ propertiesToSet: WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, UWP.BitmapTypedValue?>?>?) throws -> WindowsFoundation.AnyIAsyncAction? {
            let (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                let propertiesToSetWrapper = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper(propertiesToSet)
                let _propertiesToSet = try! propertiesToSetWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapProperties.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.SetPropertiesAsync(pThis, _propertiesToSet, &asyncInfoAbi))
                }
            }
            return __ABI_Windows_Foundation.IAsyncActionWrapper.unwrapFrom(abi: asyncInfo)
        }

    }

    public class IBitmapPropertiesView: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesView }

        open func GetPropertiesAsync(_ propertiesToRetrieve: WindowsFoundation.AnyIIterable<String>?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.BitmapPropertySet?>? {
            let (asyncInfo) = try ComPtrs.initialize { asyncInfoAbi in
                let propertiesToRetrieveWrapper = UWP.__x_ABI_C__FIIterable_1_HSTRINGWrapper(propertiesToRetrieve)
                let _propertiesToRetrieve = try! propertiesToRetrieveWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesView.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetPropertiesAsync(pThis, _propertiesToRetrieve, &asyncInfoAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetWrapper.unwrapFrom(abi: asyncInfo)
        }

    }

    internal static var IBitmapPropertiesViewVTable: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesViewVtbl = .init(
        QueryInterface: { IBitmapPropertiesViewWrapper.queryInterface($0, $1, $2) },
        AddRef: { IBitmapPropertiesViewWrapper.addRef($0) },
        Release: { IBitmapPropertiesViewWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_Graphics_Imaging.IBitmapPropertiesViewWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.Graphics.Imaging.IBitmapPropertiesView").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        GetPropertiesAsync: {
            do {
                guard let __unwrapped__instance = IBitmapPropertiesViewWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let propertiesToRetrieve: WindowsFoundation.AnyIIterable<String>? = UWP.__x_ABI_C__FIIterable_1_HSTRINGWrapper.unwrapFrom(abi: ComPtr($1))
                let asyncInfo = try __unwrapped__instance.getPropertiesAsync(propertiesToRetrieve)
                let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetWrapper(asyncInfo)
                asyncInfoWrapper?.copyTo($2)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IBitmapPropertiesViewWrapper = InterfaceWrapperBase<__IMPL_Windows_Graphics_Imaging.IBitmapPropertiesViewBridge>
    public class IBitmapTransform: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform }

        public func get_ScaledWidth() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScaledWidth(pThis, &value))
            }
            return value
        }

        public func put_ScaledWidth(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ScaledWidth(pThis, value))
            }
        }

        public func get_ScaledHeight() throws -> UInt32 {
            var value: UINT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_ScaledHeight(pThis, &value))
            }
            return value
        }

        public func put_ScaledHeight(_ value: UInt32) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_ScaledHeight(pThis, value))
            }
        }

        public func get_InterpolationMode() throws -> UWP.BitmapInterpolationMode {
            var value: __x_ABI_CWindows_CGraphics_CImaging_CBitmapInterpolationMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_InterpolationMode(pThis, &value))
            }
            return value
        }

        public func put_InterpolationMode(_ value: UWP.BitmapInterpolationMode) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_InterpolationMode(pThis, value))
            }
        }

        public func get_Flip() throws -> UWP.BitmapFlip {
            var value: __x_ABI_CWindows_CGraphics_CImaging_CBitmapFlip = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Flip(pThis, &value))
            }
            return value
        }

        public func put_Flip(_ value: UWP.BitmapFlip) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Flip(pThis, value))
            }
        }

        public func get_Rotation() throws -> UWP.BitmapRotation {
            var value: __x_ABI_CWindows_CGraphics_CImaging_CBitmapRotation = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Rotation(pThis, &value))
            }
            return value
        }

        public func put_Rotation(_ value: UWP.BitmapRotation) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Rotation(pThis, value))
            }
        }

        public func get_Bounds() throws -> UWP.BitmapBounds {
            var value: __x_ABI_CWindows_CGraphics_CImaging_CBitmapBounds = .init()
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Bounds(pThis, &value))
            }
            return .from(abi: value)
        }

        public func put_Bounds(_ value: UWP.BitmapBounds) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_Bounds(pThis, .from(swift: value)))
            }
        }

    }

    public class IBitmapTypedValue: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue }

        public func get_Value() throws -> Any? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &valueAbi))
                }
            }
            return __ABI_.AnyWrapper.unwrapFrom(abi: value)
        }

        public func get_Type() throws -> WindowsFoundation.PropertyType {
            var value: __x_ABI_CWindows_CFoundation_CPropertyType = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Type(pThis, &value))
            }
            return value
        }

    }

    public class IBitmapTypedValueFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValueFactory }

        public func Create(_ value: Any?, _ type: WindowsFoundation.PropertyType) throws -> IBitmapTypedValue {
            let (bitmapTypedValue) = try ComPtrs.initialize { bitmapTypedValueAbi in
                let valueWrapper = __ABI_.AnyWrapper(value)
                let _value = try! valueWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValueFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, _value, type, &bitmapTypedValueAbi))
                }
            }
            return IBitmapTypedValue(bitmapTypedValue!)
        }

    }

    public class IPixelDataProvider: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProvider }

        public func DetachPixelData() throws -> [UInt8] {
            var pixelData: WinRTArrayAbi<UINT8> = (0, nil)
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProvider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.DetachPixelData(pThis, &pixelData.count, &pixelData.start))
            }
            defer { CoTaskMemFree(pixelData.start) }
            return .from(abi: pixelData)

        }

    }

    public class ISoftwareBitmap: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap }

        public func get_BitmapPixelFormat() throws -> UWP.BitmapPixelFormat {
            var value: __x_ABI_CWindows_CGraphics_CImaging_CBitmapPixelFormat = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BitmapPixelFormat(pThis, &value))
            }
            return value
        }

        public func get_BitmapAlphaMode() throws -> UWP.BitmapAlphaMode {
            var value: __x_ABI_CWindows_CGraphics_CImaging_CBitmapAlphaMode = .init(0)
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_BitmapAlphaMode(pThis, &value))
            }
            return value
        }

        public func get_PixelWidth() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PixelWidth(pThis, &value))
            }
            return value
        }

        public func get_PixelHeight() throws -> Int32 {
            var value: INT32 = 0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PixelHeight(pThis, &value))
            }
            return value
        }

        public func get_IsReadOnly() throws -> Bool {
            var value: boolean = 0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_IsReadOnly(pThis, &value))
            }
            return .init(from: value)
        }

        public func put_DpiX(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DpiX(pThis, value))
            }
        }

        public func get_DpiX() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DpiX(pThis, &value))
            }
            return value
        }

        public func put_DpiY(_ value: Double) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.put_DpiY(pThis, value))
            }
        }

        public func get_DpiY() throws -> Double {
            var value: DOUBLE = 0.0
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DpiY(pThis, &value))
            }
            return value
        }

        public func LockBuffer(_ mode: UWP.BitmapBufferAccessMode) throws -> UWP.BitmapBuffer? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.LockBuffer(pThis, mode, &valueAbi))
                }
            }
            return __IMPL_Windows_Graphics_Imaging.BitmapBufferBridge.from(abi: value)
        }

        public func CopyTo(_ bitmap: UWP.SoftwareBitmap?) throws {
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CopyTo(pThis, RawPointer(bitmap)))
            }
        }

        public func CopyFromBuffer(_ buffer: UWP.AnyIBuffer?) throws {
            let bufferWrapper = __ABI_Windows_Storage_Streams.IBufferWrapper(buffer)
            let _buffer = try! bufferWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CopyFromBuffer(pThis, _buffer))
            }
        }

        public func CopyToBuffer(_ buffer: UWP.AnyIBuffer?) throws {
            let bufferWrapper = __ABI_Windows_Storage_Streams.IBufferWrapper(buffer)
            let _buffer = try! bufferWrapper?.toABI { $0 }
            _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.CopyToBuffer(pThis, _buffer))
            }
        }

        public func GetReadOnlyView() throws -> UWP.SoftwareBitmap? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetReadOnlyView(pThis, &valueAbi))
                }
            }
            return __IMPL_Windows_Graphics_Imaging.SoftwareBitmapBridge.from(abi: value)
        }

    }

    public class ISoftwareBitmapFactory: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory }

        public func Create(_ format: UWP.BitmapPixelFormat, _ width: Int32, _ height: Int32) throws -> ISoftwareBitmap {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Create(pThis, format, width, height, &valueAbi))
                }
            }
            return ISoftwareBitmap(value!)
        }

        public func CreateWithAlpha(_ format: UWP.BitmapPixelFormat, _ width: Int32, _ height: Int32, _ alpha: UWP.BitmapAlphaMode) throws -> ISoftwareBitmap {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapFactory.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateWithAlpha(pThis, format, width, height, alpha, &valueAbi))
                }
            }
            return ISoftwareBitmap(value!)
        }

    }

    public class ISoftwareBitmapStatics: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics }

        public func Copy(_ source: UWP.SoftwareBitmap?) throws -> UWP.SoftwareBitmap? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Copy(pThis, RawPointer(source), &valueAbi))
                }
            }
            return __IMPL_Windows_Graphics_Imaging.SoftwareBitmapBridge.from(abi: value)
        }

        public func Convert(_ source: UWP.SoftwareBitmap?, _ format: UWP.BitmapPixelFormat) throws -> UWP.SoftwareBitmap? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.Convert(pThis, RawPointer(source), format, &valueAbi))
                }
            }
            return __IMPL_Windows_Graphics_Imaging.SoftwareBitmapBridge.from(abi: value)
        }

        public func ConvertWithAlpha(_ source: UWP.SoftwareBitmap?, _ format: UWP.BitmapPixelFormat, _ alpha: UWP.BitmapAlphaMode) throws -> UWP.SoftwareBitmap? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.ConvertWithAlpha(pThis, RawPointer(source), format, alpha, &valueAbi))
                }
            }
            return __IMPL_Windows_Graphics_Imaging.SoftwareBitmapBridge.from(abi: value)
        }

        public func CreateCopyFromBuffer(_ source: UWP.AnyIBuffer?, _ format: UWP.BitmapPixelFormat, _ width: Int32, _ height: Int32) throws -> UWP.SoftwareBitmap? {
            let (value) = try ComPtrs.initialize { valueAbi in
                let sourceWrapper = __ABI_Windows_Storage_Streams.IBufferWrapper(source)
                let _source = try! sourceWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCopyFromBuffer(pThis, _source, format, width, height, &valueAbi))
                }
            }
            return __IMPL_Windows_Graphics_Imaging.SoftwareBitmapBridge.from(abi: value)
        }

        public func CreateCopyWithAlphaFromBuffer(_ source: UWP.AnyIBuffer?, _ format: UWP.BitmapPixelFormat, _ width: Int32, _ height: Int32, _ alpha: UWP.BitmapAlphaMode) throws -> UWP.SoftwareBitmap? {
            let (value) = try ComPtrs.initialize { valueAbi in
                let sourceWrapper = __ABI_Windows_Storage_Streams.IBufferWrapper(source)
                let _source = try! sourceWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCopyWithAlphaFromBuffer(pThis, _source, format, width, height, alpha, &valueAbi))
                }
            }
            return __IMPL_Windows_Graphics_Imaging.SoftwareBitmapBridge.from(abi: value)
        }

        public func CreateCopyFromSurfaceAsync(_ surface: UWP.AnyIDirect3DSurface?) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.SoftwareBitmap?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                let surfaceWrapper = __ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DSurfaceWrapper(surface)
                let _surface = try! surfaceWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCopyFromSurfaceAsync(pThis, _surface, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper.unwrapFrom(abi: value)
        }

        public func CreateCopyWithAlphaFromSurfaceAsync(_ surface: UWP.AnyIDirect3DSurface?, _ alpha: UWP.BitmapAlphaMode) throws -> WindowsFoundation.AnyIAsyncOperation<UWP.SoftwareBitmap?>? {
            let (value) = try ComPtrs.initialize { valueAbi in
                let surfaceWrapper = __ABI_Windows_Graphics_DirectX_Direct3D11.IDirect3DSurfaceWrapper(surface)
                let _surface = try! surfaceWrapper?.toABI { $0 }
                _ = try perform(as: __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmapStatics.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.CreateCopyWithAlphaFromSurfaceAsync(pThis, _surface, alpha, &valueAbi))
                }
            }
            return UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper.unwrapFrom(abi: value)
        }

    }

}
extension __x_ABI_CWindows_CGraphics_CImaging_CBitmapBounds {
        public static func from(swift: UWP.BitmapBounds) -> __x_ABI_CWindows_CGraphics_CImaging_CBitmapBounds {
            .init(X: swift.x, Y: swift.y, Width: swift.width, Height: swift.height)
        }
    }
    extension __x_ABI_CWindows_CGraphics_CImaging_CBitmapPlaneDescription {
        public static func from(swift: UWP.BitmapPlaneDescription) -> __x_ABI_CWindows_CGraphics_CImaging_CBitmapPlaneDescription {
            .init(StartIndex: swift.startIndex, Width: swift.width, Height: swift.height, Stride: swift.stride)
        }
    }
    extension __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize {
        public static func from(swift: UWP.BitmapSize) -> __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize {
            .init(Width: swift.width, Height: swift.height)
        }
    }
    