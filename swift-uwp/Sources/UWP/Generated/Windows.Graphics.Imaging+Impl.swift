// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

@_spi(WinRTInternal)
public enum __IMPL_Windows_Graphics_Imaging {
    public enum IBitmapFrameBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame
        public typealias SwiftABI = __ABI_Windows_Graphics_Imaging.IBitmapFrame
        public typealias SwiftProjection = AnyIBitmapFrame
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IBitmapFrameImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Graphics_Imaging.IBitmapFrameVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IBitmapFrameImpl: IBitmapFrame, WinRTAbiImpl {
        fileprivate typealias Bridge = IBitmapFrameBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframe.getthumbnailasync)
        fileprivate func getThumbnailAsync() throws -> WindowsFoundation.AnyIAsyncOperation<ImageStream?>! {
            try _default.GetThumbnailAsync()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframe.getpixeldataasync)
        fileprivate func getPixelDataAsync() throws -> WindowsFoundation.AnyIAsyncOperation<PixelDataProvider?>! {
            try _default.GetPixelDataAsync()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframe.getpixeldataasync)
        fileprivate func getPixelDataAsync(_ pixelFormat: BitmapPixelFormat, _ alphaMode: BitmapAlphaMode, _ transform: BitmapTransform!, _ exifOrientationMode: ExifOrientationMode, _ colorManagementMode: ColorManagementMode) throws -> WindowsFoundation.AnyIAsyncOperation<PixelDataProvider?>! {
            try _default.GetPixelDataTransformedAsync(pixelFormat, alphaMode, transform, exifOrientationMode, colorManagementMode)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframe.bitmapalphamode)
        fileprivate var bitmapAlphaMode : BitmapAlphaMode {
            get { try! _default.get_BitmapAlphaMode() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframe.bitmappixelformat)
        fileprivate var bitmapPixelFormat : BitmapPixelFormat {
            get { try! _default.get_BitmapPixelFormat() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframe.bitmapproperties)
        fileprivate var bitmapProperties : BitmapPropertiesView! {
            get { try! _default.get_BitmapProperties() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframe.dpix)
        fileprivate var dpiX : Double {
            get { try! _default.get_DpiX() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframe.dpiy)
        fileprivate var dpiY : Double {
            get { try! _default.get_DpiY() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframe.orientedpixelheight)
        fileprivate var orientedPixelHeight : UInt32 {
            get { try! _default.get_OrientedPixelHeight() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframe.orientedpixelwidth)
        fileprivate var orientedPixelWidth : UInt32 {
            get { try! _default.get_OrientedPixelWidth() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframe.pixelheight)
        fileprivate var pixelHeight : UInt32 {
            get { try! _default.get_PixelHeight() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframe.pixelwidth)
        fileprivate var pixelWidth : UInt32 {
            get { try! _default.get_PixelWidth() }
        }

    }

    public enum IBitmapFrameWithSoftwareBitmapBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrameWithSoftwareBitmap
        public typealias SwiftABI = __ABI_Windows_Graphics_Imaging.IBitmapFrameWithSoftwareBitmap
        public typealias SwiftProjection = AnyIBitmapFrameWithSoftwareBitmap
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IBitmapFrameWithSoftwareBitmapImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Graphics_Imaging.IBitmapFrameWithSoftwareBitmapVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IBitmapFrameWithSoftwareBitmapImpl: IBitmapFrameWithSoftwareBitmap, WinRTAbiImpl {
        fileprivate typealias Bridge = IBitmapFrameWithSoftwareBitmapBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframewithsoftwarebitmap.getsoftwarebitmapasync)
        fileprivate func getSoftwareBitmapAsync() throws -> WindowsFoundation.AnyIAsyncOperation<SoftwareBitmap?>! {
            try _default.GetSoftwareBitmapAsync()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframewithsoftwarebitmap.getsoftwarebitmapasync)
        fileprivate func getSoftwareBitmapAsync(_ pixelFormat: BitmapPixelFormat, _ alphaMode: BitmapAlphaMode) throws -> WindowsFoundation.AnyIAsyncOperation<SoftwareBitmap?>! {
            try _default.GetSoftwareBitmapConvertedAsync(pixelFormat, alphaMode)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframewithsoftwarebitmap.getsoftwarebitmapasync)
        fileprivate func getSoftwareBitmapAsync(_ pixelFormat: BitmapPixelFormat, _ alphaMode: BitmapAlphaMode, _ transform: BitmapTransform!, _ exifOrientationMode: ExifOrientationMode, _ colorManagementMode: ColorManagementMode) throws -> WindowsFoundation.AnyIAsyncOperation<SoftwareBitmap?>! {
            try _default.GetSoftwareBitmapTransformedAsync(pixelFormat, alphaMode, transform, exifOrientationMode, colorManagementMode)
        }

        private lazy var _IBitmapFrame: __ABI_Windows_Graphics_Imaging.IBitmapFrame! = getInterfaceForCaching()
        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframewithsoftwarebitmap.getthumbnailasync)
        fileprivate func getThumbnailAsync() throws -> WindowsFoundation.AnyIAsyncOperation<ImageStream?>! {
            try _IBitmapFrame.GetThumbnailAsync()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframewithsoftwarebitmap.getpixeldataasync)
        fileprivate func getPixelDataAsync() throws -> WindowsFoundation.AnyIAsyncOperation<PixelDataProvider?>! {
            try _IBitmapFrame.GetPixelDataAsync()
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframewithsoftwarebitmap.getpixeldataasync)
        fileprivate func getPixelDataAsync(_ pixelFormat: BitmapPixelFormat, _ alphaMode: BitmapAlphaMode, _ transform: BitmapTransform!, _ exifOrientationMode: ExifOrientationMode, _ colorManagementMode: ColorManagementMode) throws -> WindowsFoundation.AnyIAsyncOperation<PixelDataProvider?>! {
            try _IBitmapFrame.GetPixelDataTransformedAsync(pixelFormat, alphaMode, transform, exifOrientationMode, colorManagementMode)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframewithsoftwarebitmap.bitmapalphamode)
        fileprivate var bitmapAlphaMode : BitmapAlphaMode {
            get { try! _IBitmapFrame.get_BitmapAlphaMode() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframewithsoftwarebitmap.bitmappixelformat)
        fileprivate var bitmapPixelFormat : BitmapPixelFormat {
            get { try! _IBitmapFrame.get_BitmapPixelFormat() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframewithsoftwarebitmap.bitmapproperties)
        fileprivate var bitmapProperties : BitmapPropertiesView! {
            get { try! _IBitmapFrame.get_BitmapProperties() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframewithsoftwarebitmap.dpix)
        fileprivate var dpiX : Double {
            get { try! _IBitmapFrame.get_DpiX() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframewithsoftwarebitmap.dpiy)
        fileprivate var dpiY : Double {
            get { try! _IBitmapFrame.get_DpiY() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframewithsoftwarebitmap.orientedpixelheight)
        fileprivate var orientedPixelHeight : UInt32 {
            get { try! _IBitmapFrame.get_OrientedPixelHeight() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframewithsoftwarebitmap.orientedpixelwidth)
        fileprivate var orientedPixelWidth : UInt32 {
            get { try! _IBitmapFrame.get_OrientedPixelWidth() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframewithsoftwarebitmap.pixelheight)
        fileprivate var pixelHeight : UInt32 {
            get { try! _IBitmapFrame.get_PixelHeight() }
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmapframewithsoftwarebitmap.pixelwidth)
        fileprivate var pixelWidth : UInt32 {
            get { try! _IBitmapFrame.get_PixelWidth() }
        }

    }

    public enum IBitmapPropertiesViewBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesView
        public typealias SwiftABI = __ABI_Windows_Graphics_Imaging.IBitmapPropertiesView
        public typealias SwiftProjection = AnyIBitmapPropertiesView
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IBitmapPropertiesViewImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Graphics_Imaging.IBitmapPropertiesViewVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IBitmapPropertiesViewImpl: IBitmapPropertiesView, WinRTAbiImpl {
        fileprivate typealias Bridge = IBitmapPropertiesViewBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

        /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.graphics.imaging.ibitmappropertiesview.getpropertiesasync)
        fileprivate func getPropertiesAsync(_ propertiesToRetrieve: WindowsFoundation.AnyIIterable<String>!) throws -> WindowsFoundation.AnyIAsyncOperation<BitmapPropertySet?>! {
            try _default.GetPropertiesAsync(propertiesToRetrieve)
        }

    }

    public enum BitmapBufferBridge: AbiBridge {
        public typealias SwiftProjection = BitmapBuffer
        public typealias CABI = __x_ABI_CWindows_CGraphics_CImaging_CIBitmapBuffer
        public static func from(abi: ComPtr<__x_ABI_CWindows_CGraphics_CImaging_CIBitmapBuffer>?) -> BitmapBuffer? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum BitmapCodecInformationBridge: AbiBridge {
        public typealias SwiftProjection = BitmapCodecInformation
        public typealias CABI = __x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation
        public static func from(abi: ComPtr<__x_ABI_CWindows_CGraphics_CImaging_CIBitmapCodecInformation>?) -> BitmapCodecInformation? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum BitmapDecoderBridge: AbiBridge {
        public typealias SwiftProjection = BitmapDecoder
        public typealias CABI = __x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder
        public static func from(abi: ComPtr<__x_ABI_CWindows_CGraphics_CImaging_CIBitmapDecoder>?) -> BitmapDecoder? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum BitmapEncoderBridge: AbiBridge {
        public typealias SwiftProjection = BitmapEncoder
        public typealias CABI = __x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder
        public static func from(abi: ComPtr<__x_ABI_CWindows_CGraphics_CImaging_CIBitmapEncoder>?) -> BitmapEncoder? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum BitmapFrameBridge: AbiBridge {
        public typealias SwiftProjection = BitmapFrame
        public typealias CABI = __x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame
        public static func from(abi: ComPtr<__x_ABI_CWindows_CGraphics_CImaging_CIBitmapFrame>?) -> BitmapFrame? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum BitmapPropertiesBridge: AbiBridge {
        public typealias SwiftProjection = BitmapProperties
        public typealias CABI = __x_ABI_CWindows_CGraphics_CImaging_CIBitmapProperties
        public static func from(abi: ComPtr<__x_ABI_CWindows_CGraphics_CImaging_CIBitmapProperties>?) -> BitmapProperties? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum BitmapPropertiesViewBridge: AbiBridge {
        public typealias SwiftProjection = BitmapPropertiesView
        public typealias CABI = __x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesView
        public static func from(abi: ComPtr<__x_ABI_CWindows_CGraphics_CImaging_CIBitmapPropertiesView>?) -> BitmapPropertiesView? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum BitmapPropertySetBridge: AbiBridge {
        public typealias SwiftProjection = BitmapPropertySet
        public typealias CABI = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue
        public static func from(abi: ComPtr<__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue>?) -> BitmapPropertySet? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum BitmapTransformBridge: AbiBridge {
        public typealias SwiftProjection = BitmapTransform
        public typealias CABI = __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform
        public static func from(abi: ComPtr<__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTransform>?) -> BitmapTransform? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum BitmapTypedValueBridge: AbiBridge {
        public typealias SwiftProjection = BitmapTypedValue
        public typealias CABI = __x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue
        public static func from(abi: ComPtr<__x_ABI_CWindows_CGraphics_CImaging_CIBitmapTypedValue>?) -> BitmapTypedValue? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum ImageStreamBridge: AbiBridge {
        public typealias SwiftProjection = ImageStream
        public typealias CABI = __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType
        public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType>?) -> ImageStream? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum PixelDataProviderBridge: AbiBridge {
        public typealias SwiftProjection = PixelDataProvider
        public typealias CABI = __x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProvider
        public static func from(abi: ComPtr<__x_ABI_CWindows_CGraphics_CImaging_CIPixelDataProvider>?) -> PixelDataProvider? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum SoftwareBitmapBridge: AbiBridge {
        public typealias SwiftProjection = SoftwareBitmap
        public typealias CABI = __x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap
        public static func from(abi: ComPtr<__x_ABI_CWindows_CGraphics_CImaging_CISoftwareBitmap>?) -> SoftwareBitmap? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
extension BitmapBounds: WinRTBridgeable {
    public typealias ABI = __x_ABI_CWindows_CGraphics_CImaging_CBitmapBounds
    public static func from(abi: ABI) -> Self {
        .init(x: abi.X, y: abi.Y, width: abi.Width, height: abi.Height)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

@_spi(WinRTInternal)
extension BitmapPlaneDescription: WinRTBridgeable {
    public typealias ABI = __x_ABI_CWindows_CGraphics_CImaging_CBitmapPlaneDescription
    public static func from(abi: ABI) -> Self {
        .init(startIndex: abi.StartIndex, width: abi.Width, height: abi.Height, stride: abi.Stride)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

@_spi(WinRTInternal)
extension BitmapSize: WinRTBridgeable {
    public typealias ABI = __x_ABI_CWindows_CGraphics_CImaging_CBitmapSize
    public static func from(abi: ABI) -> Self {
        .init(width: abi.Width, height: abi.Height)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

@_spi(WinRTInternal)
public class IBitmapFrameMaker: MakeFromAbi {
    public typealias SwiftType = AnyIBitmapFrame
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_Graphics_Imaging.IBitmapFrame = try! abi.QueryInterface()
        return __IMPL_Windows_Graphics_Imaging.IBitmapFrameBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class IBitmapFrameWithSoftwareBitmapMaker: MakeFromAbi {
    public typealias SwiftType = AnyIBitmapFrameWithSoftwareBitmap
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_Graphics_Imaging.IBitmapFrameWithSoftwareBitmap = try! abi.QueryInterface()
        return __IMPL_Windows_Graphics_Imaging.IBitmapFrameWithSoftwareBitmapBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class IBitmapPropertiesViewMaker: MakeFromAbi {
    public typealias SwiftType = AnyIBitmapPropertiesView
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_Graphics_Imaging.IBitmapPropertiesView = try! abi.QueryInterface()
        return __IMPL_Windows_Graphics_Imaging.IBitmapPropertiesViewBridge.from(abi: RawPointer(swiftAbi))!
    }
}
@_spi(WinRTInternal)
public class BitmapBufferMaker: MakeFromAbi {
    public typealias SwiftType = BitmapBuffer
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return BitmapBuffer(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class BitmapCodecInformationMaker: MakeFromAbi {
    public typealias SwiftType = BitmapCodecInformation
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return BitmapCodecInformation(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class BitmapDecoderMaker: MakeFromAbi {
    public typealias SwiftType = BitmapDecoder
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return BitmapDecoder(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class BitmapEncoderMaker: MakeFromAbi {
    public typealias SwiftType = BitmapEncoder
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return BitmapEncoder(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class BitmapFrameMaker: MakeFromAbi {
    public typealias SwiftType = BitmapFrame
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return BitmapFrame(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class BitmapPropertiesMaker: MakeFromAbi {
    public typealias SwiftType = BitmapProperties
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return BitmapProperties(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class BitmapPropertiesViewMaker: MakeFromAbi {
    public typealias SwiftType = BitmapPropertiesView
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return BitmapPropertiesView(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class BitmapPropertySetMaker: MakeFromAbi {
    public typealias SwiftType = BitmapPropertySet
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return BitmapPropertySet(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class BitmapTransformMaker: MakeFromAbi {
    public typealias SwiftType = BitmapTransform
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return BitmapTransform(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class BitmapTypedValueMaker: MakeFromAbi {
    public typealias SwiftType = BitmapTypedValue
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return BitmapTypedValue(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class ImageStreamMaker: MakeFromAbi {
    public typealias SwiftType = ImageStream
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return ImageStream(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class PixelDataProviderMaker: MakeFromAbi {
    public typealias SwiftType = PixelDataProvider
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return PixelDataProvider(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class SoftwareBitmapMaker: MakeFromAbi {
    public typealias SwiftType = SoftwareBitmap
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return SoftwareBitmap(fromAbi: abi)
    }
}
