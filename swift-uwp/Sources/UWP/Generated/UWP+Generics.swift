// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0x3f08262e, Data2: 0xa2e1, Data3: 0x5134, Data4: ( 0x92,0x97,0xe9,0x21,0x1f,0x48,0x1a,0x2d ))// 3f08262e-a2e1-5134-9297-e9211f481a2d
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectable {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectableVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectableVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectableWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<Any?>? = UWP.__x_ABI_C__FIAsyncOperation_1_IInspectableWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectableWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectableBridge>
public class AsyncOperationCompletedHandlerAny: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectable }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<Any?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1_IInspectableWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectableBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<Any?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectable
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerAny

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean: WindowsFoundation.IID {
    .init(Data1: 0xc1d3d1a2, Data2: 0xae17, Data3: 0x5a5f, Data4: ( 0xb5,0xa2,0xbd,0xcc,0x88,0x44,0x88,0x9a ))// c1d3d1a2-ae17-5a5f-b5a2-bdcc8844889a
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<Bool>? = UWP.__x_ABI_C__FIAsyncOperation_1_booleanWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanBridge>
public class AsyncOperationCompletedHandlerBool: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<Bool>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1_booleanWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<Bool>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerBool

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING: WindowsFoundation.IID {
    .init(Data1: 0xb79a741f, Data2: 0x7fb5, Data3: 0x50ae, Data4: ( 0x9e,0x99,0x91,0x12,0x01,0xec,0x3d,0x41 ))// b79a741f-7fb5-50ae-9e99-911201ec3d41
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRINGVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRINGVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRINGVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRINGWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRINGWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRINGWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<String>? = UWP.__x_ABI_C__FIAsyncOperation_1_HSTRINGWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRINGWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRINGBridge>
public class AsyncOperationCompletedHandlerString: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<String>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1_HSTRINGWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRINGBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<String>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRING
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerString

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1_UINT32: WindowsFoundation.IID {
    .init(Data1: 0x9343b6e7, Data2: 0xe3d2, Data3: 0x5e4a, Data4: ( 0xab,0x2d,0x2b,0xce,0x49,0x19,0xa6,0xa4 ))// 9343b6e7-e3d2-5e4a-ab2d-2bce4919a6a4
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1_UINT32 {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1_UINT32VTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1_UINT32VTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1_UINT32Vtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1_UINT32Wrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1_UINT32Wrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1_UINT32Wrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1_UINT32Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UInt32>? = UWP.__x_ABI_C__FIAsyncOperation_1_UINT32Wrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1_UINT32Wrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1_UINT32Bridge>
public class AsyncOperationCompletedHandlerUInt32: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1_UINT32 }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UInt32>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1_UINT32Wrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1_UINT32.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1_UINT32Bridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UInt32>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1_UINT32
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerUInt32

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReason: WindowsFoundation.IID {
    .init(Data1: 0xdcec478a, Data2: 0x9f27, Data3: 0x5c5d, Data4: ( 0xaf,0xdb,0xc9,0x1a,0xee,0x4f,0x1f,0x02 ))// dcec478a-9f27-5c5d-afdb-c91aee4f1f02
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReason {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.AppRestartFailureReason>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonBridge>
public class AsyncOperationCompletedHandlerAppRestartFailureReason: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReason }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.AppRestartFailureReason>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReason.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.AppRestartFailureReason>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReason
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerAppRestartFailureReason

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResult: WindowsFoundation.IID {
    .init(Data1: 0x841da82d, Data2: 0xa32c, Data3: 0x5997, Data4: ( 0x84,0x50,0xf5,0x4a,0xf1,0xd5,0x47,0x7e ))// 841da82d-a32c-5997-8450-f54af1d5477e
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResult {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.ClipboardHistoryItemsResult?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultBridge>
public class AsyncOperationCompletedHandlerClipboardHistoryItemsResult: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResult }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.ClipboardHistoryItemsResult?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.ClipboardHistoryItemsResult?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResult
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerClipboardHistoryItemsResult

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference: WindowsFoundation.IID {
    .init(Data1: 0xd4cb6b80, Data2: 0x821a, Data3: 0x5a7b, Data4: ( 0x89,0x8d,0xd5,0x89,0x17,0xb3,0x1a,0x36 ))// d4cb6b80-821a-5a7b-898d-d58917b31a36
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIMapView<String, UWP.RandomAccessStreamReference?>?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge>
public class AsyncOperationCompletedHandlerIMapViewString_RandomAccessStreamReference: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIMapView<String, UWP.RandomAccessStreamReference?>?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<WindowsFoundation.AnyIMapView<String, UWP.RandomAccessStreamReference?>?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerIMapViewString_RandomAccessStreamReference

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMap_2_HSTRING_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0x7344f356, Data2: 0x8399, Data3: 0x5756, Data4: ( 0xa2,0xf8,0xab,0xd5,0x0c,0x41,0x46,0xff ))// 7344f356-8399-5756-a2f8-abd50c4146ff
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMap_2_HSTRING_IInspectable {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMap_2_HSTRING_IInspectableVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMap_2_HSTRING_IInspectableVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMap_2_HSTRING_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIMap<String, Any?>?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMap_2_HSTRING_IInspectableBridge>
public class AsyncOperationCompletedHandlerIMapString_Any: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMap_2_HSTRING_IInspectable }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIMap<String, Any?>?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMap_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMap_2_HSTRING_IInspectableBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<WindowsFoundation.AnyIMap<String, Any?>?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMap_2_HSTRING_IInspectable
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerIMapString_Any

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySet: WindowsFoundation.IID {
    .init(Data1: 0x5075a55f, Data2: 0x68ba, Data3: 0x56f2, Data4: ( 0x97,0xe6,0x9b,0x1c,0xbf,0xa2,0xc5,0xf2 ))// 5075a55f-68ba-56f2-97e6-9b1cbfa2c5f2
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySet {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySetVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySetVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySetVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySetWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySetWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySetWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySetWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIPropertySet?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySetWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySetWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySetBridge>
public class AsyncOperationCompletedHandlerIPropertySet: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySet }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIPropertySet?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySetWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySet.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySetBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<WindowsFoundation.AnyIPropertySet?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySet
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerIPropertySet

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo: WindowsFoundation.IID {
    .init(Data1: 0x07f25b6f, Data2: 0xf054, Data3: 0x5649, Data4: ( 0xa5,0xce,0xb3,0x48,0xdd,0xc6,0x18,0xb6 ))// 07f25b6f-f054-5649-a5ce-b348ddc618b6
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.AppInfo?>?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoBridge>
public class AsyncOperationCompletedHandlerIVectorViewAppInfo: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.AppInfo?>?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<WindowsFoundation.AnyIVectorView<UWP.AppInfo?>?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerIVectorViewAppInfo

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem: WindowsFoundation.IID {
    .init(Data1: 0x51436e75, Data2: 0xace1, Data3: 0x5a68, Data4: ( 0xb2,0x60,0xf8,0x43,0xb8,0x46,0xf0,0xdb ))// 51436e75-ace1-5a68-b260-f843b846f0db
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.AnyIStorageItem?>?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemBridge>
public class AsyncOperationCompletedHandlerIVectorViewIStorageItem: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.AnyIStorageItem?>?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<WindowsFoundation.AnyIVectorView<UWP.AnyIStorageItem?>?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerIVectorViewIStorageItem

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFile: WindowsFoundation.IID {
    .init(Data1: 0xcb4206c5, Data2: 0x0988, Data3: 0x5104, Data4: ( 0xaf,0xa9,0x25,0x3c,0x29,0x8f,0x86,0xfd ))// cb4206c5-0988-5104-afa9-253c298f86fd
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFile {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.StorageFile?>?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileBridge>
public class AsyncOperationCompletedHandlerIVectorViewStorageFile: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFile }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.StorageFile?>?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<WindowsFoundation.AnyIVectorView<UWP.StorageFile?>?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFile
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerIVectorViewStorageFile

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolder: WindowsFoundation.IID {
    .init(Data1: 0xed2d1d9b, Data2: 0x26ec, Data3: 0x5be7, Data4: ( 0xa8,0xa3,0x56,0x45,0x89,0x33,0xd2,0x5f ))// ed2d1d9b-26ec-5be7-a8a3-56458933d25f
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolder {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.StorageFolder?>?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderBridge>
public class AsyncOperationCompletedHandlerIVectorViewStorageFolder: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolder }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.StorageFolder?>?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolder.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<WindowsFoundation.AnyIVectorView<UWP.StorageFolder?>?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolder
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerIVectorViewStorageFolder

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChange: WindowsFoundation.IID {
    .init(Data1: 0xab9cea41, Data2: 0x6df8, Data3: 0x535d, Data4: ( 0x81,0x71,0x46,0xaf,0xf1,0x87,0x15,0x8f ))// ab9cea41-6df8-535d-8171-46aff187158f
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChange {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.StorageLibraryChange?>?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeBridge>
public class AsyncOperationCompletedHandlerIVectorViewStorageLibraryChange: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChange }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.StorageLibraryChange?>?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChange.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<WindowsFoundation.AnyIVectorView<UWP.StorageLibraryChange?>?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChange
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerIVectorViewStorageLibraryChange

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser: WindowsFoundation.IID {
    .init(Data1: 0x09870533, Data2: 0xf7cb, Data3: 0x569c, Data4: ( 0xb7,0x97,0xdc,0xb4,0x8d,0xeb,0xd7,0x09 ))// 09870533-f7cb-569c-b797-dcb48debd709
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.User?>?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserBridge>
public class AsyncOperationCompletedHandlerIVectorViewUser: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.User?>?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<WindowsFoundation.AnyIVectorView<UWP.User?>?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerIVectorViewUser

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CFoundation__CUri: WindowsFoundation.IID {
    .init(Data1: 0xad46f1cc, Data2: 0x2bb0, Data3: 0x585c, Data4: ( 0x98,0x85,0x03,0xc2,0x78,0x0d,0x4d,0x58 ))// ad46f1cc-2bb0-585c-9885-03c2780d4d58
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CFoundation__CUri {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CFoundation__CUriVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CFoundation__CUriVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CFoundation__CUriVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CFoundation__CUriWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CFoundation__CUriWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CFoundation__CUriWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CFoundation__CUriWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.Uri?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CFoundation__CUriWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CFoundation__CUriWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CFoundation__CUriBridge>
public class AsyncOperationCompletedHandlerUri: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CFoundation__CUri }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.Uri?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CFoundation__CUriWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CFoundation__CUri.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CFoundation__CUriBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<WindowsFoundation.Uri?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CFoundation__CUri
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerUri

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder: WindowsFoundation.IID {
    .init(Data1: 0xbb6514f2, Data2: 0x3cfb, Data3: 0x566f, Data4: ( 0x82,0xbc,0x60,0xaa,0xbd,0x30,0x2d,0x53 ))// bb6514f2-3cfb-566f-82bc-60aabd302d53
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.BitmapDecoder?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderBridge>
public class AsyncOperationCompletedHandlerBitmapDecoder: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.BitmapDecoder?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.BitmapDecoder?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerBitmapDecoder

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder: WindowsFoundation.IID {
    .init(Data1: 0x5df1afc5, Data2: 0x478d, Data3: 0x55dd, Data4: ( 0xb3,0x17,0x02,0x42,0x74,0x06,0x2a,0x0d ))// 5df1afc5-478d-55dd-b317-024274062a0d
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.BitmapEncoder?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderBridge>
public class AsyncOperationCompletedHandlerBitmapEncoder: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.BitmapEncoder?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.BitmapEncoder?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerBitmapEncoder

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame: WindowsFoundation.IID {
    .init(Data1: 0x2817455a, Data2: 0x983f, Data3: 0x5a06, Data4: ( 0x9f,0xe4,0xfb,0x96,0x37,0x68,0x43,0x20 ))// 2817455a-983f-5a06-9fe4-fb9637684320
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.BitmapFrame?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameBridge>
public class AsyncOperationCompletedHandlerBitmapFrame: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.BitmapFrame?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.BitmapFrame?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerBitmapFrame

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet: WindowsFoundation.IID {
    .init(Data1: 0xa8325bd7, Data2: 0xa3be, Data3: 0x5881, Data4: ( 0x9f,0xa7,0x04,0xce,0xef,0xb9,0xdc,0x2f ))// a8325bd7-a3be-5881-9fa7-04ceefb9dc2f
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.BitmapPropertySet?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetBridge>
public class AsyncOperationCompletedHandlerBitmapPropertySet: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.BitmapPropertySet?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.BitmapPropertySet?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerBitmapPropertySet

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream: WindowsFoundation.IID {
    .init(Data1: 0x29bb8288, Data2: 0x4462, Data3: 0x516e, Data4: ( 0xa6,0x75,0x8c,0x92,0x35,0xc4,0x29,0x94 ))// 29bb8288-4462-516e-a675-8c9235c42994
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.ImageStream?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamBridge>
public class AsyncOperationCompletedHandlerImageStream: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.ImageStream?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.ImageStream?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerImageStream

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider: WindowsFoundation.IID {
    .init(Data1: 0x37bdf4be, Data2: 0x2f39, Data3: 0x592c, Data4: ( 0xa4,0xf7,0xd1,0x6a,0x09,0xd2,0xb2,0xdb ))// 37bdf4be-2f39-592c-a4f7-d16a09d2b2db
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.PixelDataProvider?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderBridge>
public class AsyncOperationCompletedHandlerPixelDataProvider: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.PixelDataProvider?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.PixelDataProvider?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerPixelDataProvider

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap: WindowsFoundation.IID {
    .init(Data1: 0xb699b653, Data2: 0x33ed, Data3: 0x5e2d, Data4: ( 0xa7,0x5f,0x02,0xbf,0x90,0xe3,0x26,0x19 ))// b699b653-33ed-5e2d-a75f-02bf90e32619
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.SoftwareBitmap?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapBridge>
public class AsyncOperationCompletedHandlerSoftwareBitmap: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.SoftwareBitmap?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.SoftwareBitmap?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerSoftwareBitmap

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResult: WindowsFoundation.IID {
    .init(Data1: 0x2833ba54, Data2: 0xa4e1, Data3: 0x5c2d, Data4: ( 0x8a,0x7a,0x13,0x6e,0x85,0x10,0xc7,0x8b ))// 2833ba54-a4e1-5c2d-8a7a-136e8510c78b
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResult {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.ProtectionPolicyEvaluationResult>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultBridge>
public class AsyncOperationCompletedHandlerProtectionPolicyEvaluationResult: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResult }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.ProtectionPolicyEvaluationResult>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.ProtectionPolicyEvaluationResult>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResult
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerProtectionPolicyEvaluationResult

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CApplicationData: WindowsFoundation.IID {
    .init(Data1: 0xabafe590, Data2: 0x65fe, Data3: 0x520a, Data4: ( 0x9d,0x7c,0x6a,0xb5,0xf1,0x88,0x22,0x37 ))// abafe590-65fe-520a-9d7c-6ab5f1882237
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CApplicationData {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CApplicationDataVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CApplicationDataVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CApplicationDataVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CApplicationDataWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CApplicationDataWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CApplicationDataWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CApplicationDataWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.ApplicationData?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CApplicationDataWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CApplicationDataWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CApplicationDataBridge>
public class AsyncOperationCompletedHandlerApplicationData: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CApplicationData }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.ApplicationData?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CApplicationDataWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CApplicationData.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CApplicationDataBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.ApplicationData?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CApplicationData
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerApplicationData

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicProperties: WindowsFoundation.IID {
    .init(Data1: 0xc8659aae, Data2: 0x4926, Data3: 0x52ad, Data4: ( 0x8f,0x60,0xd8,0x9f,0xe5,0xa8,0xdf,0x5f ))// c8659aae-4926-52ad-8f60-d89fe5a8df5f
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicProperties {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.BasicProperties?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesBridge>
public class AsyncOperationCompletedHandlerBasicProperties: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicProperties }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.BasicProperties?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicProperties.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.BasicProperties?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicProperties
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerBasicProperties

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentProperties: WindowsFoundation.IID {
    .init(Data1: 0x4452ed4c, Data2: 0x642b, Data3: 0x501b, Data4: ( 0x96,0x17,0x7d,0x68,0xb4,0xac,0x3c,0x66 ))// 4452ed4c-642b-501b-9617-7d68b4ac3c66
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentProperties {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.DocumentProperties?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesBridge>
public class AsyncOperationCompletedHandlerDocumentProperties: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentProperties }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.DocumentProperties?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentProperties.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.DocumentProperties?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentProperties
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerDocumentProperties

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CImageProperties: WindowsFoundation.IID {
    .init(Data1: 0xc63729bc, Data2: 0xe4c3, Data3: 0x564c, Data4: ( 0xb1,0x37,0x2c,0xb4,0xf5,0x96,0x6a,0x83 ))// c63729bc-e4c3-564c-b137-2cb4f5966a83
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CImageProperties {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.ImageProperties?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesBridge>
public class AsyncOperationCompletedHandlerImageProperties: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CImageProperties }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.ImageProperties?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CImageProperties.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.ImageProperties?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CImageProperties
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerImageProperties

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicProperties: WindowsFoundation.IID {
    .init(Data1: 0xd84e1312, Data2: 0xd661, Data3: 0x5b7f, Data4: ( 0x95,0x66,0x74,0x21,0xbd,0xed,0xc1,0xea ))// d84e1312-d661-5b7f-9566-7421bdedc1ea
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicProperties {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.MusicProperties?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesBridge>
public class AsyncOperationCompletedHandlerMusicProperties: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicProperties }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.MusicProperties?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicProperties.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.MusicProperties?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicProperties
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerMusicProperties

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnail: WindowsFoundation.IID {
    .init(Data1: 0x6d0036f2, Data2: 0xa8a8, Data3: 0x505d, Data4: ( 0xb0,0x42,0xd0,0x87,0xdc,0x1f,0xc1,0xb7 ))// 6d0036f2-a8a8-505d-b042-d087dc1fc1b7
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnail {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.StorageItemThumbnail?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailBridge>
public class AsyncOperationCompletedHandlerStorageItemThumbnail: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnail }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.StorageItemThumbnail?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnail.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.StorageItemThumbnail?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnail
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerStorageItemThumbnail

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoProperties: WindowsFoundation.IID {
    .init(Data1: 0x43401d34, Data2: 0x61ab, Data3: 0x5cf2, Data4: ( 0x92,0x1f,0x55,0xb6,0x16,0x63,0x1d,0x1d ))// 43401d34-61ab-5cf2-921f-55b616631d1d
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoProperties {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.VideoProperties?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesBridge>
public class AsyncOperationCompletedHandlerVideoProperties: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoProperties }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.VideoProperties?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoProperties.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.VideoProperties?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoProperties
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerVideoProperties

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CIStorageItem: WindowsFoundation.IID {
    .init(Data1: 0x92c3102f, Data2: 0xa327, Data3: 0x5318, Data4: ( 0xa6,0xc1,0x76,0xf6,0xb2,0xa0,0xab,0xfb ))// 92c3102f-a327-5318-a6c1-76f6b2a0abfb
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CIStorageItem {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CIStorageItemVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CIStorageItemVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CIStorageItemVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.AnyIStorageItem?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CIStorageItemBridge>
public class AsyncOperationCompletedHandlerIStorageItem: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CIStorageItem }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.AnyIStorageItem?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CIStorageItemBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.AnyIStorageItem?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CIStorageItem
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerIStorageItem

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CSearch__CIndexedState: WindowsFoundation.IID {
    .init(Data1: 0xb67a3cba, Data2: 0xf5f7, Data3: 0x5e51, Data4: ( 0x96,0x8a,0x38,0x51,0x26,0xd1,0xf9,0x18 ))// b67a3cba-f5f7-5e51-968a-385126d1f918
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CSearch__CIndexedState {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.IndexedState>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateBridge>
public class AsyncOperationCompletedHandlerIndexedState: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CSearch__CIndexedState }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.IndexedState>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CSearch__CIndexedState.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.IndexedState>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CSearch__CIndexedState
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerIndexedState

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFile: WindowsFoundation.IID {
    .init(Data1: 0xe521c894, Data2: 0x2c26, Data3: 0x5946, Data4: ( 0x9e,0x61,0x2b,0x5e,0x18,0x8d,0x01,0xed ))// e521c894-2c26-5946-9e61-2b5e188d01ed
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFile {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFileVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFileVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFileVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.StorageFile?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFileWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFileBridge>
public class AsyncOperationCompletedHandlerStorageFile: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFile }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.StorageFile?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFileBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.StorageFile?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFile
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerStorageFile

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFolder: WindowsFoundation.IID {
    .init(Data1: 0xc211026e, Data2: 0x9e63, Data3: 0x5452, Data4: ( 0xba,0x54,0x3a,0x07,0xd6,0xa9,0x68,0x74 ))// c211026e-9e63-5452-ba54-3a07d6a96874
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFolder {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFolderVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFolderVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFolderVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.StorageFolder?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFolderBridge>
public class AsyncOperationCompletedHandlerStorageFolder: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFolder }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.StorageFolder?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFolder.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFolderBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.StorageFolder?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFolder
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerStorageFolder

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageStreamTransaction: WindowsFoundation.IID {
    .init(Data1: 0xd11739e6, Data2: 0x2995, Data3: 0x5d33, Data4: ( 0xbf,0xff,0x51,0xb6,0x04,0x1f,0x68,0xc1 ))// d11739e6-2995-5d33-bfff-51b6041f68c1
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageStreamTransaction {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.StorageStreamTransaction?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionBridge>
public class AsyncOperationCompletedHandlerStorageStreamTransaction: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageStreamTransaction }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.StorageStreamTransaction?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageStreamTransaction.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.StorageStreamTransaction?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageStreamTransaction
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerStorageStreamTransaction

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIInputStream: WindowsFoundation.IID {
    .init(Data1: 0xd0bd0125, Data2: 0x9049, Data3: 0x57a3, Data4: ( 0xbd,0x66,0xe2,0x52,0x5d,0x98,0xc8,0x14 ))// d0bd0125-9049-57a3-bd66-e2525d98c814
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIInputStream {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.AnyIInputStream?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamBridge>
public class AsyncOperationCompletedHandlerIInputStream: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIInputStream }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.AnyIInputStream?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIInputStream.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.AnyIInputStream?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIInputStream
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerIInputStream

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStream: WindowsFoundation.IID {
    .init(Data1: 0x398c4183, Data2: 0x793d, Data3: 0x5b00, Data4: ( 0x81,0x9b,0x4a,0xef,0x92,0x48,0x5e,0x94 ))// 398c4183-793d-5b00-819b-4aef92485e94
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStream {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.AnyIRandomAccessStream?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamBridge>
public class AsyncOperationCompletedHandlerIRandomAccessStream: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStream }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.AnyIRandomAccessStream?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStream.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.AnyIRandomAccessStream?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStream
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerIRandomAccessStream

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference: WindowsFoundation.IID {
    .init(Data1: 0x60847289, Data2: 0xea0b, Data3: 0x5df6, Data4: ( 0x89,0xdf,0xf2,0xc6,0x2c,0xba,0x96,0x93 ))// 60847289-ea0b-5df6-89df-f2c62cba9693
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.AnyIRandomAccessStreamReference?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceBridge>
public class AsyncOperationCompletedHandlerIRandomAccessStreamReference: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.AnyIRandomAccessStreamReference?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.AnyIRandomAccessStreamReference?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerIRandomAccessStreamReference

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType: WindowsFoundation.IID {
    .init(Data1: 0x3dddecf4, Data2: 0x1d39, Data3: 0x58e8, Data4: ( 0x83,0xb1,0xdb,0xed,0x54,0x1c,0x7f,0x35 ))// 3dddecf4-1d39-58e8-83b1-dbed541c7f35
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.AnyIRandomAccessStreamWithContentType?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeBridge>
public class AsyncOperationCompletedHandlerIRandomAccessStreamWithContentType: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.AnyIRandomAccessStreamWithContentType?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.AnyIRandomAccessStreamWithContentType?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerIRandomAccessStreamWithContentType

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference: WindowsFoundation.IID {
    .init(Data1: 0x3d203732, Data2: 0xded7, Data3: 0x5d32, Data4: ( 0x87,0xe6,0xc1,0x79,0x78,0x1f,0x79,0x1f ))// 3d203732-ded7-5d32-87e6-c179781f791f
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.RandomAccessStreamReference?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge>
public class AsyncOperationCompletedHandlerRandomAccessStreamReference: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.RandomAccessStreamReference?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.RandomAccessStreamReference?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerRandomAccessStreamReference

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus: WindowsFoundation.IID {
    .init(Data1: 0x198cac52, Data2: 0xabcd, Data3: 0x5529, Data4: ( 0x93,0x3f,0x07,0x1c,0xc9,0x3f,0xd6,0x35 ))// 198cac52-abcd-5529-933f-071cc93fd635
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.LaunchQuerySupportStatus>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusBridge>
public class AsyncOperationCompletedHandlerLaunchQuerySupportStatus: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.LaunchQuerySupportStatus>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.LaunchQuerySupportStatus>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerLaunchQuerySupportStatus

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResult: WindowsFoundation.IID {
    .init(Data1: 0x70a97bf8, Data2: 0xe0a5, Data3: 0x59bb, Data4: ( 0x91,0x74,0x81,0x2a,0x13,0x1d,0x85,0xa0 ))// 70a97bf8-e0a5-59bb-9174-812a131d85a0
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResult {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResultVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResultVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResultVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResultWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResultWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResultWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResultWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.LaunchUriResult?>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResultWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResultWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResultBridge>
public class AsyncOperationCompletedHandlerLaunchUriResult: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResult }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.LaunchUriResult?>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResultWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResultBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.LaunchUriResult?>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResult
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerLaunchUriResult

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatus: WindowsFoundation.IID {
    .init(Data1: 0x520aa58e, Data2: 0x40d6, Data3: 0x5a57, Data4: ( 0xa6,0xdc,0xcb,0x5f,0xae,0xa5,0xcc,0xa5 ))// 520aa58e-40d6-5a57-a6dc-cb5faea5cca5
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatus {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatusVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatusVTable: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatusVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatusWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatusWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatusWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatusWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.LaunchUriStatus>? = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatusWrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatusWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatusBridge>
public class AsyncOperationCompletedHandlerLaunchUriStatus: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatus }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperation<UWP.LaunchUriStatus>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatusWrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatus.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatusBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationCompletedHandler<UWP.LaunchUriStatus>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatus
    internal typealias SwiftABI = UWP.AsyncOperationCompletedHandlerLaunchUriStatus

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32: WindowsFoundation.IID {
    .init(Data1: 0xea0fe405, Data2: 0xd432, Data3: 0x5ac7, Data4: ( 0x9e,0xf8,0x5a,0x65,0xe1,0xf9,0x7d,0x7e ))// ea0fe405-d432-5ac7-9ef8-5a65e1f97d7e
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32 {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32VTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32VTable: __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32Vtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32Wrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32Wrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32Wrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperationWithProgress<UInt32, UInt32>? = UWP.__x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32Wrapper.unwrapFrom(abi: ComPtr($1))
            let progressInfo: UInt32 = $2
            try __unwrapped__instance(asyncInfo, progressInfo)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32Wrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32Bridge>
public class AsyncOperationProgressHandlerUInt32_UInt32: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32 }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperationWithProgress<UInt32, UInt32>?, _ progressInfo: UInt32) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32Wrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, progressInfo))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32Bridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationProgressHandler<UInt32, UInt32>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32
    internal typealias SwiftABI = UWP.AsyncOperationProgressHandlerUInt32_UInt32

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, progressInfo) in
            try _default.Invoke(asyncInfo, progressInfo)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64: WindowsFoundation.IID {
    .init(Data1: 0xffb2b65d, Data2: 0x4120, Data3: 0x5d13, Data4: ( 0x82,0x6d,0x10,0x78,0x51,0xe6,0xbb,0x1c ))// ffb2b65d-4120-5d13-826d-107851e6bb1c
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64 {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64VTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64VTable: __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64Vtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64Wrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64Wrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64Wrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperationWithProgress<UInt64, UInt64>? = UWP.__x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64Wrapper.unwrapFrom(abi: ComPtr($1))
            let progressInfo: UInt64 = $2
            try __unwrapped__instance(asyncInfo, progressInfo)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64Wrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64Bridge>
public class AsyncOperationProgressHandlerUInt64_UInt64: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64 }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperationWithProgress<UInt64, UInt64>?, _ progressInfo: UInt64) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64Wrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, progressInfo))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64Bridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationProgressHandler<UInt64, UInt64>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64
    internal typealias SwiftABI = UWP.AsyncOperationProgressHandlerUInt64_UInt64

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, progressInfo) in
            try _default.Invoke(asyncInfo, progressInfo)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32: WindowsFoundation.IID {
    .init(Data1: 0xbf666554, Data2: 0x7605, Data3: 0x5d9a, Data4: ( 0xb1,0x4e,0x18,0xd8,0xc8,0x47,0x2a,0xfe ))// bf666554-7605-5d9a-b14e-18d8c8472afe
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32 {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32VTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32VTable: __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Vtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperationWithProgress<UWP.AnyIBuffer?, UInt32>? = UWP.__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper.unwrapFrom(abi: ComPtr($1))
            let progressInfo: UInt32 = $2
            try __unwrapped__instance(asyncInfo, progressInfo)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Bridge>
public class AsyncOperationProgressHandlerIBuffer_UInt32: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32 }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperationWithProgress<UWP.AnyIBuffer?, UInt32>?, _ progressInfo: UInt32) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, progressInfo))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Bridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationProgressHandler<UWP.AnyIBuffer?, UInt32>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32
    internal typealias SwiftABI = UWP.AsyncOperationProgressHandlerIBuffer_UInt32

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, progressInfo) in
            try _default.Invoke(asyncInfo, progressInfo)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32: WindowsFoundation.IID {
    .init(Data1: 0x1e466dc5, Data2: 0x840f, Data3: 0x54f9, Data4: ( 0xb8,0x77,0x5e,0x3a,0x9f,0x4b,0x6c,0x74 ))// 1e466dc5-840f-54f9-b877-5e3a9f4b6c74
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32 {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32VTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32VTable: __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32Vtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32Wrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32Wrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32Wrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperationWithProgress<UInt32, UInt32>? = UWP.__x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32Wrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32Wrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32Bridge>
public class AsyncOperationWithProgressCompletedHandlerUInt32_UInt32: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32 }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperationWithProgress<UInt32, UInt32>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32Wrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32Bridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationWithProgressCompletedHandler<UInt32, UInt32>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32
    internal typealias SwiftABI = UWP.AsyncOperationWithProgressCompletedHandlerUInt32_UInt32

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64: WindowsFoundation.IID {
    .init(Data1: 0xd2024e41, Data2: 0x5500, Data3: 0x5b5a, Data4: ( 0xba,0x46,0xcb,0x70,0x09,0x59,0x6a,0x2f ))// d2024e41-5500-5b5a-ba46-cb7009596a2f
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64 {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64VTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64VTable: __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64Vtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64Wrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64Wrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64Wrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperationWithProgress<UInt64, UInt64>? = UWP.__x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64Wrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64Wrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64Bridge>
public class AsyncOperationWithProgressCompletedHandlerUInt64_UInt64: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64 }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperationWithProgress<UInt64, UInt64>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64Wrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64Bridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationWithProgressCompletedHandler<UInt64, UInt64>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64
    internal typealias SwiftABI = UWP.AsyncOperationWithProgressCompletedHandlerUInt64_UInt64

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32: WindowsFoundation.IID {
    .init(Data1: 0x06386a7a, Data2: 0xe009, Data3: 0x5b0b, Data4: ( 0xab,0x68,0xa8,0xe4,0x8b,0x51,0x66,0x47 ))// 06386a7a-e009-5b0b-ab68-a8e48b516647
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32 {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32VTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32VTable: __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Vtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let asyncInfo: WindowsFoundation.AnyIAsyncOperationWithProgress<UWP.AnyIBuffer?, UInt32>? = UWP.__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper.unwrapFrom(abi: ComPtr($1))
            let asyncStatus: WindowsFoundation.AsyncStatus = $2
            try __unwrapped__instance(asyncInfo, asyncStatus)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Bridge>
public class AsyncOperationWithProgressCompletedHandlerIBuffer_UInt32: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32 }

    open func Invoke(_ asyncInfo: WindowsFoundation.AnyIAsyncOperationWithProgress<UWP.AnyIBuffer?, UInt32>?, _ asyncStatus: WindowsFoundation.AsyncStatus) throws {
        let asyncInfoWrapper = UWP.__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper(asyncInfo)
        let _asyncInfo = try! asyncInfoWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _asyncInfo, asyncStatus))
        }
    }

}

internal class __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Bridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.AsyncOperationWithProgressCompletedHandler<UWP.AnyIBuffer?, UInt32>
    internal typealias CABI = __x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32
    internal typealias SwiftABI = UWP.AsyncOperationWithProgressCompletedHandlerIBuffer_UInt32

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (asyncInfo, asyncStatus) in
            try _default.Invoke(asyncInfo, asyncStatus)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIIterable_1_float: WindowsFoundation.IID {
    .init(Data1: 0xb01bee51, Data2: 0x063a, Data3: 0x5fda, Data4: ( 0xbd,0x72,0xd7,0x66,0x37,0xbb,0x8c,0xb8 ))// b01bee51-063a-5fda-bd72-d76637bb8cb8
}

internal var __x_ABI_C__FIIterable_1_floatVTable: __x_ABI_C__FIIterable_1_floatVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1_floatWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1_floatWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1_floatWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1_floatWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Float>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1_floatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1_floatWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1_floatWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1_floatBridge>
public class IIterableFloat: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1_float }

    open func First() throws -> WindowsFoundation.AnyIIterator<Float>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1_float.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1_floatWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1_floatBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1_float
    internal typealias SwiftABI = IIterableFloat
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<Float>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1_floatImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1_floatVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1_floatImpl : IIterable, AbiInterfaceImpl {
    typealias T = Float
    typealias Bridge = __x_ABI_C__FIIterable_1_floatBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<Float>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1_HSTRING: WindowsFoundation.IID {
    .init(Data1: 0xe2fcc7c1, Data2: 0x3bfc, Data3: 0x5a0b, Data4: ( 0xb2,0xb0,0x72,0xe7,0x69,0xd1,0xcb,0x7e ))// e2fcc7c1-3bfc-5a0b-b2b0-72e769d1cb7e
}

internal var __x_ABI_C__FIIterable_1_HSTRINGVTable: __x_ABI_C__FIIterable_1_HSTRINGVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1_HSTRINGWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1_HSTRINGWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1_HSTRINGWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1_HSTRINGWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<String>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1_HSTRINGWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1_HSTRINGWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1_HSTRINGBridge>
public class IIterableString: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1_HSTRING }

    open func First() throws -> WindowsFoundation.AnyIIterator<String>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1_HSTRINGWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1_HSTRINGBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1_HSTRING
    internal typealias SwiftABI = IIterableString
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<String>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1_HSTRINGImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1_HSTRINGVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1_HSTRINGImpl : IIterable, AbiInterfaceImpl {
    typealias T = String
    typealias Bridge = __x_ABI_C__FIIterable_1_HSTRINGBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<String>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfo: WindowsFoundation.IID {
    .init(Data1: 0x63d0bffe, Data2: 0x0e34, Data3: 0x55b3, Data4: ( 0x83,0xd5,0x31,0x4c,0xaf,0xf2,0xb1,0x37 ))// 63d0bffe-0e34-55b3-83d5-314caff2b137
}

internal var __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfoVTable: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfoVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.ApplicationModel.AppInfo>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfoBridge>
public class IIterableAppInfo: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfo }

    open func First() throws -> WindowsFoundation.AnyIIterator<UWP.AppInfo?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfoBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfo
    internal typealias SwiftABI = IIterableAppInfo
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<UWP.AppInfo?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfoImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfoVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfoImpl : IIterable, AbiInterfaceImpl {
    typealias T = UWP.AppInfo?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfoBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.AppInfo?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView: WindowsFoundation.IID {
    .init(Data1: 0x32bc12d1, Data2: 0x2653, Data3: 0x5a41, Data4: ( 0xa5,0x5e,0x88,0xa1,0x2a,0xf2,0x02,0x6a ))// 32bc12d1-2653-5a41-a55e-88a12af2026a
}

internal var __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewVTable: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.ApplicationModel.Core.CoreApplicationView>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewBridge>
public class IIterableCoreApplicationView: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView }

    open func First() throws -> WindowsFoundation.AnyIIterator<UWP.CoreApplicationView?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView
    internal typealias SwiftABI = IIterableCoreApplicationView
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<UWP.CoreApplicationView?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewImpl : IIterable, AbiInterfaceImpl {
    typealias T = UWP.CoreApplicationView?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.CoreApplicationView?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItem: WindowsFoundation.IID {
    .init(Data1: 0x5c3705f4, Data2: 0x8e46, Data3: 0x5ae5, Data4: ( 0x97,0xbf,0x88,0x22,0x0c,0xcc,0xff,0xd9 ))// 5c3705f4-8e46-5ae5-97bf-88220cccffd9
}

internal var __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemVTable: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.ApplicationModel.DataTransfer.ClipboardHistoryItem>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemBridge>
public class IIterableClipboardHistoryItem: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItem }

    open func First() throws -> WindowsFoundation.AnyIIterator<UWP.ClipboardHistoryItem?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItem
    internal typealias SwiftABI = IIterableClipboardHistoryItem
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<UWP.ClipboardHistoryItem?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemImpl : IIterable, AbiInterfaceImpl {
    typealias T = UWP.ClipboardHistoryItem?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.ClipboardHistoryItem?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider: WindowsFoundation.IID {
    .init(Data1: 0x0903b218, Data2: 0x5cad, Data3: 0x53e6, Data4: ( 0x9a,0x21,0x6f,0x4b,0x31,0xc4,0xa4,0x09 ))// 0903b218-5cad-53e6-9a21-6f4b31c4a409
}

internal var __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderVTable: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.ApplicationModel.DataTransfer.ShareProvider>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderBridge>
public class IIterableShareProvider: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider }

    open func First() throws -> WindowsFoundation.AnyIIterator<UWP.ShareProvider?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider
    internal typealias SwiftABI = IIterableShareProvider
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<UWP.ShareProvider?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderImpl : IIterable, AbiInterfaceImpl {
    typealias T = UWP.ShareProvider?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.ShareProvider?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegment: WindowsFoundation.IID {
    .init(Data1: 0x5498f4f3, Data2: 0xcee4, Data3: 0x5b72, Data4: ( 0x97,0x29,0x81,0x5c,0x4a,0xd7,0xb9,0xdc ))// 5498f4f3-cee4-5b72-9729-815c4ad7b9dc
}

internal var __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegmentVTable: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegmentVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Data.Text.TextSegment>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge>
public class IIterableTextSegment: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegment }

    open func First() throws -> WindowsFoundation.AnyIIterator<UWP.TextSegment>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegment.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegment
    internal typealias SwiftABI = IIterableTextSegment
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<UWP.TextSegment>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegmentImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegmentVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegmentImpl : IIterable, AbiInterfaceImpl {
    typealias T = UWP.TextSegment
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.TextSegment>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDevice: WindowsFoundation.IID {
    .init(Data1: 0xad26662c, Data2: 0x845b, Data3: 0x5c6d, Data4: ( 0xae,0xaa,0x40,0x6f,0x48,0xc2,0x1a,0xe9 ))// ad26662c-845b-5c6d-aeaa-406f48c21ae9
}

internal var __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceVTable: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Devices.Input.PointerDevice>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceBridge>
public class IIterablePointerDevice: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDevice }

    open func First() throws -> WindowsFoundation.AnyIIterator<UWP.PointerDevice?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDevice
    internal typealias SwiftABI = IIterablePointerDevice
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<UWP.PointerDevice?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceImpl : IIterable, AbiInterfaceImpl {
    typealias T = UWP.PointerDevice?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.PointerDevice?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsage: WindowsFoundation.IID {
    .init(Data1: 0x592d6618, Data2: 0xeaab, Data3: 0x5a79, Data4: ( 0xa4,0x7a,0xc7,0xfc,0x0b,0x74,0x9a,0x4e ))// 592d6618-eaab-5a79-a47a-c7fc0b749a4e
}

internal var __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageVTable: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Devices.Input.PointerDeviceUsage>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageBridge>
public class IIterablePointerDeviceUsage: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsage }

    open func First() throws -> WindowsFoundation.AnyIIterator<UWP.PointerDeviceUsage>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsage
    internal typealias SwiftABI = IIterablePointerDeviceUsage
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<UWP.PointerDeviceUsage>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageImpl : IIterable, AbiInterfaceImpl {
    typealias T = UWP.PointerDeviceUsage
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.PointerDeviceUsage>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistration: WindowsFoundation.IID {
    .init(Data1: 0x62ae0fda, Data2: 0xb238, Data3: 0x554f, Data4: ( 0xa2,0x75,0x1d,0xc1,0x6d,0x6c,0xa0,0x3a ))// 62ae0fda-b238-554f-a275-1dc16d6ca03a
}

internal var __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationVTable: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Foundation.UUID, Windows.ApplicationModel.Background.BackgroundTaskRegistration>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationBridge>
public class IIterableIKeyValuePairUUID_BackgroundTaskRegistration: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistration }

    open func First() throws -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.BackgroundTaskRegistration?>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistration.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistration
    internal typealias SwiftABI = IIterableIKeyValuePairUUID_BackgroundTaskRegistration
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.BackgroundTaskRegistration?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationImpl : IIterable, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.BackgroundTaskRegistration?>?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.BackgroundTaskRegistration?>?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistration: WindowsFoundation.IID {
    .init(Data1: 0x80fb0327, Data2: 0x5a00, Data3: 0x55cc, Data4: ( 0x85,0xdb,0xa8,0x52,0x71,0x99,0x81,0xb9 ))// 80fb0327-5a00-55cc-85db-a852719981b9
}

internal var __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationVTable: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<Foundation.UUID, Windows.ApplicationModel.Background.IBackgroundTaskRegistration>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationBridge>
public class IIterableIKeyValuePairUUID_IBackgroundTaskRegistration: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistration }

    open func First() throws -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.AnyIBackgroundTaskRegistration?>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistration.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistration
    internal typealias SwiftABI = IIterableIKeyValuePairUUID_IBackgroundTaskRegistration
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.AnyIBackgroundTaskRegistration?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationImpl : IIterable, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.AnyIBackgroundTaskRegistration?>?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.AnyIBackgroundTaskRegistration?>?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0xfe2f3d47, Data2: 0x5d47, Data3: 0x5499, Data4: ( 0x83,0x74,0x43,0x0c,0x7c,0xda,0x02,0x04 ))// fe2f3d47-5d47-5499-8374-430c7cda0204
}

internal var __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVTable: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Any>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableBridge>
public class IIterableIKeyValuePairString_Any: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable }

    open func First() throws -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, Any?>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable
    internal typealias SwiftABI = IIterableIKeyValuePairString_Any
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, Any?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableImpl : IIterable, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, Any?>?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, Any?>?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING: WindowsFoundation.IID {
    .init(Data1: 0xe9bdaaf0, Data2: 0xcbf6, Data3: 0x5c72, Data4: ( 0xbe,0x90,0x29,0xcb,0xf3,0xa1,0x31,0x9b ))// e9bdaaf0-cbf6-5c72-be90-29cbf3a1319b
}

internal var __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVTable: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGBridge>
public class IIterableIKeyValuePairString_String: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING }

    open func First() throws -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, String>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING
    internal typealias SwiftABI = IIterableIKeyValuePairString_String
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, String>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGImpl : IIterable, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, String>?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, String>?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup: WindowsFoundation.IID {
    .init(Data1: 0x04428524, Data2: 0x7d54, Data3: 0x59b4, Data4: ( 0xbf,0x17,0xac,0x57,0xc4,0xce,0x6b,0x40 ))// 04428524-7d54-59b4-bf17-ac57c4ce6b40
}

internal var __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupVTable: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupBridge>
public class IIterableIKeyValuePairString_BackgroundTaskRegistrationGroup: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup }

    open func First() throws -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, UWP.BackgroundTaskRegistrationGroup?>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup
    internal typealias SwiftABI = IIterableIKeyValuePairString_BackgroundTaskRegistrationGroup
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, UWP.BackgroundTaskRegistrationGroup?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupImpl : IIterable, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, UWP.BackgroundTaskRegistrationGroup?>?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, UWP.BackgroundTaskRegistrationGroup?>?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment: WindowsFoundation.IID {
    .init(Data1: 0xf819a276, Data2: 0xb3f5, Data3: 0x54d4, Data4: ( 0xb8,0xfd,0xc9,0xad,0xb7,0xf7,0x00,0xe3 ))// f819a276-b3f5-54d4-b8fd-c9adb7f700e3
}

internal var __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentVTable: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.Collections.IVectorView`1<Windows.Data.Text.TextSegment>>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge>
public class IIterableIKeyValuePairString_IVectorViewTextSegment: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment }

    open func First() throws -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVectorView<UWP.TextSegment>?>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment
    internal typealias SwiftABI = IIterableIKeyValuePairString_IVectorViewTextSegment
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVectorView<UWP.TextSegment>?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentImpl : IIterable, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVectorView<UWP.TextSegment>?>?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVectorView<UWP.TextSegment>?>?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRING: WindowsFoundation.IID {
    .init(Data1: 0x4fed2669, Data2: 0xd0d3, Data3: 0x59f6, Data4: ( 0x91,0xd9,0x95,0x90,0x2d,0x72,0x8d,0x6a ))// 4fed2669-d0d3-59f6-91d9-95902d728d6a
}

internal var __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGVTable: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.Collections.IVector`1<String>>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGBridge>
public class IIterableIKeyValuePairString_IVectorString: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRING }

    open func First() throws -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVector<String>?>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRING
    internal typealias SwiftABI = IIterableIKeyValuePairString_IVectorString
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVector<String>?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGImpl : IIterable, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVector<String>?>?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVector<String>?>?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue: WindowsFoundation.IID {
    .init(Data1: 0x05f9430c, Data2: 0x2f22, Data3: 0x5638, Data4: ( 0xaa,0x89,0x8c,0x9a,0xbc,0xd5,0x4f,0xf9 ))// 05f9430c-2f22-5638-aa89-8c9abcd54ff9
}

internal var __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVTable: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Graphics.Imaging.BitmapTypedValue>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueBridge>
public class IIterableIKeyValuePairString_BitmapTypedValue: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue }

    open func First() throws -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, UWP.BitmapTypedValue?>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue
    internal typealias SwiftABI = IIterableIKeyValuePairString_BitmapTypedValue
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, UWP.BitmapTypedValue?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueImpl : IIterable, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, UWP.BitmapTypedValue?>?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, UWP.BitmapTypedValue?>?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainer: WindowsFoundation.IID {
    .init(Data1: 0xa785be1d, Data2: 0x159e, Data3: 0x53ad, Data4: ( 0x95,0x53,0x59,0x8b,0x03,0xdc,0xa0,0x48 ))// a785be1d-159e-53ad-9553-598b03dca048
}

internal var __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerVTable: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Storage.ApplicationDataContainer>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerBridge>
public class IIterableIKeyValuePairString_ApplicationDataContainer: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainer }

    open func First() throws -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, UWP.ApplicationDataContainer?>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainer
    internal typealias SwiftABI = IIterableIKeyValuePairString_ApplicationDataContainer
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, UWP.ApplicationDataContainer?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerImpl : IIterable, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, UWP.ApplicationDataContainer?>?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, UWP.ApplicationDataContainer?>?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference: WindowsFoundation.IID {
    .init(Data1: 0xc9729ba7, Data2: 0x5e20, Data3: 0x569d, Data4: ( 0xa3,0xd1,0x97,0xa4,0xe6,0x53,0xe5,0xbb ))// c9729ba7-5e20-569d-a3d1-97a4e653e5bb
}

internal var __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceVTable: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Storage.Streams.RandomAccessStreamReference>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge>
public class IIterableIKeyValuePairString_RandomAccessStreamReference: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference }

    open func First() throws -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, UWP.RandomAccessStreamReference?>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference
    internal typealias SwiftABI = IIterableIKeyValuePairString_RandomAccessStreamReference
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, UWP.RandomAccessStreamReference?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceImpl : IIterable, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, UWP.RandomAccessStreamReference?>?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, UWP.RandomAccessStreamReference?>?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase: WindowsFoundation.IID {
    .init(Data1: 0xc739c420, Data2: 0x64b2, Data3: 0x53f2, Data4: ( 0x89,0xb9,0x05,0x90,0x6a,0xba,0x7c,0xb0 ))// c739c420-64b2-53f2-89b9-05906aba7cb0
}

internal var __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseVTable: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.UI.Composition.ICompositionAnimationBase>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseBridge>
public class IIterableIKeyValuePairString_ICompositionAnimationBase: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase }

    open func First() throws -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, UWP.AnyICompositionAnimationBase?>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase
    internal typealias SwiftABI = IIterableIKeyValuePairString_ICompositionAnimationBase
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<WindowsFoundation.AnyIKeyValuePair<String, UWP.AnyICompositionAnimationBase?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseImpl : IIterable, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, UWP.AnyICompositionAnimationBase?>?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, UWP.AnyICompositionAnimationBase?>?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation: WindowsFoundation.IID {
    .init(Data1: 0x2b6bdb90, Data2: 0xa4eb, Data3: 0x5142, Data4: ( 0xb5,0x82,0x3c,0xcb,0x1e,0xdc,0x57,0x89 ))// 2b6bdb90-a4eb-5142-b582-3ccb1edc5789
}

internal var __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationVTable: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Graphics.Imaging.BitmapCodecInformation>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationBridge>
public class IIterableBitmapCodecInformation: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation }

    open func First() throws -> WindowsFoundation.AnyIIterator<UWP.BitmapCodecInformation?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation
    internal typealias SwiftABI = IIterableBitmapCodecInformation
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<UWP.BitmapCodecInformation?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationImpl : IIterable, AbiInterfaceImpl {
    typealias T = UWP.BitmapCodecInformation?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.BitmapCodecInformation?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItem: WindowsFoundation.IID {
    .init(Data1: 0xbb8b8418, Data2: 0x65d1, Data3: 0x544b, Data4: ( 0xb0,0x83,0x6d,0x17,0x2f,0x56,0x8c,0x73 ))// bb8b8418-65d1-544b-b083-6d172f568c73
}

internal var __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItemVTable: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItemVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Storage.IStorageItem>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItemBridge>
public class IIterableIStorageItem: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItem }

    open func First() throws -> WindowsFoundation.AnyIIterator<UWP.AnyIStorageItem?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItemBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItem
    internal typealias SwiftABI = IIterableIStorageItem
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<UWP.AnyIStorageItem?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItemImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItemVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItemImpl : IIterable, AbiInterfaceImpl {
    typealias T = UWP.AnyIStorageItem?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItemBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.AnyIStorageItem?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry: WindowsFoundation.IID {
    .init(Data1: 0x35aff6f9, Data2: 0xef75, Data3: 0x5280, Data4: ( 0xbb,0x84,0xa2,0xbf,0x83,0x17,0xcf,0x35 ))// 35aff6f9-ef75-5280-bb84-a2bf8317cf35
}

internal var __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryVTable: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Storage.Search.SortEntry>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryBridge>
public class IIterableSortEntry: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry }

    open func First() throws -> WindowsFoundation.AnyIIterator<UWP.SortEntry>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry
    internal typealias SwiftABI = IIterableSortEntry
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<UWP.SortEntry>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryImpl : IIterable, AbiInterfaceImpl {
    typealias T = UWP.SortEntry
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.SortEntry>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFile: WindowsFoundation.IID {
    .init(Data1: 0x9ac00304, Data2: 0x83ea, Data3: 0x5688, Data4: ( 0x87,0xb6,0xae,0x38,0xaa,0xb6,0x5d,0x0b ))// 9ac00304-83ea-5688-87b6-ae38aab65d0b
}

internal var __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFileVTable: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFileVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Storage.StorageFile>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFileWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFileWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFileBridge>
public class IIterableStorageFile: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFile }

    open func First() throws -> WindowsFoundation.AnyIIterator<UWP.StorageFile?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFile.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFileBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFile
    internal typealias SwiftABI = IIterableStorageFile
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<UWP.StorageFile?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFileImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFileVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFileImpl : IIterable, AbiInterfaceImpl {
    typealias T = UWP.StorageFile?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFileBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.StorageFile?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFolder: WindowsFoundation.IID {
    .init(Data1: 0x4669befc, Data2: 0xae5c, Data3: 0x52b1, Data4: ( 0x8a,0x97,0x54,0x66,0xce,0x61,0xe9,0x4e ))// 4669befc-ae5c-52b1-8a97-5466ce61e94e
}

internal var __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFolderVTable: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFolderVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Storage.StorageFolder>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFolderBridge>
public class IIterableStorageFolder: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFolder }

    open func First() throws -> WindowsFoundation.AnyIIterator<UWP.StorageFolder?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFolder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFolderBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFolder
    internal typealias SwiftABI = IIterableStorageFolder
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<UWP.StorageFolder?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFolderImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFolderVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFolderImpl : IIterable, AbiInterfaceImpl {
    typealias T = UWP.StorageFolder?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFolderBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.StorageFolder?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageLibraryChange: WindowsFoundation.IID {
    .init(Data1: 0x87c15dfc, Data2: 0x0c5e, Data3: 0x518b, Data4: ( 0x92,0x06,0x97,0xd3,0xd9,0x82,0x3c,0x61 ))// 87c15dfc-0c5e-518b-9206-97d3d9823c61
}

internal var __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeVTable: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.Storage.StorageLibraryChange>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeBridge>
public class IIterableStorageLibraryChange: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageLibraryChange }

    open func First() throws -> WindowsFoundation.AnyIIterator<UWP.StorageLibraryChange?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageLibraryChange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageLibraryChange
    internal typealias SwiftABI = IIterableStorageLibraryChange
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<UWP.StorageLibraryChange?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeImpl : IIterable, AbiInterfaceImpl {
    typealias T = UWP.StorageLibraryChange?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.StorageLibraryChange?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUser: WindowsFoundation.IID {
    .init(Data1: 0xd1bacd1f, Data2: 0x0376, Data3: 0x5823, Data4: ( 0x8c,0x29,0x1d,0x45,0xb9,0xf4,0xc1,0x91 ))// d1bacd1f-0376-5823-8c29-1d45b9f4c191
}

internal var __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUserVTable: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUserVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUserWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUserWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUserWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUserWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.System.User>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUserWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUserWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUserWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUserBridge>
public class IIterableUser: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUser }

    open func First() throws -> WindowsFoundation.AnyIIterator<UWP.User?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUser.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUserWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUserBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUser
    internal typealias SwiftABI = IIterableUser
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<UWP.User?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUserImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUserVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUserImpl : IIterable, AbiInterfaceImpl {
    typealias T = UWP.User?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUserBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.User?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimation: WindowsFoundation.IID {
    .init(Data1: 0x0cb59942, Data2: 0xc6f3, Data3: 0x585f, Data4: ( 0x9a,0x92,0xb4,0x7e,0x8d,0xd3,0x8e,0xbf ))// 0cb59942-c6f3-585f-9a92-b47e8dd38ebf
}

internal var __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationVTable: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.UI.Composition.CompositionAnimation>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationBridge>
public class IIterableCompositionAnimation: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimation }

    open func First() throws -> WindowsFoundation.AnyIIterator<UWP.CompositionAnimation?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimation
    internal typealias SwiftABI = IIterableCompositionAnimation
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<UWP.CompositionAnimation?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationImpl : IIterable, AbiInterfaceImpl {
    typealias T = UWP.CompositionAnimation?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.CompositionAnimation?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop: WindowsFoundation.IID {
    .init(Data1: 0x0f2cfac1, Data2: 0xcdbc, Data3: 0x5c4e, Data4: ( 0xa7,0xd2,0xa3,0x91,0x4f,0xb6,0x34,0x26 ))// 0f2cfac1-cdbc-5c4e-a7d2-a3914fb63426
}

internal var __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopVTable: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.UI.Composition.CompositionColorGradientStop>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopBridge>
public class IIterableCompositionColorGradientStop: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop }

    open func First() throws -> WindowsFoundation.AnyIIterator<UWP.CompositionColorGradientStop?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop
    internal typealias SwiftABI = IIterableCompositionColorGradientStop
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<UWP.CompositionColorGradientStop?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopImpl : IIterable, AbiInterfaceImpl {
    typealias T = UWP.CompositionColorGradientStop?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.CompositionColorGradientStop?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCaster: WindowsFoundation.IID {
    .init(Data1: 0xb8301b02, Data2: 0x429b, Data3: 0x5d71, Data4: ( 0xab,0x0c,0x8d,0x11,0x41,0xb1,0x2a,0xc3 ))// b8301b02-429b-5d71-ab0c-8d1141b12ac3
}

internal var __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterVTable: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.UI.Composition.CompositionProjectedShadowCaster>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterBridge>
public class IIterableCompositionProjectedShadowCaster: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCaster }

    open func First() throws -> WindowsFoundation.AnyIIterator<UWP.CompositionProjectedShadowCaster?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCaster.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCaster
    internal typealias SwiftABI = IIterableCompositionProjectedShadowCaster
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<UWP.CompositionProjectedShadowCaster?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterImpl : IIterable, AbiInterfaceImpl {
    typealias T = UWP.CompositionProjectedShadowCaster?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.CompositionProjectedShadowCaster?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiver: WindowsFoundation.IID {
    .init(Data1: 0xe2775a28, Data2: 0xec48, Data3: 0x5cb8, Data4: ( 0xb3,0x52,0x76,0xf7,0xf9,0x81,0xd7,0xa4 ))// e2775a28-ec48-5cb8-b352-76f7f981d7a4
}

internal var __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverVTable: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.UI.Composition.CompositionProjectedShadowReceiver>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverBridge>
public class IIterableCompositionProjectedShadowReceiver: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiver }

    open func First() throws -> WindowsFoundation.AnyIIterator<UWP.CompositionProjectedShadowReceiver?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiver.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiver
    internal typealias SwiftABI = IIterableCompositionProjectedShadowReceiver
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<UWP.CompositionProjectedShadowReceiver?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverImpl : IIterable, AbiInterfaceImpl {
    typealias T = UWP.CompositionProjectedShadowReceiver?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.CompositionProjectedShadowReceiver?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape: WindowsFoundation.IID {
    .init(Data1: 0x1135adf5, Data2: 0xdb12, Data3: 0x55e8, Data4: ( 0xae,0x0f,0xbd,0x8d,0x91,0x4b,0xd3,0x99 ))// 1135adf5-db12-55e8-ae0f-bd8d914bd399
}

internal var __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeVTable: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.UI.Composition.CompositionShape>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeBridge>
public class IIterableCompositionShape: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape }

    open func First() throws -> WindowsFoundation.AnyIIterator<UWP.CompositionShape?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape
    internal typealias SwiftABI = IIterableCompositionShape
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<UWP.CompositionShape?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeImpl : IIterable, AbiInterfaceImpl {
    typealias T = UWP.CompositionShape?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.CompositionShape?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CVisual: WindowsFoundation.IID {
    .init(Data1: 0x4eed7dce, Data2: 0xe4ac, Data3: 0x5891, Data4: ( 0x9b,0x52,0x79,0x9d,0x70,0xdf,0x47,0xfe ))// 4eed7dce-e4ac-5891-9b52-799d70df47fe
}

internal var __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CVisualVTable: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CVisualVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CVisualWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CVisualWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CVisualWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CVisualWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.UI.Composition.Visual>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CVisualWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CVisualWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CVisualWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CVisualBridge>
public class IIterableVisual: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CVisual }

    open func First() throws -> WindowsFoundation.AnyIIterator<UWP.Visual?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CVisual.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CVisualWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CVisualBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CVisual
    internal typealias SwiftABI = IIterableVisual
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<UWP.Visual?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CVisualImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CVisualVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CVisualImpl : IIterable, AbiInterfaceImpl {
    typealias T = UWP.Visual?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CVisualBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.Visual?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint: WindowsFoundation.IID {
    .init(Data1: 0xf6f2cba6, Data2: 0x7076, Data3: 0x5b59, Data4: ( 0x96,0x31,0xf6,0xac,0x32,0xb5,0x76,0x95 ))// f6f2cba6-7076-5b59-9631-f6ac32b57695
}

internal var __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPointVTable: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.UI.Input.PointerPoint>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPointBridge>
public class IIterablePointerPoint: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint }

    open func First() throws -> WindowsFoundation.AnyIIterator<UWP.PointerPoint?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPointBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPoint
    internal typealias SwiftABI = IIterablePointerPoint
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<UWP.PointerPoint?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPointImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPointVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPointImpl : IIterable, AbiInterfaceImpl {
    typealias T = UWP.PointerPoint?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPointBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.PointerPoint?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotification: WindowsFoundation.IID {
    .init(Data1: 0x1863baee, Data2: 0x44f1, Data3: 0x5e51, Data4: ( 0xbc,0xdf,0xa3,0xcd,0xab,0x82,0x6a,0x15 ))// 1863baee-44f1-5e51-bcdf-a3cdab826a15
}

internal var __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationVTable: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.UI.Notifications.ShownTileNotification>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationBridge>
public class IIterableShownTileNotification: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotification }

    open func First() throws -> WindowsFoundation.AnyIIterator<UWP.ShownTileNotification?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotification
    internal typealias SwiftABI = IIterableShownTileNotification
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<UWP.ShownTileNotification?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationImpl : IIterable, AbiInterfaceImpl {
    typealias T = UWP.ShownTileNotification?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.ShownTileNotification?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegment: WindowsFoundation.IID {
    .init(Data1: 0x38372bd2, Data2: 0xd3fe, Data3: 0x5ad2, Data4: ( 0x9d,0x39,0xd1,0x66,0xb6,0x8e,0x78,0xe7 ))// 38372bd2-d3fe-5ad2-9d39-d166b68e78e7
}

internal var __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentVTable: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterable`1<Windows.UI.Text.Core.CoreTextCompositionSegment>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    First: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.first()
        let resultWrapper = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentBridge>
public class IIterableCoreTextCompositionSegment: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegment }

    open func First() throws -> WindowsFoundation.AnyIIterator<UWP.CoreTextCompositionSegment?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegment.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.First(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegment
    internal typealias SwiftABI = IIterableCoreTextCompositionSegment
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterable<UWP.CoreTextCompositionSegment?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentImpl : IIterable, AbiInterfaceImpl {
    typealias T = UWP.CoreTextCompositionSegment?
    typealias Bridge = __x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterable-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.CoreTextCompositionSegment?>? {
        try! _default.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1_float: WindowsFoundation.IID {
    .init(Data1: 0x42614e61, Data2: 0xb0aa, Data3: 0x5e72, Data4: ( 0x93,0x54,0x27,0x71,0xdb,0x20,0xb7,0xa8 ))// 42614e61-b0aa-5e72-9354-2771db20b7a8
}

internal var __x_ABI_C__FIIterator_1_floatVTable: __x_ABI_C__FIIterator_1_floatVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1_floatWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1_floatWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1_floatWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1_floatWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Float>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1_floatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        $1?.initialize(to: result)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1_floatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1_floatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1_floatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [Float] = .from(abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1_floatWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1_floatBridge>
public class IIteratorFloat: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1_float }

    open func get_Current() throws -> Float {
        var result: FLOAT = 0.0
        _ = try perform(as: __x_ABI_C__FIIterator_1_float.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &result))
        }
        return result
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1_float.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1_float.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [Float]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1_float.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1_floatBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1_float
    internal typealias SwiftABI = IIteratorFloat
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<Float>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1_floatImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1_floatVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1_floatImpl : IIterator, AbiInterfaceImpl {
    typealias T = Float
    typealias Bridge = __x_ABI_C__FIIterator_1_floatBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [Float]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : Float {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1_HSTRING: WindowsFoundation.IID {
    .init(Data1: 0x8c304ebb, Data2: 0x6615, Data3: 0x50a4, Data4: ( 0x88,0x29,0x87,0x9e,0xcd,0x44,0x32,0x36 ))// 8c304ebb-6615-50a4-8829-879ecd443236
}

internal var __x_ABI_C__FIIterator_1_HSTRINGVTable: __x_ABI_C__FIIterator_1_HSTRINGVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1_HSTRINGWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1_HSTRINGWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1_HSTRINGWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1_HSTRINGWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<String>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        $1?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [String] = .from(abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        do {
            try items.fill(abi: $2)
        } catch { return failWith(error: error) }
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1_HSTRINGWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1_HSTRINGBridge>
public class IIteratorString: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1_HSTRING }

    open func get_Current() throws -> String {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIIterator_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &result))
        }
        return .init(from: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [String]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1_HSTRINGBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1_HSTRING
    internal typealias SwiftABI = IIteratorString
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<String>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1_HSTRINGImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1_HSTRINGVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1_HSTRINGImpl : IIterator, AbiInterfaceImpl {
    typealias T = String
    typealias Bridge = __x_ABI_C__FIIterator_1_HSTRINGBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [String]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : String {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfo: WindowsFoundation.IID {
    .init(Data1: 0x69cec62c, Data2: 0x41eb, Data3: 0x5d69, Data4: ( 0xa4,0x75,0x29,0xee,0x22,0x32,0x3d,0xd8 ))// 69cec62c-41eb-5d69-a475-29ee22323dd8
}

internal var __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfoVTable: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfoVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.AppInfo>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        result?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [UWP.AppInfo?] = .from(abiBridge: __IMPL_Windows_ApplicationModel.AppInfoBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: __IMPL_Windows_ApplicationModel.AppInfoBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfoBridge>
public class IIteratorAppInfo: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfo }

    open func get_Current() throws -> UWP.AppInfo? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_ApplicationModel.AppInfoBridge.from(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [UWP.AppInfo?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_ApplicationModel.AppInfoBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_ApplicationModel.AppInfoBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfoBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfo
    internal typealias SwiftABI = IIteratorAppInfo
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<UWP.AppInfo?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfoImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfoVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfoImpl : IIterator, AbiInterfaceImpl {
    typealias T = UWP.AppInfo?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CAppInfoBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [UWP.AppInfo?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : UWP.AppInfo? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView: WindowsFoundation.IID {
    .init(Data1: 0x4f5f6944, Data2: 0x264b, Data3: 0x5868, Data4: ( 0x80,0x9e,0xc7,0xac,0x1a,0xc5,0xed,0xad ))// 4f5f6944-264b-5868-809e-c7ac1ac5edad
}

internal var __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewVTable: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.Core.CoreApplicationView>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        result?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [UWP.CoreApplicationView?] = .from(abiBridge: __IMPL_Windows_ApplicationModel_Core.CoreApplicationViewBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: __IMPL_Windows_ApplicationModel_Core.CoreApplicationViewBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewBridge>
public class IIteratorCoreApplicationView: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView }

    open func get_Current() throws -> UWP.CoreApplicationView? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_ApplicationModel_Core.CoreApplicationViewBridge.from(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [UWP.CoreApplicationView?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_ApplicationModel_Core.CoreApplicationViewBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_ApplicationModel_Core.CoreApplicationViewBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView
    internal typealias SwiftABI = IIteratorCoreApplicationView
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<UWP.CoreApplicationView?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewImpl : IIterator, AbiInterfaceImpl {
    typealias T = UWP.CoreApplicationView?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [UWP.CoreApplicationView?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : UWP.CoreApplicationView? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItem: WindowsFoundation.IID {
    .init(Data1: 0x63fac521, Data2: 0x1395, Data3: 0x5c95, Data4: ( 0xaa,0xff,0x97,0x36,0x37,0x8a,0x4f,0x2f ))// 63fac521-1395-5c95-aaff-9736378a4f2f
}

internal var __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemVTable: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.DataTransfer.ClipboardHistoryItem>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        result?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [UWP.ClipboardHistoryItem?] = .from(abiBridge: __IMPL_Windows_ApplicationModel_DataTransfer.ClipboardHistoryItemBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: __IMPL_Windows_ApplicationModel_DataTransfer.ClipboardHistoryItemBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemBridge>
public class IIteratorClipboardHistoryItem: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItem }

    open func get_Current() throws -> UWP.ClipboardHistoryItem? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_ApplicationModel_DataTransfer.ClipboardHistoryItemBridge.from(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [UWP.ClipboardHistoryItem?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_ApplicationModel_DataTransfer.ClipboardHistoryItemBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_ApplicationModel_DataTransfer.ClipboardHistoryItemBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItem
    internal typealias SwiftABI = IIteratorClipboardHistoryItem
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<UWP.ClipboardHistoryItem?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemImpl : IIterator, AbiInterfaceImpl {
    typealias T = UWP.ClipboardHistoryItem?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [UWP.ClipboardHistoryItem?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : UWP.ClipboardHistoryItem? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider: WindowsFoundation.IID {
    .init(Data1: 0x886f5642, Data2: 0xe9f9, Data3: 0x573b, Data4: ( 0x92,0x13,0x58,0x40,0xb5,0x06,0x2b,0x40 ))// 886f5642-e9f9-573b-9213-5840b5062b40
}

internal var __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderVTable: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.ApplicationModel.DataTransfer.ShareProvider>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        result?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [UWP.ShareProvider?] = .from(abiBridge: __IMPL_Windows_ApplicationModel_DataTransfer.ShareProviderBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: __IMPL_Windows_ApplicationModel_DataTransfer.ShareProviderBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderBridge>
public class IIteratorShareProvider: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider }

    open func get_Current() throws -> UWP.ShareProvider? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_ApplicationModel_DataTransfer.ShareProviderBridge.from(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [UWP.ShareProvider?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_ApplicationModel_DataTransfer.ShareProviderBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_ApplicationModel_DataTransfer.ShareProviderBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider
    internal typealias SwiftABI = IIteratorShareProvider
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<UWP.ShareProvider?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderImpl : IIterator, AbiInterfaceImpl {
    typealias T = UWP.ShareProvider?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [UWP.ShareProvider?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : UWP.ShareProvider? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegment: WindowsFoundation.IID {
    .init(Data1: 0x645a39b4, Data2: 0xf001, Data3: 0x5272, Data4: ( 0x90,0x15,0xfb,0x4a,0x32,0x71,0x79,0xae ))// 645a39b4-f001-5272-9015-fb4a327179ae
}

internal var __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegmentVTable: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegmentVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Data.Text.TextSegment>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        $1?.initialize(to: .from(swift: result))
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [UWP.TextSegment] = .from(abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        do {
            try items.fill(abi: $2)
        } catch { return failWith(error: error) }
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge>
public class IIteratorTextSegment: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegment }

    open func get_Current() throws -> UWP.TextSegment {
        var result: __x_ABI_CWindows_CData_CText_CTextSegment = .init()
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &result))
        }
        return .from(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [UWP.TextSegment]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegment.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegment
    internal typealias SwiftABI = IIteratorTextSegment
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<UWP.TextSegment>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegmentImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegmentVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegmentImpl : IIterator, AbiInterfaceImpl {
    typealias T = UWP.TextSegment
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [UWP.TextSegment]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : UWP.TextSegment {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDevice: WindowsFoundation.IID {
    .init(Data1: 0xde94641c, Data2: 0x7960, Data3: 0x5fcd, Data4: ( 0xab,0xe8,0xd6,0xba,0x60,0x9e,0xf7,0xd3 ))// de94641c-7960-5fcd-abe8-d6ba609ef7d3
}

internal var __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceVTable: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Devices.Input.PointerDevice>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        result?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [UWP.PointerDevice?] = .from(abiBridge: __IMPL_Windows_Devices_Input.PointerDeviceBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: __IMPL_Windows_Devices_Input.PointerDeviceBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceBridge>
public class IIteratorPointerDevice: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDevice }

    open func get_Current() throws -> UWP.PointerDevice? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_Devices_Input.PointerDeviceBridge.from(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDevice.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDevice.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [UWP.PointerDevice?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_Devices_Input.PointerDeviceBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_Devices_Input.PointerDeviceBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDevice
    internal typealias SwiftABI = IIteratorPointerDevice
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<UWP.PointerDevice?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceImpl : IIterator, AbiInterfaceImpl {
    typealias T = UWP.PointerDevice?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [UWP.PointerDevice?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : UWP.PointerDevice? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsage: WindowsFoundation.IID {
    .init(Data1: 0x9ab2160d, Data2: 0x11ef, Data3: 0x5eca, Data4: ( 0x8d,0xd9,0x3e,0x13,0xaa,0x4e,0x5f,0x99 ))// 9ab2160d-11ef-5eca-8dd9-3e13aa4e5f99
}

internal var __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageVTable: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Devices.Input.PointerDeviceUsage>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        $1?.initialize(to: .from(swift: result))
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [UWP.PointerDeviceUsage] = .from(abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        do {
            try items.fill(abi: $2)
        } catch { return failWith(error: error) }
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageBridge>
public class IIteratorPointerDeviceUsage: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsage }

    open func get_Current() throws -> UWP.PointerDeviceUsage {
        var result: __x_ABI_CWindows_CDevices_CInput_CPointerDeviceUsage = .init()
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &result))
        }
        return .from(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [UWP.PointerDeviceUsage]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsage
    internal typealias SwiftABI = IIteratorPointerDeviceUsage
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<UWP.PointerDeviceUsage>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageImpl : IIterator, AbiInterfaceImpl {
    typealias T = UWP.PointerDeviceUsage
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [UWP.PointerDeviceUsage]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : UWP.PointerDeviceUsage {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistration: WindowsFoundation.IID {
    .init(Data1: 0x8445d2ae, Data2: 0xdd03, Data3: 0x5b98, Data4: ( 0x95,0xe4,0x82,0xb4,0x3a,0x3f,0x0d,0x64 ))// 8445d2ae-dd03-5b98-95e4-82b43a3f0d64
}

internal var __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationVTable: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Foundation.UUID, Windows.ApplicationModel.Background.BackgroundTaskRegistration>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        let resultWrapper = UWP.__x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.BackgroundTaskRegistration?>?] = .from(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationBridge>
public class IIteratorIKeyValuePairUUID_BackgroundTaskRegistration: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistration }

    open func get_Current() throws -> WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.BackgroundTaskRegistration?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistration.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.unwrapFrom(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistration.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistration.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.BackgroundTaskRegistration?>?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistration.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistration
    internal typealias SwiftABI = IIteratorIKeyValuePairUUID_BackgroundTaskRegistration
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.BackgroundTaskRegistration?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationImpl : IIterator, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.BackgroundTaskRegistration?>?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.BackgroundTaskRegistration?>?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.BackgroundTaskRegistration?>? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistration: WindowsFoundation.IID {
    .init(Data1: 0x2001aea5, Data2: 0x1a86, Data3: 0x517e, Data4: ( 0x8b,0xe5,0x11,0xd7,0xfb,0x59,0x35,0xb2 ))// 2001aea5-1a86-517e-8be5-11d7fb5935b2
}

internal var __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationVTable: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<Foundation.UUID, Windows.ApplicationModel.Background.IBackgroundTaskRegistration>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        let resultWrapper = UWP.__x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.AnyIBackgroundTaskRegistration?>?] = .from(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationBridge>
public class IIteratorIKeyValuePairUUID_IBackgroundTaskRegistration: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistration }

    open func get_Current() throws -> WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.AnyIBackgroundTaskRegistration?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistration.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.unwrapFrom(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistration.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistration.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.AnyIBackgroundTaskRegistration?>?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistration.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistration
    internal typealias SwiftABI = IIteratorIKeyValuePairUUID_IBackgroundTaskRegistration
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.AnyIBackgroundTaskRegistration?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationImpl : IIterator, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.AnyIBackgroundTaskRegistration?>?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.AnyIBackgroundTaskRegistration?>?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.AnyIBackgroundTaskRegistration?>? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0x5db5fa32, Data2: 0x707c, Data3: 0x5849, Data4: ( 0xa0,0x6b,0x91,0xc8,0xeb,0x9d,0x10,0xe8 ))// 5db5fa32-707c-5849-a06b-91c8eb9d10e8
}

internal var __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVTable: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Any>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        let resultWrapper = UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [WindowsFoundation.AnyIKeyValuePair<String, Any?>?] = .from(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableBridge>
public class IIteratorIKeyValuePairString_Any: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable }

    open func get_Current() throws -> WindowsFoundation.AnyIKeyValuePair<String, Any?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<String, Any?>?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable
    internal typealias SwiftABI = IIteratorIKeyValuePairString_Any
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, Any?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableImpl : IIterator, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, Any?>?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<String, Any?>?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : WindowsFoundation.AnyIKeyValuePair<String, Any?>? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING: WindowsFoundation.IID {
    .init(Data1: 0x05eb86f1, Data2: 0x7140, Data3: 0x5517, Data4: ( 0xb8,0x8d,0xcb,0xae,0xbe,0x57,0xe6,0xb1 ))// 05eb86f1-7140-5517-b88d-cbaebe57e6b1
}

internal var __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVTable: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, String>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        let resultWrapper = UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [WindowsFoundation.AnyIKeyValuePair<String, String>?] = .from(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGBridge>
public class IIteratorIKeyValuePairString_String: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING }

    open func get_Current() throws -> WindowsFoundation.AnyIKeyValuePair<String, String>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<String, String>?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING
    internal typealias SwiftABI = IIteratorIKeyValuePairString_String
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, String>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGImpl : IIterator, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, String>?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<String, String>?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : WindowsFoundation.AnyIKeyValuePair<String, String>? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup: WindowsFoundation.IID {
    .init(Data1: 0x4c21744b, Data2: 0xb583, Data3: 0x559d, Data4: ( 0x89,0xf7,0xd4,0x13,0x8c,0xff,0xff,0xbc ))// 4c21744b-b583-559d-89f7-d4138cffffbc
}

internal var __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupVTable: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        let resultWrapper = UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [WindowsFoundation.AnyIKeyValuePair<String, UWP.BackgroundTaskRegistrationGroup?>?] = .from(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupBridge>
public class IIteratorIKeyValuePairString_BackgroundTaskRegistrationGroup: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup }

    open func get_Current() throws -> WindowsFoundation.AnyIKeyValuePair<String, UWP.BackgroundTaskRegistrationGroup?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.unwrapFrom(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<String, UWP.BackgroundTaskRegistrationGroup?>?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup
    internal typealias SwiftABI = IIteratorIKeyValuePairString_BackgroundTaskRegistrationGroup
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, UWP.BackgroundTaskRegistrationGroup?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupImpl : IIterator, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, UWP.BackgroundTaskRegistrationGroup?>?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<String, UWP.BackgroundTaskRegistrationGroup?>?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : WindowsFoundation.AnyIKeyValuePair<String, UWP.BackgroundTaskRegistrationGroup?>? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment: WindowsFoundation.IID {
    .init(Data1: 0x00078aa3, Data2: 0x8676, Data3: 0x5f06, Data4: ( 0xad,0xf5,0xff,0xe5,0xd6,0x61,0xd6,0x70 ))// 00078aa3-8676-5f06-adf5-ffe5d661d670
}

internal var __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentVTable: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.Collections.IVectorView`1<Windows.Data.Text.TextSegment>>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        let resultWrapper = UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVectorView<UWP.TextSegment>?>?] = .from(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge>
public class IIteratorIKeyValuePairString_IVectorViewTextSegment: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment }

    open func get_Current() throws -> WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVectorView<UWP.TextSegment>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.unwrapFrom(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVectorView<UWP.TextSegment>?>?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment
    internal typealias SwiftABI = IIteratorIKeyValuePairString_IVectorViewTextSegment
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVectorView<UWP.TextSegment>?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentImpl : IIterator, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVectorView<UWP.TextSegment>?>?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVectorView<UWP.TextSegment>?>?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVectorView<UWP.TextSegment>?>? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRING: WindowsFoundation.IID {
    .init(Data1: 0xa11824c9, Data2: 0xe458, Data3: 0x502a, Data4: ( 0xaf,0xd8,0xce,0x3c,0xe0,0xab,0xd6,0xfe ))// a11824c9-e458-502a-afd8-ce3ce0abd6fe
}

internal var __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGVTable: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.Collections.IVector`1<String>>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        let resultWrapper = UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVector<String>?>?] = .from(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGBridge>
public class IIteratorIKeyValuePairString_IVectorString: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRING }

    open func get_Current() throws -> WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVector<String>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVector<String>?>?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRING
    internal typealias SwiftABI = IIteratorIKeyValuePairString_IVectorString
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVector<String>?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGImpl : IIterator, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVector<String>?>?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVector<String>?>?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVector<String>?>? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue: WindowsFoundation.IID {
    .init(Data1: 0x2ad3fb0c, Data2: 0x0656, Data3: 0x5302, Data4: ( 0xb5,0x04,0x31,0x53,0xbe,0x84,0x51,0x61 ))// 2ad3fb0c-0656-5302-b504-3153be845161
}

internal var __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVTable: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Graphics.Imaging.BitmapTypedValue>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        let resultWrapper = UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [WindowsFoundation.AnyIKeyValuePair<String, UWP.BitmapTypedValue?>?] = .from(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueBridge>
public class IIteratorIKeyValuePairString_BitmapTypedValue: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue }

    open func get_Current() throws -> WindowsFoundation.AnyIKeyValuePair<String, UWP.BitmapTypedValue?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.unwrapFrom(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<String, UWP.BitmapTypedValue?>?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue
    internal typealias SwiftABI = IIteratorIKeyValuePairString_BitmapTypedValue
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, UWP.BitmapTypedValue?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueImpl : IIterator, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, UWP.BitmapTypedValue?>?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<String, UWP.BitmapTypedValue?>?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : WindowsFoundation.AnyIKeyValuePair<String, UWP.BitmapTypedValue?>? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainer: WindowsFoundation.IID {
    .init(Data1: 0xaf3c131d, Data2: 0x67aa, Data3: 0x5c8d, Data4: ( 0xae,0x0e,0x27,0x2b,0xa2,0x4a,0xe7,0x4f ))// af3c131d-67aa-5c8d-ae0e-272ba24ae74f
}

internal var __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerVTable: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Storage.ApplicationDataContainer>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        let resultWrapper = UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [WindowsFoundation.AnyIKeyValuePair<String, UWP.ApplicationDataContainer?>?] = .from(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerBridge>
public class IIteratorIKeyValuePairString_ApplicationDataContainer: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainer }

    open func get_Current() throws -> WindowsFoundation.AnyIKeyValuePair<String, UWP.ApplicationDataContainer?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.unwrapFrom(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<String, UWP.ApplicationDataContainer?>?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainer
    internal typealias SwiftABI = IIteratorIKeyValuePairString_ApplicationDataContainer
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, UWP.ApplicationDataContainer?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerImpl : IIterator, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, UWP.ApplicationDataContainer?>?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<String, UWP.ApplicationDataContainer?>?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : WindowsFoundation.AnyIKeyValuePair<String, UWP.ApplicationDataContainer?>? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference: WindowsFoundation.IID {
    .init(Data1: 0x9419af53, Data2: 0xacb8, Data3: 0x5328, Data4: ( 0x88,0x53,0x70,0xba,0x87,0xeb,0x6a,0xd5 ))// 9419af53-acb8-5328-8853-70ba87eb6ad5
}

internal var __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceVTable: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Storage.Streams.RandomAccessStreamReference>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        let resultWrapper = UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [WindowsFoundation.AnyIKeyValuePair<String, UWP.RandomAccessStreamReference?>?] = .from(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge>
public class IIteratorIKeyValuePairString_RandomAccessStreamReference: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference }

    open func get_Current() throws -> WindowsFoundation.AnyIKeyValuePair<String, UWP.RandomAccessStreamReference?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.unwrapFrom(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<String, UWP.RandomAccessStreamReference?>?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference
    internal typealias SwiftABI = IIteratorIKeyValuePairString_RandomAccessStreamReference
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, UWP.RandomAccessStreamReference?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceImpl : IIterator, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, UWP.RandomAccessStreamReference?>?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<String, UWP.RandomAccessStreamReference?>?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : WindowsFoundation.AnyIKeyValuePair<String, UWP.RandomAccessStreamReference?>? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase: WindowsFoundation.IID {
    .init(Data1: 0x85924e77, Data2: 0xfc46, Data3: 0x5a0d, Data4: ( 0xbd,0xaf,0x46,0x3c,0x4f,0x86,0xc1,0x72 ))// 85924e77-fc46-5a0d-bdaf-463c4f86c172
}

internal var __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseVTable: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.UI.Composition.ICompositionAnimationBase>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        let resultWrapper = UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [WindowsFoundation.AnyIKeyValuePair<String, UWP.AnyICompositionAnimationBase?>?] = .from(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseBridge>
public class IIteratorIKeyValuePairString_ICompositionAnimationBase: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase }

    open func get_Current() throws -> WindowsFoundation.AnyIKeyValuePair<String, UWP.AnyICompositionAnimationBase?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.unwrapFrom(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<String, UWP.AnyICompositionAnimationBase?>?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase
    internal typealias SwiftABI = IIteratorIKeyValuePairString_ICompositionAnimationBase
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, UWP.AnyICompositionAnimationBase?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseImpl : IIterator, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, UWP.AnyICompositionAnimationBase?>?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [WindowsFoundation.AnyIKeyValuePair<String, UWP.AnyICompositionAnimationBase?>?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : WindowsFoundation.AnyIKeyValuePair<String, UWP.AnyICompositionAnimationBase?>? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation: WindowsFoundation.IID {
    .init(Data1: 0x4ff2b2db, Data2: 0x9326, Data3: 0x537f, Data4: ( 0xb8,0xdc,0x4c,0x93,0xd7,0x7f,0xbb,0x84 ))// 4ff2b2db-9326-537f-b8dc-4c93d77fbb84
}

internal var __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationVTable: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Graphics.Imaging.BitmapCodecInformation>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        result?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [UWP.BitmapCodecInformation?] = .from(abiBridge: __IMPL_Windows_Graphics_Imaging.BitmapCodecInformationBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: __IMPL_Windows_Graphics_Imaging.BitmapCodecInformationBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationBridge>
public class IIteratorBitmapCodecInformation: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation }

    open func get_Current() throws -> UWP.BitmapCodecInformation? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_Graphics_Imaging.BitmapCodecInformationBridge.from(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [UWP.BitmapCodecInformation?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_Graphics_Imaging.BitmapCodecInformationBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_Graphics_Imaging.BitmapCodecInformationBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation
    internal typealias SwiftABI = IIteratorBitmapCodecInformation
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<UWP.BitmapCodecInformation?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationImpl : IIterator, AbiInterfaceImpl {
    typealias T = UWP.BitmapCodecInformation?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [UWP.BitmapCodecInformation?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : UWP.BitmapCodecInformation? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItem: WindowsFoundation.IID {
    .init(Data1: 0x05b487c2, Data2: 0x3830, Data3: 0x5d3c, Data4: ( 0x98,0xda,0x25,0xfa,0x11,0x54,0x2d,0xbd ))// 05b487c2-3830-5d3c-98da-25fa11542dbd
}

internal var __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItemVTable: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItemVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Storage.IStorageItem>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        let resultWrapper = __ABI_Windows_Storage.IStorageItemWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [UWP.AnyIStorageItem?] = .from(abiBridge: __IMPL_Windows_Storage.IStorageItemBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: __IMPL_Windows_Storage.IStorageItemBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItemBridge>
public class IIteratorIStorageItem: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItem }

    open func get_Current() throws -> UWP.AnyIStorageItem? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return __ABI_Windows_Storage.IStorageItemWrapper.unwrapFrom(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [UWP.AnyIStorageItem?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_Storage.IStorageItemBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_Storage.IStorageItemBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItemBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItem
    internal typealias SwiftABI = IIteratorIStorageItem
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<UWP.AnyIStorageItem?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItemImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItemVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItemImpl : IIterator, AbiInterfaceImpl {
    typealias T = UWP.AnyIStorageItem?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CIStorageItemBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [UWP.AnyIStorageItem?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : UWP.AnyIStorageItem? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry: WindowsFoundation.IID {
    .init(Data1: 0x520434a2, Data2: 0xacf7, Data3: 0x58c9, Data4: ( 0xb4,0x7a,0x27,0x41,0xf2,0xfa,0xc2,0xc2 ))// 520434a2-acf7-58c9-b47a-2741f2fac2c2
}

internal var __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryVTable: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Storage.Search.SortEntry>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        let _result = __ABI_Windows_Storage_Search._ABI_SortEntry(from: result)
        	$1?.initialize(to: _result.detach())
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [UWP.SortEntry] = .from(abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        do {
            try items.fill(abi: $2)
        } catch { return failWith(error: error) }
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryBridge>
public class IIteratorSortEntry: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry }

    open func get_Current() throws -> UWP.SortEntry {
        var result: __x_ABI_CWindows_CStorage_CSearch_CSortEntry = .init()
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &result))
        }
        return .from(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [UWP.SortEntry]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry
    internal typealias SwiftABI = IIteratorSortEntry
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<UWP.SortEntry>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryImpl : IIterator, AbiInterfaceImpl {
    typealias T = UWP.SortEntry
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [UWP.SortEntry]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : UWP.SortEntry {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFile: WindowsFoundation.IID {
    .init(Data1: 0x43e29f53, Data2: 0x0298, Data3: 0x55aa, Data4: ( 0xa6,0xc8,0x4e,0xdd,0x32,0x3d,0x95,0x98 ))// 43e29f53-0298-55aa-a6c8-4edd323d9598
}

internal var __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFileVTable: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFileVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Storage.StorageFile>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        result?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [UWP.StorageFile?] = .from(abiBridge: __IMPL_Windows_Storage.StorageFileBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: __IMPL_Windows_Storage.StorageFileBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFileWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFileBridge>
public class IIteratorStorageFile: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFile }

    open func get_Current() throws -> UWP.StorageFile? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFile.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_Storage.StorageFileBridge.from(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [UWP.StorageFile?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_Storage.StorageFileBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFile.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_Storage.StorageFileBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFileBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFile
    internal typealias SwiftABI = IIteratorStorageFile
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<UWP.StorageFile?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFileImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFileVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFileImpl : IIterator, AbiInterfaceImpl {
    typealias T = UWP.StorageFile?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFileBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [UWP.StorageFile?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : UWP.StorageFile? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFolder: WindowsFoundation.IID {
    .init(Data1: 0x5aac96fb, Data2: 0xb3b9, Data3: 0x5a7f, Data4: ( 0xa9,0x20,0x4b,0x5a,0x8d,0xf8,0x11,0x68 ))// 5aac96fb-b3b9-5a7f-a920-4b5a8df81168
}

internal var __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFolderVTable: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFolderVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Storage.StorageFolder>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        result?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [UWP.StorageFolder?] = .from(abiBridge: __IMPL_Windows_Storage.StorageFolderBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: __IMPL_Windows_Storage.StorageFolderBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFolderBridge>
public class IIteratorStorageFolder: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFolder }

    open func get_Current() throws -> UWP.StorageFolder? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFolder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_Storage.StorageFolderBridge.from(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFolder.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFolder.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [UWP.StorageFolder?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_Storage.StorageFolderBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFolder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_Storage.StorageFolderBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFolderBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFolder
    internal typealias SwiftABI = IIteratorStorageFolder
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<UWP.StorageFolder?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFolderImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFolderVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFolderImpl : IIterator, AbiInterfaceImpl {
    typealias T = UWP.StorageFolder?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageFolderBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [UWP.StorageFolder?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : UWP.StorageFolder? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageLibraryChange: WindowsFoundation.IID {
    .init(Data1: 0xc48a1103, Data2: 0x56e6, Data3: 0x5398, Data4: ( 0x84,0xfe,0x92,0xed,0xad,0x7f,0xc1,0x11 ))// c48a1103-56e6-5398-84fe-92edad7fc111
}

internal var __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeVTable: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.Storage.StorageLibraryChange>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        result?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [UWP.StorageLibraryChange?] = .from(abiBridge: __IMPL_Windows_Storage.StorageLibraryChangeBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: __IMPL_Windows_Storage.StorageLibraryChangeBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeBridge>
public class IIteratorStorageLibraryChange: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageLibraryChange }

    open func get_Current() throws -> UWP.StorageLibraryChange? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageLibraryChange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_Storage.StorageLibraryChangeBridge.from(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageLibraryChange.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageLibraryChange.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [UWP.StorageLibraryChange?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_Storage.StorageLibraryChangeBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageLibraryChange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_Storage.StorageLibraryChangeBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageLibraryChange
    internal typealias SwiftABI = IIteratorStorageLibraryChange
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<UWP.StorageLibraryChange?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeImpl : IIterator, AbiInterfaceImpl {
    typealias T = UWP.StorageLibraryChange?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [UWP.StorageLibraryChange?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : UWP.StorageLibraryChange? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUser: WindowsFoundation.IID {
    .init(Data1: 0x326fe162, Data2: 0x582b, Data3: 0x5659, Data4: ( 0xb8,0xa4,0x68,0xff,0x0f,0x52,0x57,0x45 ))// 326fe162-582b-5659-b8a4-68ff0f525745
}

internal var __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUserVTable: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUserVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUserWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUserWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUserWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUserWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.System.User>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUserWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        result?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUserWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUserWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUserWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [UWP.User?] = .from(abiBridge: __IMPL_Windows_System.UserBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: __IMPL_Windows_System.UserBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUserWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUserBridge>
public class IIteratorUser: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUser }

    open func get_Current() throws -> UWP.User? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUser.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_System.UserBridge.from(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUser.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUser.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [UWP.User?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_System.UserBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUser.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_System.UserBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUserBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUser
    internal typealias SwiftABI = IIteratorUser
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<UWP.User?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUserImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUserVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUserImpl : IIterator, AbiInterfaceImpl {
    typealias T = UWP.User?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CSystem__CUserBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [UWP.User?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : UWP.User? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimation: WindowsFoundation.IID {
    .init(Data1: 0x98efbe55, Data2: 0x0a66, Data3: 0x556a, Data4: ( 0x9a,0xdc,0x4a,0xb5,0x9c,0x69,0x68,0x46 ))// 98efbe55-0a66-556a-9adc-4ab59c696846
}

internal var __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationVTable: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.UI.Composition.CompositionAnimation>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        result?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [UWP.CompositionAnimation?] = .from(abiBridge: __IMPL_Windows_UI_Composition.CompositionAnimationBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: __IMPL_Windows_UI_Composition.CompositionAnimationBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationBridge>
public class IIteratorCompositionAnimation: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimation }

    open func get_Current() throws -> UWP.CompositionAnimation? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_UI_Composition.CompositionAnimationBridge.from(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [UWP.CompositionAnimation?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_UI_Composition.CompositionAnimationBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_UI_Composition.CompositionAnimationBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimation
    internal typealias SwiftABI = IIteratorCompositionAnimation
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<UWP.CompositionAnimation?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationImpl : IIterator, AbiInterfaceImpl {
    typealias T = UWP.CompositionAnimation?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionAnimationBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [UWP.CompositionAnimation?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : UWP.CompositionAnimation? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop: WindowsFoundation.IID {
    .init(Data1: 0x746a0f51, Data2: 0x47f4, Data3: 0x5395, Data4: ( 0x8e,0xdd,0x8a,0xe1,0xe9,0x3a,0x81,0x83 ))// 746a0f51-47f4-5395-8edd-8ae1e93a8183
}

internal var __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopVTable: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.UI.Composition.CompositionColorGradientStop>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        result?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [UWP.CompositionColorGradientStop?] = .from(abiBridge: __IMPL_Windows_UI_Composition.CompositionColorGradientStopBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: __IMPL_Windows_UI_Composition.CompositionColorGradientStopBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopBridge>
public class IIteratorCompositionColorGradientStop: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop }

    open func get_Current() throws -> UWP.CompositionColorGradientStop? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_UI_Composition.CompositionColorGradientStopBridge.from(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [UWP.CompositionColorGradientStop?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_UI_Composition.CompositionColorGradientStopBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_UI_Composition.CompositionColorGradientStopBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop
    internal typealias SwiftABI = IIteratorCompositionColorGradientStop
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<UWP.CompositionColorGradientStop?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopImpl : IIterator, AbiInterfaceImpl {
    typealias T = UWP.CompositionColorGradientStop?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [UWP.CompositionColorGradientStop?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : UWP.CompositionColorGradientStop? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCaster: WindowsFoundation.IID {
    .init(Data1: 0x6563b1b1, Data2: 0x4b53, Data3: 0x53df, Data4: ( 0xa0,0xc0,0xd3,0xca,0x1d,0xbb,0xfe,0x59 ))// 6563b1b1-4b53-53df-a0c0-d3ca1dbbfe59
}

internal var __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterVTable: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.UI.Composition.CompositionProjectedShadowCaster>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        result?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [UWP.CompositionProjectedShadowCaster?] = .from(abiBridge: __IMPL_Windows_UI_Composition.CompositionProjectedShadowCasterBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: __IMPL_Windows_UI_Composition.CompositionProjectedShadowCasterBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterBridge>
public class IIteratorCompositionProjectedShadowCaster: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCaster }

    open func get_Current() throws -> UWP.CompositionProjectedShadowCaster? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCaster.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_UI_Composition.CompositionProjectedShadowCasterBridge.from(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCaster.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCaster.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [UWP.CompositionProjectedShadowCaster?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_UI_Composition.CompositionProjectedShadowCasterBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCaster.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_UI_Composition.CompositionProjectedShadowCasterBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCaster
    internal typealias SwiftABI = IIteratorCompositionProjectedShadowCaster
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<UWP.CompositionProjectedShadowCaster?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterImpl : IIterator, AbiInterfaceImpl {
    typealias T = UWP.CompositionProjectedShadowCaster?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowCasterBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [UWP.CompositionProjectedShadowCaster?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : UWP.CompositionProjectedShadowCaster? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiver: WindowsFoundation.IID {
    .init(Data1: 0xd2452315, Data2: 0x9a6e, Data3: 0x5033, Data4: ( 0x9e,0x8f,0xc2,0x59,0x41,0xad,0xbe,0x71 ))// d2452315-9a6e-5033-9e8f-c25941adbe71
}

internal var __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverVTable: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.UI.Composition.CompositionProjectedShadowReceiver>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        result?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [UWP.CompositionProjectedShadowReceiver?] = .from(abiBridge: __IMPL_Windows_UI_Composition.CompositionProjectedShadowReceiverBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: __IMPL_Windows_UI_Composition.CompositionProjectedShadowReceiverBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverBridge>
public class IIteratorCompositionProjectedShadowReceiver: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiver }

    open func get_Current() throws -> UWP.CompositionProjectedShadowReceiver? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiver.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_UI_Composition.CompositionProjectedShadowReceiverBridge.from(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiver.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiver.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [UWP.CompositionProjectedShadowReceiver?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_UI_Composition.CompositionProjectedShadowReceiverBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiver.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_UI_Composition.CompositionProjectedShadowReceiverBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiver
    internal typealias SwiftABI = IIteratorCompositionProjectedShadowReceiver
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<UWP.CompositionProjectedShadowReceiver?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverImpl : IIterator, AbiInterfaceImpl {
    typealias T = UWP.CompositionProjectedShadowReceiver?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionProjectedShadowReceiverBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [UWP.CompositionProjectedShadowReceiver?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : UWP.CompositionProjectedShadowReceiver? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape: WindowsFoundation.IID {
    .init(Data1: 0xff8d5b3b, Data2: 0xab18, Data3: 0x5307, Data4: ( 0x9f,0xfe,0xe3,0xb5,0xd6,0x34,0x52,0xa4 ))// ff8d5b3b-ab18-5307-9ffe-e3b5d63452a4
}

internal var __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeVTable: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.UI.Composition.CompositionShape>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        result?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [UWP.CompositionShape?] = .from(abiBridge: __IMPL_Windows_UI_Composition.CompositionShapeBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: __IMPL_Windows_UI_Composition.CompositionShapeBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeBridge>
public class IIteratorCompositionShape: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape }

    open func get_Current() throws -> UWP.CompositionShape? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_UI_Composition.CompositionShapeBridge.from(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [UWP.CompositionShape?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_UI_Composition.CompositionShapeBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_UI_Composition.CompositionShapeBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape
    internal typealias SwiftABI = IIteratorCompositionShape
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<UWP.CompositionShape?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeImpl : IIterator, AbiInterfaceImpl {
    typealias T = UWP.CompositionShape?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [UWP.CompositionShape?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : UWP.CompositionShape? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CVisual: WindowsFoundation.IID {
    .init(Data1: 0xeca15496, Data2: 0xdcaa, Data3: 0x5095, Data4: ( 0xa8,0x98,0xf8,0x60,0x2a,0x40,0xe1,0x0a ))// eca15496-dcaa-5095-a898-f8602a40e10a
}

internal var __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CVisualVTable: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CVisualVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CVisualWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CVisualWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CVisualWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CVisualWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.UI.Composition.Visual>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CVisualWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        result?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CVisualWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CVisualWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CVisualWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [UWP.Visual?] = .from(abiBridge: __IMPL_Windows_UI_Composition.VisualBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: __IMPL_Windows_UI_Composition.VisualBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CVisualWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CVisualBridge>
public class IIteratorVisual: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CVisual }

    open func get_Current() throws -> UWP.Visual? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CVisual.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_UI_Composition.VisualBridge.from(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CVisual.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CVisual.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [UWP.Visual?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_UI_Composition.VisualBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CVisual.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_UI_Composition.VisualBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CVisualBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CVisual
    internal typealias SwiftABI = IIteratorVisual
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<UWP.Visual?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CVisualImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CVisualVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CVisualImpl : IIterator, AbiInterfaceImpl {
    typealias T = UWP.Visual?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CComposition__CVisualBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [UWP.Visual?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : UWP.Visual? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint: WindowsFoundation.IID {
    .init(Data1: 0x721fe01c, Data2: 0x5ad4, Data3: 0x5262, Data4: ( 0xb0,0x78,0x3a,0xb3,0x45,0x10,0x5d,0xb8 ))// 721fe01c-5ad4-5262-b078-3ab345105db8
}

internal var __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointVTable: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.UI.Input.PointerPoint>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        result?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [UWP.PointerPoint?] = .from(abiBridge: __IMPL_Windows_UI_Input.PointerPointBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: __IMPL_Windows_UI_Input.PointerPointBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointBridge>
public class IIteratorPointerPoint: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint }

    open func get_Current() throws -> UWP.PointerPoint? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_UI_Input.PointerPointBridge.from(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [UWP.PointerPoint?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_UI_Input.PointerPointBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_UI_Input.PointerPointBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPoint
    internal typealias SwiftABI = IIteratorPointerPoint
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<UWP.PointerPoint?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointImpl : IIterator, AbiInterfaceImpl {
    typealias T = UWP.PointerPoint?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CInput__CPointerPointBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [UWP.PointerPoint?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : UWP.PointerPoint? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotification: WindowsFoundation.IID {
    .init(Data1: 0x04d8d70b, Data2: 0x7c15, Data3: 0x5f60, Data4: ( 0x98,0x94,0xb2,0x13,0x66,0xb4,0x27,0xc2 ))// 04d8d70b-7c15-5f60-9894-b21366b427c2
}

internal var __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationVTable: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.UI.Notifications.ShownTileNotification>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        result?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [UWP.ShownTileNotification?] = .from(abiBridge: __IMPL_Windows_UI_Notifications.ShownTileNotificationBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: __IMPL_Windows_UI_Notifications.ShownTileNotificationBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationBridge>
public class IIteratorShownTileNotification: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotification }

    open func get_Current() throws -> UWP.ShownTileNotification? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_UI_Notifications.ShownTileNotificationBridge.from(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotification.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotification.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [UWP.ShownTileNotification?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_UI_Notifications.ShownTileNotificationBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_UI_Notifications.ShownTileNotificationBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotification
    internal typealias SwiftABI = IIteratorShownTileNotification
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<UWP.ShownTileNotification?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationImpl : IIterator, AbiInterfaceImpl {
    typealias T = UWP.ShownTileNotification?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [UWP.ShownTileNotification?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : UWP.ShownTileNotification? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegment: WindowsFoundation.IID {
    .init(Data1: 0x39b4528d, Data2: 0x2370, Data3: 0x57fa, Data4: ( 0xb5,0xd4,0xb5,0xa2,0x07,0x9a,0x7c,0xea ))// 39b4528d-2370-57fa-b5d4-b5a2079a7cea
}

internal var __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentVTable: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentVtbl = .init(
    QueryInterface: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentWrapper.addRef($0) },
    Release: { __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IIterator`1<Windows.UI.Text.Core.CoreTextCompositionSegment>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Current: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.current
        result?.copyTo($1)
        return S_OK
    },

    get_HasCurrent: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.hasCurrent
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    MoveNext: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.moveNext()
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var items: [UWP.CoreTextCompositionSegment?] = .from(abiBridge: __IMPL_Windows_UI_Text_Core.CoreTextCompositionSegmentBridge.self, abi: (count: $1, start: $2))
        let result = __unwrapped__instance.getMany(&items)
        items.fill(abi: $2, abiBridge: __IMPL_Windows_UI_Text_Core.CoreTextCompositionSegmentBridge.self)
        $3?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentBridge>
public class IIteratorCoreTextCompositionSegment: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegment }

    open func get_Current() throws -> UWP.CoreTextCompositionSegment? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegment.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Current(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_UI_Text_Core.CoreTextCompositionSegmentBridge.from(abi: result)
    }

    open func get_HasCurrent() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_HasCurrent(pThis, &result))
        }
        return .init(from: result)
    }

    open func MoveNext() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.MoveNext(pThis, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ items: inout [UWP.CoreTextCompositionSegment?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_UI_Text_Core.CoreTextCompositionSegmentBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegment.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_UI_Text_Core.CoreTextCompositionSegmentBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegment
    internal typealias SwiftABI = IIteratorCoreTextCompositionSegment
    internal typealias SwiftProjection = WindowsFoundation.AnyIIterator<UWP.CoreTextCompositionSegment?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentImpl : IIterator, AbiInterfaceImpl {
    typealias T = UWP.CoreTextCompositionSegment?
    typealias Bridge = __x_ABI_C__FIIterator_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.movenext)
    fileprivate func moveNext() -> Bool {
        try! _default.MoveNext()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.getmany)
    fileprivate func getMany(_ items: inout [UWP.CoreTextCompositionSegment?]) -> UInt32 {
        try! _default.GetMany(&items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.current)
    fileprivate var current : UWP.CoreTextCompositionSegment? {
        get { try! _default.get_Current() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iiterator-1.hascurrent)
    fileprivate var hasCurrent : Bool {
        get { try! _default.get_HasCurrent() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistration: WindowsFoundation.IID {
    .init(Data1: 0x9bcb843b, Data2: 0x221b, Data3: 0x5fbe, Data4: ( 0x9b,0x20,0x70,0x28,0xbc,0x4e,0x86,0x53 ))// 9bcb843b-221b-5fbe-9b20-7028bc4e8653
}

internal var __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationVTable: __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationVtbl = .init(
    QueryInterface: { __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.addRef($0) },
    Release: { __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IKeyValuePair`2<Foundation.UUID, Windows.ApplicationModel.Background.BackgroundTaskRegistration>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Key: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.key
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value
        result?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationBridge>
public class IKeyValuePairUUID_BackgroundTaskRegistration: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistration }

    open func get_Key() throws -> Foundation.UUID {
        var result: WindowsFoundation.GUID = .init()
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistration.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, &result))
        }
        return .init(from: result)
    }

    open func get_Value() throws -> UWP.BackgroundTaskRegistration? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistration.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_ApplicationModel_Background.BackgroundTaskRegistrationBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistration
    internal typealias SwiftABI = IKeyValuePairUUID_BackgroundTaskRegistration
    internal typealias SwiftProjection = WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.BackgroundTaskRegistration?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationImpl : IKeyValuePair, AbiInterfaceImpl {
    typealias K = Foundation.UUID
    typealias V = UWP.BackgroundTaskRegistration?
    typealias Bridge = __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.key)
    fileprivate var key : Foundation.UUID {
        get { try! _default.get_Key() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.value)
    fileprivate var value : UWP.BackgroundTaskRegistration? {
        get { try! _default.get_Value() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistration: WindowsFoundation.IID {
    .init(Data1: 0x5a1f6d75, Data2: 0x8678, Data3: 0x547c, Data4: ( 0x8f,0xd7,0xfb,0xce,0xb6,0xeb,0xf9,0x68 ))// 5a1f6d75-8678-547c-8fd7-fbceb6ebf968
}

internal var __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationVTable: __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationVtbl = .init(
    QueryInterface: { __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.addRef($0) },
    Release: { __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IKeyValuePair`2<Foundation.UUID, Windows.ApplicationModel.Background.IBackgroundTaskRegistration>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Key: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.key
        $1?.initialize(to: .init(from: result))
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value
        let resultWrapper = __ABI_Windows_ApplicationModel_Background.IBackgroundTaskRegistrationWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationBridge>
public class IKeyValuePairUUID_IBackgroundTaskRegistration: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistration }

    open func get_Key() throws -> Foundation.UUID {
        var result: WindowsFoundation.GUID = .init()
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistration.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, &result))
        }
        return .init(from: result)
    }

    open func get_Value() throws -> UWP.AnyIBackgroundTaskRegistration? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistration.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &resultAbi))
            }
        }
        return __ABI_Windows_ApplicationModel_Background.IBackgroundTaskRegistrationWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistration
    internal typealias SwiftABI = IKeyValuePairUUID_IBackgroundTaskRegistration
    internal typealias SwiftProjection = WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.AnyIBackgroundTaskRegistration?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationImpl : IKeyValuePair, AbiInterfaceImpl {
    typealias K = Foundation.UUID
    typealias V = UWP.AnyIBackgroundTaskRegistration?
    typealias Bridge = __x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.key)
    fileprivate var key : Foundation.UUID {
        get { try! _default.get_Key() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.value)
    fileprivate var value : UWP.AnyIBackgroundTaskRegistration? {
        get { try! _default.get_Value() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0x09335560, Data2: 0x6c6b, Data3: 0x5a26, Data4: ( 0x93,0x48,0x97,0xb7,0x81,0x13,0x2b,0x20 ))// 09335560-6c6b-5a26-9348-97b781132b20
}

internal var __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVTable: __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IKeyValuePair`2<String, Any>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Key: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.key
        $1?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value
        let resultWrapper = __ABI_.AnyWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableBridge>
public class IKeyValuePairString_Any: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable }

    open func get_Key() throws -> String {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, &result))
        }
        return .init(from: result)
    }

    open func get_Value() throws -> Any? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &resultAbi))
            }
        }
        return __ABI_.AnyWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectable
    internal typealias SwiftABI = IKeyValuePairString_Any
    internal typealias SwiftProjection = WindowsFoundation.AnyIKeyValuePair<String, Any?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableImpl : IKeyValuePair, AbiInterfaceImpl {
    typealias K = String
    typealias V = Any?
    typealias Bridge = __x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.key)
    fileprivate var key : String {
        get { try! _default.get_Key() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.value)
    fileprivate var value : Any? {
        get { try! _default.get_Value() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING: WindowsFoundation.IID {
    .init(Data1: 0x60310303, Data2: 0x49c5, Data3: 0x52e6, Data4: ( 0xab,0xc6,0xa9,0xb3,0x6e,0xcc,0xc7,0x16 ))// 60310303-49c5-52e6-abc6-a9b36eccc716
}

internal var __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVTable: __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVtbl = .init(
    QueryInterface: { __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.addRef($0) },
    Release: { __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IKeyValuePair`2<String, String>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Key: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.key
        $1?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value
        $1?.initialize(to: try! HString(result).detach())
        return S_OK
    }
)
typealias __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGBridge>
public class IKeyValuePairString_String: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING }

    open func get_Key() throws -> String {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, &result))
        }
        return .init(from: result)
    }

    open func get_Value() throws -> String {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &result))
        }
        return .init(from: result)
    }

}

internal enum __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRING
    internal typealias SwiftABI = IKeyValuePairString_String
    internal typealias SwiftProjection = WindowsFoundation.AnyIKeyValuePair<String, String>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGImpl : IKeyValuePair, AbiInterfaceImpl {
    typealias K = String
    typealias V = String
    typealias Bridge = __x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.key)
    fileprivate var key : String {
        get { try! _default.get_Key() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.value)
    fileprivate var value : String {
        get { try! _default.get_Value() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup: WindowsFoundation.IID {
    .init(Data1: 0x67a07f76, Data2: 0x20b0, Data3: 0x573b, Data4: ( 0x9d,0x74,0xed,0x0f,0xc4,0xf6,0x53,0xc7 ))// 67a07f76-20b0-573b-9d74-ed0fc4f653c7
}

internal var __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupVTable: __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupVtbl = .init(
    QueryInterface: { __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.addRef($0) },
    Release: { __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Key: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.key
        $1?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value
        result?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupBridge>
public class IKeyValuePairString_BackgroundTaskRegistrationGroup: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup }

    open func get_Key() throws -> String {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, &result))
        }
        return .init(from: result)
    }

    open func get_Value() throws -> UWP.BackgroundTaskRegistrationGroup? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_ApplicationModel_Background.BackgroundTaskRegistrationGroupBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup
    internal typealias SwiftABI = IKeyValuePairString_BackgroundTaskRegistrationGroup
    internal typealias SwiftProjection = WindowsFoundation.AnyIKeyValuePair<String, UWP.BackgroundTaskRegistrationGroup?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupImpl : IKeyValuePair, AbiInterfaceImpl {
    typealias K = String
    typealias V = UWP.BackgroundTaskRegistrationGroup?
    typealias Bridge = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.key)
    fileprivate var key : String {
        get { try! _default.get_Key() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.value)
    fileprivate var value : UWP.BackgroundTaskRegistrationGroup? {
        get { try! _default.get_Value() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment: WindowsFoundation.IID {
    .init(Data1: 0x77b4daf4, Data2: 0x4f4f, Data3: 0x5568, Data4: ( 0x90,0xee,0x1a,0x32,0xcf,0x0c,0xaa,0xea ))// 77b4daf4-4f4f-5568-90ee-1a32cf0caaea
}

internal var __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentVTable: __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentVtbl = .init(
    QueryInterface: { __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.addRef($0) },
    Release: { __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.Collections.IVectorView`1<Windows.Data.Text.TextSegment>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Key: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.key
        $1?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value
        let resultWrapper = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge>
public class IKeyValuePairString_IVectorViewTextSegment: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment }

    open func get_Key() throws -> String {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, &result))
        }
        return .init(from: result)
    }

    open func get_Value() throws -> WindowsFoundation.AnyIVectorView<UWP.TextSegment>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment
    internal typealias SwiftABI = IKeyValuePairString_IVectorViewTextSegment
    internal typealias SwiftProjection = WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVectorView<UWP.TextSegment>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentImpl : IKeyValuePair, AbiInterfaceImpl {
    typealias K = String
    typealias V = WindowsFoundation.AnyIVectorView<UWP.TextSegment>?
    typealias Bridge = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.key)
    fileprivate var key : String {
        get { try! _default.get_Key() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.value)
    fileprivate var value : WindowsFoundation.AnyIVectorView<UWP.TextSegment>? {
        get { try! _default.get_Value() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRING: WindowsFoundation.IID {
    .init(Data1: 0x174f26c7, Data2: 0x79ea, Data3: 0x5f7c, Data4: ( 0xbd,0x70,0xac,0x44,0x57,0xf2,0xca,0xc8 ))// 174f26c7-79ea-5f7c-bd70-ac4457f2cac8
}

internal var __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGVTable: __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGVtbl = .init(
    QueryInterface: { __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.addRef($0) },
    Release: { __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Foundation.Collections.IVector`1<String>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Key: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.key
        $1?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value
        let resultWrapper = UWP.__x_ABI_C__FIVector_1_HSTRINGWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGBridge>
public class IKeyValuePairString_IVectorString: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRING }

    open func get_Key() throws -> String {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, &result))
        }
        return .init(from: result)
    }

    open func get_Value() throws -> WindowsFoundation.AnyIVector<String>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRING
    internal typealias SwiftABI = IKeyValuePairString_IVectorString
    internal typealias SwiftProjection = WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVector<String>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGImpl : IKeyValuePair, AbiInterfaceImpl {
    typealias K = String
    typealias V = WindowsFoundation.AnyIVector<String>?
    typealias Bridge = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.key)
    fileprivate var key : String {
        get { try! _default.get_Key() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.value)
    fileprivate var value : WindowsFoundation.AnyIVector<String>? {
        get { try! _default.get_Value() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue: WindowsFoundation.IID {
    .init(Data1: 0x93621bf0, Data2: 0xdae9, Data3: 0x5f00, Data4: ( 0x94,0xac,0x79,0x5a,0xa9,0x43,0xdc,0xa6 ))// 93621bf0-dae9-5f00-94ac-795aa943dca6
}

internal var __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVTable: __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVtbl = .init(
    QueryInterface: { __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.addRef($0) },
    Release: { __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Graphics.Imaging.BitmapTypedValue>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Key: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.key
        $1?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value
        result?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueBridge>
public class IKeyValuePairString_BitmapTypedValue: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue }

    open func get_Key() throws -> String {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, &result))
        }
        return .init(from: result)
    }

    open func get_Value() throws -> UWP.BitmapTypedValue? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_Graphics_Imaging.BitmapTypedValueBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue
    internal typealias SwiftABI = IKeyValuePairString_BitmapTypedValue
    internal typealias SwiftProjection = WindowsFoundation.AnyIKeyValuePair<String, UWP.BitmapTypedValue?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueImpl : IKeyValuePair, AbiInterfaceImpl {
    typealias K = String
    typealias V = UWP.BitmapTypedValue?
    typealias Bridge = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.key)
    fileprivate var key : String {
        get { try! _default.get_Key() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.value)
    fileprivate var value : UWP.BitmapTypedValue? {
        get { try! _default.get_Value() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainer: WindowsFoundation.IID {
    .init(Data1: 0x5adbc543, Data2: 0x2170, Data3: 0x5ad9, Data4: ( 0xb3,0x5e,0x96,0x8c,0xdb,0x78,0xfb,0x30 ))// 5adbc543-2170-5ad9-b35e-968cdb78fb30
}

internal var __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerVTable: __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerVtbl = .init(
    QueryInterface: { __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.addRef($0) },
    Release: { __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Storage.ApplicationDataContainer>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Key: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.key
        $1?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value
        result?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerBridge>
public class IKeyValuePairString_ApplicationDataContainer: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainer }

    open func get_Key() throws -> String {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, &result))
        }
        return .init(from: result)
    }

    open func get_Value() throws -> UWP.ApplicationDataContainer? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_Storage.ApplicationDataContainerBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainer
    internal typealias SwiftABI = IKeyValuePairString_ApplicationDataContainer
    internal typealias SwiftProjection = WindowsFoundation.AnyIKeyValuePair<String, UWP.ApplicationDataContainer?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerImpl : IKeyValuePair, AbiInterfaceImpl {
    typealias K = String
    typealias V = UWP.ApplicationDataContainer?
    typealias Bridge = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.key)
    fileprivate var key : String {
        get { try! _default.get_Key() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.value)
    fileprivate var value : UWP.ApplicationDataContainer? {
        get { try! _default.get_Value() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference: WindowsFoundation.IID {
    .init(Data1: 0xe5195792, Data2: 0xaeab, Data3: 0x56e8, Data4: ( 0xbd,0x30,0x13,0x72,0xc4,0x34,0x0b,0xf6 ))// e5195792-aeab-56e8-bd30-1372c4340bf6
}

internal var __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceVTable: __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceVtbl = .init(
    QueryInterface: { __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.addRef($0) },
    Release: { __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.Storage.Streams.RandomAccessStreamReference>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Key: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.key
        $1?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value
        result?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge>
public class IKeyValuePairString_RandomAccessStreamReference: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference }

    open func get_Key() throws -> String {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, &result))
        }
        return .init(from: result)
    }

    open func get_Value() throws -> UWP.RandomAccessStreamReference? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_Storage_Streams.RandomAccessStreamReferenceBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference
    internal typealias SwiftABI = IKeyValuePairString_RandomAccessStreamReference
    internal typealias SwiftProjection = WindowsFoundation.AnyIKeyValuePair<String, UWP.RandomAccessStreamReference?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceImpl : IKeyValuePair, AbiInterfaceImpl {
    typealias K = String
    typealias V = UWP.RandomAccessStreamReference?
    typealias Bridge = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.key)
    fileprivate var key : String {
        get { try! _default.get_Key() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.value)
    fileprivate var value : UWP.RandomAccessStreamReference? {
        get { try! _default.get_Value() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase: WindowsFoundation.IID {
    .init(Data1: 0x3b9a274f, Data2: 0x891d, Data3: 0x5208, Data4: ( 0x96,0xbb,0xe3,0xf4,0x0c,0x80,0x9e,0x9b ))// 3b9a274f-891d-5208-96bb-e3f40c809e9b
}

internal var __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseVTable: __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseVtbl = .init(
    QueryInterface: { __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.addRef($0) },
    Release: { __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IKeyValuePair`2<String, Windows.UI.Composition.ICompositionAnimationBase>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Key: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.key
        $1?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.value
        let resultWrapper = __ABI_Windows_UI_Composition.ICompositionAnimationBaseWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    }
)
typealias __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseBridge>
public class IKeyValuePairString_ICompositionAnimationBase: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase }

    open func get_Key() throws -> String {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, &result))
        }
        return .init(from: result)
    }

    open func get_Value() throws -> UWP.AnyICompositionAnimationBase? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Value(pThis, &resultAbi))
            }
        }
        return __ABI_Windows_UI_Composition.ICompositionAnimationBaseWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase
    internal typealias SwiftABI = IKeyValuePairString_ICompositionAnimationBase
    internal typealias SwiftProjection = WindowsFoundation.AnyIKeyValuePair<String, UWP.AnyICompositionAnimationBase?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseImpl : IKeyValuePair, AbiInterfaceImpl {
    typealias K = String
    typealias V = UWP.AnyICompositionAnimationBase?
    typealias Bridge = __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.key)
    fileprivate var key : String {
        get { try! _default.get_Key() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ikeyvaluepair-2.value)
    fileprivate var value : UWP.AnyICompositionAnimationBase? {
        get { try! _default.get_Value() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMapChangedEventArgs_1_HSTRING: WindowsFoundation.IID {
    .init(Data1: 0x60141efb, Data2: 0xf2f9, Data3: 0x5377, Data4: ( 0x96,0xfd,0xf8,0xc6,0x0d,0x95,0x58,0xb5 ))// 60141efb-f2f9-5377-96fd-f8c60d9558b5
}

internal var __x_ABI_C__FIMapChangedEventArgs_1_HSTRINGVTable: __x_ABI_C__FIMapChangedEventArgs_1_HSTRINGVtbl = .init(
    QueryInterface: { __x_ABI_C__FIMapChangedEventArgs_1_HSTRINGWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIMapChangedEventArgs_1_HSTRINGWrapper.addRef($0) },
    Release: { __x_ABI_C__FIMapChangedEventArgs_1_HSTRINGWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIMapChangedEventArgs_1_HSTRINGWrapper.IID
        $1!.pointee = 3
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMapChangedEventArgs`1<String>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_CollectionChange: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapChangedEventArgs_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.collectionChange
        $1?.initialize(to: result)
        return S_OK
    },

    get_Key: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapChangedEventArgs_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.key
        $1?.initialize(to: try! HString(result).detach())
        return S_OK
    }
)
typealias __x_ABI_C__FIMapChangedEventArgs_1_HSTRINGWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIMapChangedEventArgs_1_HSTRINGBridge>
public class IMapChangedEventArgsString: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIMapChangedEventArgs_1_HSTRING }

    open func get_CollectionChange() throws -> WindowsFoundation.CollectionChange {
        var result: __x_ABI_CWindows_CFoundation_CCollections_CCollectionChange = .init(0)
        _ = try perform(as: __x_ABI_C__FIMapChangedEventArgs_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_CollectionChange(pThis, &result))
        }
        return result
    }

    open func get_Key() throws -> String {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIMapChangedEventArgs_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Key(pThis, &result))
        }
        return .init(from: result)
    }

}

internal enum __x_ABI_C__FIMapChangedEventArgs_1_HSTRINGBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIMapChangedEventArgs_1_HSTRING
    internal typealias SwiftABI = IMapChangedEventArgsString
    internal typealias SwiftProjection = WindowsFoundation.AnyIMapChangedEventArgs<String>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMapChangedEventArgs_1_HSTRINGImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMapChangedEventArgs_1_HSTRINGVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIMapChangedEventArgs_1_HSTRINGImpl : IMapChangedEventArgs, AbiInterfaceImpl {
    typealias K = String
    typealias Bridge = __x_ABI_C__FIMapChangedEventArgs_1_HSTRINGBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapchangedeventargs-1.collectionchange)
    fileprivate var collectionChange : WindowsFoundation.CollectionChange {
        get { try! _default.get_CollectionChange() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapchangedeventargs-1.key)
    fileprivate var key : String {
        get { try! _default.get_Key() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistration: WindowsFoundation.IID {
    .init(Data1: 0x2c08602f, Data2: 0x40b1, Data3: 0x5e97, Data4: ( 0xae,0x21,0x5c,0x04,0xd7,0xfb,0x82,0x9c ))// 2c08602f-40b1-5e97-ae21-5c04d7fb829c
}

internal var __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationVTable: __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationVtbl = .init(
    QueryInterface: { __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.addRef($0) },
    Release: { __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMapView`2<Foundation.UUID, Windows.ApplicationModel.Background.BackgroundTaskRegistration>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: Foundation.UUID = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: Foundation.UUID = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    Split: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var first: WindowsFoundation.AnyIMapView<Foundation.UUID, UWP.BackgroundTaskRegistration?>?
        var second: WindowsFoundation.AnyIMapView<Foundation.UUID, UWP.BackgroundTaskRegistration?>?
        __unwrapped__instance.split(&first, &second)
        let firstWrapper = UWP.__x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper(first)
        firstWrapper?.copyTo($1)
        let secondWrapper = UWP.__x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper(second)
        secondWrapper?.copyTo($2)
        return S_OK
    }
)
typealias __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationBridge>
public class IMapViewUUID_BackgroundTaskRegistration: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistration }

    open func Lookup(_ key: Foundation.UUID) throws -> UWP.BackgroundTaskRegistration? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistration.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, .init(from: key), &resultAbi))
            }
        }
        return __IMPL_Windows_ApplicationModel_Background.BackgroundTaskRegistrationBridge.from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistration.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func HasKey(_ key: Foundation.UUID) throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistration.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, .init(from: key), &result))
        }
        return .init(from: result)
    }

    open func Split(_ first: inout WindowsFoundation.AnyIMapView<Foundation.UUID, UWP.BackgroundTaskRegistration?>?, _ second: inout WindowsFoundation.AnyIMapView<Foundation.UUID, UWP.BackgroundTaskRegistration?>?) throws {
        let (_first, _second) = try ComPtrs.initialize { (_firstAbi, _secondAbi) in
            _ = try perform(as: __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistration.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Split(pThis, &_firstAbi, &_secondAbi))
            }
        }
        first = UWP.__x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.unwrapFrom(abi: _first)
        second = UWP.__x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationWrapper.unwrapFrom(abi: _second)
    }

}

internal enum __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistration
    internal typealias SwiftABI = IMapViewUUID_BackgroundTaskRegistration
    internal typealias SwiftProjection = WindowsFoundation.AnyIMapView<Foundation.UUID, UWP.BackgroundTaskRegistration?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationImpl : IMapView, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.BackgroundTaskRegistration?>?
    typealias K = Foundation.UUID
    typealias V = UWP.BackgroundTaskRegistration?
    typealias Bridge = __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.lookup)
    fileprivate func lookup(_ key: Foundation.UUID) -> UWP.BackgroundTaskRegistration? {
        try! _default.Lookup(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.haskey)
    fileprivate func hasKey(_ key: Foundation.UUID) -> Bool {
        try! _default.HasKey(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.split)
    fileprivate func split(_ first: inout WindowsFoundation.AnyIMapView<Foundation.UUID, UWP.BackgroundTaskRegistration?>?, _ second: inout WindowsFoundation.AnyIMapView<Foundation.UUID, UWP.BackgroundTaskRegistration?>?) {
        try! _default.Split(&first, &second)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairUUID_BackgroundTaskRegistration! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.BackgroundTaskRegistration?>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistration: WindowsFoundation.IID {
    .init(Data1: 0x78c880f6, Data2: 0xa7dc, Data3: 0x5172, Data4: ( 0x89,0xda,0x77,0x49,0xfc,0x82,0xaa,0x82 ))// 78c880f6-a7dc-5172-89da-7749fc82aa82
}

internal var __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationVTable: __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationVtbl = .init(
    QueryInterface: { __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.addRef($0) },
    Release: { __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMapView`2<Foundation.UUID, Windows.ApplicationModel.Background.IBackgroundTaskRegistration>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: Foundation.UUID = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        let resultWrapper = __ABI_Windows_ApplicationModel_Background.IBackgroundTaskRegistrationWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: Foundation.UUID = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    Split: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var first: WindowsFoundation.AnyIMapView<Foundation.UUID, UWP.AnyIBackgroundTaskRegistration?>?
        var second: WindowsFoundation.AnyIMapView<Foundation.UUID, UWP.AnyIBackgroundTaskRegistration?>?
        __unwrapped__instance.split(&first, &second)
        let firstWrapper = UWP.__x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper(first)
        firstWrapper?.copyTo($1)
        let secondWrapper = UWP.__x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper(second)
        secondWrapper?.copyTo($2)
        return S_OK
    }
)
typealias __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationBridge>
public class IMapViewUUID_IBackgroundTaskRegistration: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistration }

    open func Lookup(_ key: Foundation.UUID) throws -> UWP.AnyIBackgroundTaskRegistration? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistration.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, .init(from: key), &resultAbi))
            }
        }
        return __ABI_Windows_ApplicationModel_Background.IBackgroundTaskRegistrationWrapper.unwrapFrom(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistration.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func HasKey(_ key: Foundation.UUID) throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistration.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, .init(from: key), &result))
        }
        return .init(from: result)
    }

    open func Split(_ first: inout WindowsFoundation.AnyIMapView<Foundation.UUID, UWP.AnyIBackgroundTaskRegistration?>?, _ second: inout WindowsFoundation.AnyIMapView<Foundation.UUID, UWP.AnyIBackgroundTaskRegistration?>?) throws {
        let (_first, _second) = try ComPtrs.initialize { (_firstAbi, _secondAbi) in
            _ = try perform(as: __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistration.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Split(pThis, &_firstAbi, &_secondAbi))
            }
        }
        first = UWP.__x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.unwrapFrom(abi: _first)
        second = UWP.__x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationWrapper.unwrapFrom(abi: _second)
    }

}

internal enum __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistration
    internal typealias SwiftABI = IMapViewUUID_IBackgroundTaskRegistration
    internal typealias SwiftProjection = WindowsFoundation.AnyIMapView<Foundation.UUID, UWP.AnyIBackgroundTaskRegistration?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationImpl : IMapView, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.AnyIBackgroundTaskRegistration?>?
    typealias K = Foundation.UUID
    typealias V = UWP.AnyIBackgroundTaskRegistration?
    typealias Bridge = __x_ABI_C__FIMapView_2_GUID___x_ABI_CWindows__CApplicationModel__CBackground__CIBackgroundTaskRegistrationBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.lookup)
    fileprivate func lookup(_ key: Foundation.UUID) -> UWP.AnyIBackgroundTaskRegistration? {
        try! _default.Lookup(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.haskey)
    fileprivate func hasKey(_ key: Foundation.UUID) -> Bool {
        try! _default.HasKey(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.split)
    fileprivate func split(_ first: inout WindowsFoundation.AnyIMapView<Foundation.UUID, UWP.AnyIBackgroundTaskRegistration?>?, _ second: inout WindowsFoundation.AnyIMapView<Foundation.UUID, UWP.AnyIBackgroundTaskRegistration?>?) {
        try! _default.Split(&first, &second)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairUUID_IBackgroundTaskRegistration! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<Foundation.UUID, UWP.AnyIBackgroundTaskRegistration?>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMapView_2_HSTRING_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0xbb78502a, Data2: 0xf79d, Data3: 0x54fa, Data4: ( 0x92,0xc9,0x90,0xc5,0x03,0x9f,0xdf,0x7e ))// bb78502a-f79d-54fa-92c9-90c5039fdf7e
}

internal var __x_ABI_C__FIMapView_2_HSTRING_IInspectableVTable: __x_ABI_C__FIMapView_2_HSTRING_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMapView`2<String, Any>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        let resultWrapper = __ABI_.AnyWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    Split: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var first: WindowsFoundation.AnyIMapView<String, Any?>?
        var second: WindowsFoundation.AnyIMapView<String, Any?>?
        __unwrapped__instance.split(&first, &second)
        let firstWrapper = UWP.__x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper(first)
        firstWrapper?.copyTo($1)
        let secondWrapper = UWP.__x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper(second)
        secondWrapper?.copyTo($2)
        return S_OK
    }
)
typealias __x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIMapView_2_HSTRING_IInspectableBridge>
public class IMapViewString_Any: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIMapView_2_HSTRING_IInspectable }

    open func Lookup(_ key: String) throws -> Any? {
        let (result) = try ComPtrs.initialize { resultAbi in
            let _key = try! HString(key)
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_IInspectable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, _key.get(), &resultAbi))
            }
        }
        return __ABI_.AnyWrapper.unwrapFrom(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func HasKey(_ key: String) throws -> Bool {
        var result: boolean = 0
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, _key.get(), &result))
        }
        return .init(from: result)
    }

    open func Split(_ first: inout WindowsFoundation.AnyIMapView<String, Any?>?, _ second: inout WindowsFoundation.AnyIMapView<String, Any?>?) throws {
        let (_first, _second) = try ComPtrs.initialize { (_firstAbi, _secondAbi) in
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_IInspectable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Split(pThis, &_firstAbi, &_secondAbi))
            }
        }
        first = UWP.__x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: _first)
        second = UWP.__x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: _second)
    }

}

internal enum __x_ABI_C__FIMapView_2_HSTRING_IInspectableBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIMapView_2_HSTRING_IInspectable
    internal typealias SwiftABI = IMapViewString_Any
    internal typealias SwiftProjection = WindowsFoundation.AnyIMapView<String, Any?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMapView_2_HSTRING_IInspectableImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMapView_2_HSTRING_IInspectableVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIMapView_2_HSTRING_IInspectableImpl : IMapView, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, Any?>?
    typealias K = String
    typealias V = Any?
    typealias Bridge = __x_ABI_C__FIMapView_2_HSTRING_IInspectableBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.lookup)
    fileprivate func lookup(_ key: String) -> Any? {
        try! _default.Lookup(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.haskey)
    fileprivate func hasKey(_ key: String) -> Bool {
        try! _default.HasKey(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.split)
    fileprivate func split(_ first: inout WindowsFoundation.AnyIMapView<String, Any?>?, _ second: inout WindowsFoundation.AnyIMapView<String, Any?>?) {
        try! _default.Split(&first, &second)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_Any! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, Any?>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMapView_2_HSTRING_HSTRING: WindowsFoundation.IID {
    .init(Data1: 0xac7f26f2, Data2: 0xfeb7, Data3: 0x5b2a, Data4: ( 0x8a,0xc4,0x34,0x5b,0xc6,0x2c,0xae,0xde ))// ac7f26f2-feb7-5b2a-8ac4-345bc62caede
}

internal var __x_ABI_C__FIMapView_2_HSTRING_HSTRINGVTable: __x_ABI_C__FIMapView_2_HSTRING_HSTRINGVtbl = .init(
    QueryInterface: { __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.addRef($0) },
    Release: { __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMapView`2<String, String>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        $2?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    Split: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var first: WindowsFoundation.AnyIMapView<String, String>?
        var second: WindowsFoundation.AnyIMapView<String, String>?
        __unwrapped__instance.split(&first, &second)
        let firstWrapper = UWP.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper(first)
        firstWrapper?.copyTo($1)
        let secondWrapper = UWP.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper(second)
        secondWrapper?.copyTo($2)
        return S_OK
    }
)
typealias __x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGBridge>
public class IMapViewString_String: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIMapView_2_HSTRING_HSTRING }

    open func Lookup(_ key: String) throws -> String {
        var result: HSTRING?
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, _key.get(), &result))
        }
        return .init(from: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func HasKey(_ key: String) throws -> Bool {
        var result: boolean = 0
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, _key.get(), &result))
        }
        return .init(from: result)
    }

    open func Split(_ first: inout WindowsFoundation.AnyIMapView<String, String>?, _ second: inout WindowsFoundation.AnyIMapView<String, String>?) throws {
        let (_first, _second) = try ComPtrs.initialize { (_firstAbi, _secondAbi) in
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Split(pThis, &_firstAbi, &_secondAbi))
            }
        }
        first = UWP.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: _first)
        second = UWP.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: _second)
    }

}

internal enum __x_ABI_C__FIMapView_2_HSTRING_HSTRINGBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIMapView_2_HSTRING_HSTRING
    internal typealias SwiftABI = IMapViewString_String
    internal typealias SwiftProjection = WindowsFoundation.AnyIMapView<String, String>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMapView_2_HSTRING_HSTRINGImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMapView_2_HSTRING_HSTRINGVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIMapView_2_HSTRING_HSTRINGImpl : IMapView, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, String>?
    typealias K = String
    typealias V = String
    typealias Bridge = __x_ABI_C__FIMapView_2_HSTRING_HSTRINGBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.lookup)
    fileprivate func lookup(_ key: String) -> String {
        try! _default.Lookup(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.haskey)
    fileprivate func hasKey(_ key: String) -> Bool {
        try! _default.HasKey(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.split)
    fileprivate func split(_ first: inout WindowsFoundation.AnyIMapView<String, String>?, _ second: inout WindowsFoundation.AnyIMapView<String, String>?) {
        try! _default.Split(&first, &second)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_String! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, String>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup: WindowsFoundation.IID {
    .init(Data1: 0xf6a9dc12, Data2: 0x01f7, Data3: 0x54f0, Data4: ( 0xa2,0x57,0xc4,0x04,0x81,0x5b,0x9c,0x1c ))// f6a9dc12-01f7-54f0-a257-c404815b9c1c
}

internal var __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupVTable: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupVtbl = .init(
    QueryInterface: { __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.addRef($0) },
    Release: { __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMapView`2<String, Windows.ApplicationModel.Background.BackgroundTaskRegistrationGroup>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    Split: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var first: WindowsFoundation.AnyIMapView<String, UWP.BackgroundTaskRegistrationGroup?>?
        var second: WindowsFoundation.AnyIMapView<String, UWP.BackgroundTaskRegistrationGroup?>?
        __unwrapped__instance.split(&first, &second)
        let firstWrapper = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper(first)
        firstWrapper?.copyTo($1)
        let secondWrapper = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper(second)
        secondWrapper?.copyTo($2)
        return S_OK
    }
)
typealias __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupBridge>
public class IMapViewString_BackgroundTaskRegistrationGroup: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup }

    open func Lookup(_ key: String) throws -> UWP.BackgroundTaskRegistrationGroup? {
        let (result) = try ComPtrs.initialize { resultAbi in
            let _key = try! HString(key)
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, _key.get(), &resultAbi))
            }
        }
        return __IMPL_Windows_ApplicationModel_Background.BackgroundTaskRegistrationGroupBridge.from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func HasKey(_ key: String) throws -> Bool {
        var result: boolean = 0
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, _key.get(), &result))
        }
        return .init(from: result)
    }

    open func Split(_ first: inout WindowsFoundation.AnyIMapView<String, UWP.BackgroundTaskRegistrationGroup?>?, _ second: inout WindowsFoundation.AnyIMapView<String, UWP.BackgroundTaskRegistrationGroup?>?) throws {
        let (_first, _second) = try ComPtrs.initialize { (_firstAbi, _secondAbi) in
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Split(pThis, &_firstAbi, &_secondAbi))
            }
        }
        first = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.unwrapFrom(abi: _first)
        second = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupWrapper.unwrapFrom(abi: _second)
    }

}

internal enum __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup
    internal typealias SwiftABI = IMapViewString_BackgroundTaskRegistrationGroup
    internal typealias SwiftProjection = WindowsFoundation.AnyIMapView<String, UWP.BackgroundTaskRegistrationGroup?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupImpl : IMapView, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, UWP.BackgroundTaskRegistrationGroup?>?
    typealias K = String
    typealias V = UWP.BackgroundTaskRegistrationGroup?
    typealias Bridge = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroupBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.lookup)
    fileprivate func lookup(_ key: String) -> UWP.BackgroundTaskRegistrationGroup? {
        try! _default.Lookup(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.haskey)
    fileprivate func hasKey(_ key: String) -> Bool {
        try! _default.HasKey(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.split)
    fileprivate func split(_ first: inout WindowsFoundation.AnyIMapView<String, UWP.BackgroundTaskRegistrationGroup?>?, _ second: inout WindowsFoundation.AnyIMapView<String, UWP.BackgroundTaskRegistrationGroup?>?) {
        try! _default.Split(&first, &second)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_BackgroundTaskRegistrationGroup! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, UWP.BackgroundTaskRegistrationGroup?>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment: WindowsFoundation.IID {
    .init(Data1: 0x91d443d6, Data2: 0x3777, Data3: 0x5102, Data4: ( 0xb0,0xbc,0x3d,0x41,0x83,0xa2,0x6f,0xf9 ))// 91d443d6-3777-5102-b0bc-3d4183a26ff9
}

internal var __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentVTable: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentVtbl = .init(
    QueryInterface: { __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.addRef($0) },
    Release: { __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMapView`2<String, Windows.Foundation.Collections.IVectorView`1<Windows.Data.Text.TextSegment>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        let resultWrapper = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    Split: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var first: WindowsFoundation.AnyIMapView<String, WindowsFoundation.AnyIVectorView<UWP.TextSegment>?>?
        var second: WindowsFoundation.AnyIMapView<String, WindowsFoundation.AnyIVectorView<UWP.TextSegment>?>?
        __unwrapped__instance.split(&first, &second)
        let firstWrapper = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper(first)
        firstWrapper?.copyTo($1)
        let secondWrapper = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper(second)
        secondWrapper?.copyTo($2)
        return S_OK
    }
)
typealias __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge>
public class IMapViewString_IVectorViewTextSegment: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment }

    open func Lookup(_ key: String) throws -> WindowsFoundation.AnyIVectorView<UWP.TextSegment>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            let _key = try! HString(key)
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, _key.get(), &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.unwrapFrom(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func HasKey(_ key: String) throws -> Bool {
        var result: boolean = 0
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, _key.get(), &result))
        }
        return .init(from: result)
    }

    open func Split(_ first: inout WindowsFoundation.AnyIMapView<String, WindowsFoundation.AnyIVectorView<UWP.TextSegment>?>?, _ second: inout WindowsFoundation.AnyIMapView<String, WindowsFoundation.AnyIVectorView<UWP.TextSegment>?>?) throws {
        let (_first, _second) = try ComPtrs.initialize { (_firstAbi, _secondAbi) in
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Split(pThis, &_firstAbi, &_secondAbi))
            }
        }
        first = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.unwrapFrom(abi: _first)
        second = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.unwrapFrom(abi: _second)
    }

}

internal enum __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment
    internal typealias SwiftABI = IMapViewString_IVectorViewTextSegment
    internal typealias SwiftProjection = WindowsFoundation.AnyIMapView<String, WindowsFoundation.AnyIVectorView<UWP.TextSegment>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentImpl : IMapView, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVectorView<UWP.TextSegment>?>?
    typealias K = String
    typealias V = WindowsFoundation.AnyIVectorView<UWP.TextSegment>?
    typealias Bridge = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.lookup)
    fileprivate func lookup(_ key: String) -> WindowsFoundation.AnyIVectorView<UWP.TextSegment>? {
        try! _default.Lookup(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.haskey)
    fileprivate func hasKey(_ key: String) -> Bool {
        try! _default.HasKey(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.split)
    fileprivate func split(_ first: inout WindowsFoundation.AnyIMapView<String, WindowsFoundation.AnyIVectorView<UWP.TextSegment>?>?, _ second: inout WindowsFoundation.AnyIMapView<String, WindowsFoundation.AnyIVectorView<UWP.TextSegment>?>?) {
        try! _default.Split(&first, &second)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_IVectorViewTextSegment! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVectorView<UWP.TextSegment>?>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRING: WindowsFoundation.IID {
    .init(Data1: 0x153f9c9c, Data2: 0xd22a, Data3: 0x5c9e, Data4: ( 0x9c,0x74,0x8b,0x85,0xc9,0x08,0xb0,0x00 ))// 153f9c9c-d22a-5c9e-9c74-8b85c908b000
}

internal var __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGVTable: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGVtbl = .init(
    QueryInterface: { __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.addRef($0) },
    Release: { __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMapView`2<String, Windows.Foundation.Collections.IVector`1<String>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        let resultWrapper = UWP.__x_ABI_C__FIVector_1_HSTRINGWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    Split: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var first: WindowsFoundation.AnyIMapView<String, WindowsFoundation.AnyIVector<String>?>?
        var second: WindowsFoundation.AnyIMapView<String, WindowsFoundation.AnyIVector<String>?>?
        __unwrapped__instance.split(&first, &second)
        let firstWrapper = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper(first)
        firstWrapper?.copyTo($1)
        let secondWrapper = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper(second)
        secondWrapper?.copyTo($2)
        return S_OK
    }
)
typealias __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGBridge>
public class IMapViewString_IVectorString: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRING }

    open func Lookup(_ key: String) throws -> WindowsFoundation.AnyIVector<String>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            let _key = try! HString(key)
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, _key.get(), &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func HasKey(_ key: String) throws -> Bool {
        var result: boolean = 0
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, _key.get(), &result))
        }
        return .init(from: result)
    }

    open func Split(_ first: inout WindowsFoundation.AnyIMapView<String, WindowsFoundation.AnyIVector<String>?>?, _ second: inout WindowsFoundation.AnyIMapView<String, WindowsFoundation.AnyIVector<String>?>?) throws {
        let (_first, _second) = try ComPtrs.initialize { (_firstAbi, _secondAbi) in
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Split(pThis, &_firstAbi, &_secondAbi))
            }
        }
        first = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: _first)
        second = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: _second)
    }

}

internal enum __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRING
    internal typealias SwiftABI = IMapViewString_IVectorString
    internal typealias SwiftProjection = WindowsFoundation.AnyIMapView<String, WindowsFoundation.AnyIVector<String>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGImpl : IMapView, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVector<String>?>?
    typealias K = String
    typealias V = WindowsFoundation.AnyIVector<String>?
    typealias Bridge = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.lookup)
    fileprivate func lookup(_ key: String) -> WindowsFoundation.AnyIVector<String>? {
        try! _default.Lookup(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.haskey)
    fileprivate func hasKey(_ key: String) -> Bool {
        try! _default.HasKey(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.split)
    fileprivate func split(_ first: inout WindowsFoundation.AnyIMapView<String, WindowsFoundation.AnyIVector<String>?>?, _ second: inout WindowsFoundation.AnyIMapView<String, WindowsFoundation.AnyIVector<String>?>?) {
        try! _default.Split(&first, &second)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_IVectorString! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVector<String>?>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue: WindowsFoundation.IID {
    .init(Data1: 0x9cda5a9a, Data2: 0x8924, Data3: 0x5b3b, Data4: ( 0x8b,0x19,0x89,0x4d,0x8d,0xa9,0x9d,0xde ))// 9cda5a9a-8924-5b3b-8b19-894d8da99dde
}

internal var __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVTable: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVtbl = .init(
    QueryInterface: { __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.addRef($0) },
    Release: { __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMapView`2<String, Windows.Graphics.Imaging.BitmapTypedValue>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    Split: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var first: WindowsFoundation.AnyIMapView<String, UWP.BitmapTypedValue?>?
        var second: WindowsFoundation.AnyIMapView<String, UWP.BitmapTypedValue?>?
        __unwrapped__instance.split(&first, &second)
        let firstWrapper = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper(first)
        firstWrapper?.copyTo($1)
        let secondWrapper = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper(second)
        secondWrapper?.copyTo($2)
        return S_OK
    }
)
typealias __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueBridge>
public class IMapViewString_BitmapTypedValue: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue }

    open func Lookup(_ key: String) throws -> UWP.BitmapTypedValue? {
        let (result) = try ComPtrs.initialize { resultAbi in
            let _key = try! HString(key)
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, _key.get(), &resultAbi))
            }
        }
        return __IMPL_Windows_Graphics_Imaging.BitmapTypedValueBridge.from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func HasKey(_ key: String) throws -> Bool {
        var result: boolean = 0
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, _key.get(), &result))
        }
        return .init(from: result)
    }

    open func Split(_ first: inout WindowsFoundation.AnyIMapView<String, UWP.BitmapTypedValue?>?, _ second: inout WindowsFoundation.AnyIMapView<String, UWP.BitmapTypedValue?>?) throws {
        let (_first, _second) = try ComPtrs.initialize { (_firstAbi, _secondAbi) in
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Split(pThis, &_firstAbi, &_secondAbi))
            }
        }
        first = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.unwrapFrom(abi: _first)
        second = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.unwrapFrom(abi: _second)
    }

}

internal enum __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue
    internal typealias SwiftABI = IMapViewString_BitmapTypedValue
    internal typealias SwiftProjection = WindowsFoundation.AnyIMapView<String, UWP.BitmapTypedValue?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueImpl : IMapView, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, UWP.BitmapTypedValue?>?
    typealias K = String
    typealias V = UWP.BitmapTypedValue?
    typealias Bridge = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.lookup)
    fileprivate func lookup(_ key: String) -> UWP.BitmapTypedValue? {
        try! _default.Lookup(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.haskey)
    fileprivate func hasKey(_ key: String) -> Bool {
        try! _default.HasKey(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.split)
    fileprivate func split(_ first: inout WindowsFoundation.AnyIMapView<String, UWP.BitmapTypedValue?>?, _ second: inout WindowsFoundation.AnyIMapView<String, UWP.BitmapTypedValue?>?) {
        try! _default.Split(&first, &second)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_BitmapTypedValue! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, UWP.BitmapTypedValue?>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainer: WindowsFoundation.IID {
    .init(Data1: 0x13624f8d, Data2: 0x85cc, Data3: 0x5780, Data4: ( 0xa7,0x8d,0x64,0xdb,0xa5,0x8f,0x2c,0x3c ))// 13624f8d-85cc-5780-a78d-64dba58f2c3c
}

internal var __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerVTable: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerVtbl = .init(
    QueryInterface: { __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.addRef($0) },
    Release: { __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMapView`2<String, Windows.Storage.ApplicationDataContainer>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    Split: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var first: WindowsFoundation.AnyIMapView<String, UWP.ApplicationDataContainer?>?
        var second: WindowsFoundation.AnyIMapView<String, UWP.ApplicationDataContainer?>?
        __unwrapped__instance.split(&first, &second)
        let firstWrapper = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper(first)
        firstWrapper?.copyTo($1)
        let secondWrapper = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper(second)
        secondWrapper?.copyTo($2)
        return S_OK
    }
)
typealias __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerBridge>
public class IMapViewString_ApplicationDataContainer: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainer }

    open func Lookup(_ key: String) throws -> UWP.ApplicationDataContainer? {
        let (result) = try ComPtrs.initialize { resultAbi in
            let _key = try! HString(key)
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, _key.get(), &resultAbi))
            }
        }
        return __IMPL_Windows_Storage.ApplicationDataContainerBridge.from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func HasKey(_ key: String) throws -> Bool {
        var result: boolean = 0
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainer.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, _key.get(), &result))
        }
        return .init(from: result)
    }

    open func Split(_ first: inout WindowsFoundation.AnyIMapView<String, UWP.ApplicationDataContainer?>?, _ second: inout WindowsFoundation.AnyIMapView<String, UWP.ApplicationDataContainer?>?) throws {
        let (_first, _second) = try ComPtrs.initialize { (_firstAbi, _secondAbi) in
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainer.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Split(pThis, &_firstAbi, &_secondAbi))
            }
        }
        first = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.unwrapFrom(abi: _first)
        second = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerWrapper.unwrapFrom(abi: _second)
    }

}

internal enum __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainer
    internal typealias SwiftABI = IMapViewString_ApplicationDataContainer
    internal typealias SwiftProjection = WindowsFoundation.AnyIMapView<String, UWP.ApplicationDataContainer?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerImpl : IMapView, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, UWP.ApplicationDataContainer?>?
    typealias K = String
    typealias V = UWP.ApplicationDataContainer?
    typealias Bridge = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CApplicationDataContainerBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.lookup)
    fileprivate func lookup(_ key: String) -> UWP.ApplicationDataContainer? {
        try! _default.Lookup(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.haskey)
    fileprivate func hasKey(_ key: String) -> Bool {
        try! _default.HasKey(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.split)
    fileprivate func split(_ first: inout WindowsFoundation.AnyIMapView<String, UWP.ApplicationDataContainer?>?, _ second: inout WindowsFoundation.AnyIMapView<String, UWP.ApplicationDataContainer?>?) {
        try! _default.Split(&first, &second)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_ApplicationDataContainer! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, UWP.ApplicationDataContainer?>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference: WindowsFoundation.IID {
    .init(Data1: 0x0a4ce7a5, Data2: 0xdfe0, Data3: 0x5796, Data4: ( 0xa4,0x38,0xef,0xfd,0xfa,0xa3,0x1f,0x1b ))// 0a4ce7a5-dfe0-5796-a438-effdfaa31f1b
}

internal var __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceVTable: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceVtbl = .init(
    QueryInterface: { __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.addRef($0) },
    Release: { __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMapView`2<String, Windows.Storage.Streams.RandomAccessStreamReference>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    Split: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var first: WindowsFoundation.AnyIMapView<String, UWP.RandomAccessStreamReference?>?
        var second: WindowsFoundation.AnyIMapView<String, UWP.RandomAccessStreamReference?>?
        __unwrapped__instance.split(&first, &second)
        let firstWrapper = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper(first)
        firstWrapper?.copyTo($1)
        let secondWrapper = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper(second)
        secondWrapper?.copyTo($2)
        return S_OK
    }
)
typealias __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge>
public class IMapViewString_RandomAccessStreamReference: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference }

    open func Lookup(_ key: String) throws -> UWP.RandomAccessStreamReference? {
        let (result) = try ComPtrs.initialize { resultAbi in
            let _key = try! HString(key)
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, _key.get(), &resultAbi))
            }
        }
        return __IMPL_Windows_Storage_Streams.RandomAccessStreamReferenceBridge.from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func HasKey(_ key: String) throws -> Bool {
        var result: boolean = 0
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, _key.get(), &result))
        }
        return .init(from: result)
    }

    open func Split(_ first: inout WindowsFoundation.AnyIMapView<String, UWP.RandomAccessStreamReference?>?, _ second: inout WindowsFoundation.AnyIMapView<String, UWP.RandomAccessStreamReference?>?) throws {
        let (_first, _second) = try ComPtrs.initialize { (_firstAbi, _secondAbi) in
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Split(pThis, &_firstAbi, &_secondAbi))
            }
        }
        first = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.unwrapFrom(abi: _first)
        second = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.unwrapFrom(abi: _second)
    }

}

internal enum __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference
    internal typealias SwiftABI = IMapViewString_RandomAccessStreamReference
    internal typealias SwiftProjection = WindowsFoundation.AnyIMapView<String, UWP.RandomAccessStreamReference?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceImpl : IMapView, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, UWP.RandomAccessStreamReference?>?
    typealias K = String
    typealias V = UWP.RandomAccessStreamReference?
    typealias Bridge = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.lookup)
    fileprivate func lookup(_ key: String) -> UWP.RandomAccessStreamReference? {
        try! _default.Lookup(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.haskey)
    fileprivate func hasKey(_ key: String) -> Bool {
        try! _default.HasKey(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.split)
    fileprivate func split(_ first: inout WindowsFoundation.AnyIMapView<String, UWP.RandomAccessStreamReference?>?, _ second: inout WindowsFoundation.AnyIMapView<String, UWP.RandomAccessStreamReference?>?) {
        try! _default.Split(&first, &second)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_RandomAccessStreamReference! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, UWP.RandomAccessStreamReference?>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase: WindowsFoundation.IID {
    .init(Data1: 0xb65e6ece, Data2: 0xd9af, Data3: 0x5d4a, Data4: ( 0xab,0xaa,0xc0,0x8e,0x34,0xa5,0xf8,0x15 ))// b65e6ece-d9af-5d4a-abaa-c08e34a5f815
}

internal var __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseVTable: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseVtbl = .init(
    QueryInterface: { __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.addRef($0) },
    Release: { __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMapView`2<String, Windows.UI.Composition.ICompositionAnimationBase>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        let resultWrapper = __ABI_Windows_UI_Composition.ICompositionAnimationBaseWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    Split: {
        guard let __unwrapped__instance = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        var first: WindowsFoundation.AnyIMapView<String, UWP.AnyICompositionAnimationBase?>?
        var second: WindowsFoundation.AnyIMapView<String, UWP.AnyICompositionAnimationBase?>?
        __unwrapped__instance.split(&first, &second)
        let firstWrapper = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper(first)
        firstWrapper?.copyTo($1)
        let secondWrapper = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper(second)
        secondWrapper?.copyTo($2)
        return S_OK
    }
)
typealias __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseBridge>
public class IMapViewString_ICompositionAnimationBase: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase }

    open func Lookup(_ key: String) throws -> UWP.AnyICompositionAnimationBase? {
        let (result) = try ComPtrs.initialize { resultAbi in
            let _key = try! HString(key)
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, _key.get(), &resultAbi))
            }
        }
        return __ABI_Windows_UI_Composition.ICompositionAnimationBaseWrapper.unwrapFrom(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func HasKey(_ key: String) throws -> Bool {
        var result: boolean = 0
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, _key.get(), &result))
        }
        return .init(from: result)
    }

    open func Split(_ first: inout WindowsFoundation.AnyIMapView<String, UWP.AnyICompositionAnimationBase?>?, _ second: inout WindowsFoundation.AnyIMapView<String, UWP.AnyICompositionAnimationBase?>?) throws {
        let (_first, _second) = try ComPtrs.initialize { (_firstAbi, _secondAbi) in
            _ = try perform(as: __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Split(pThis, &_firstAbi, &_secondAbi))
            }
        }
        first = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.unwrapFrom(abi: _first)
        second = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.unwrapFrom(abi: _second)
    }

}

internal enum __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase
    internal typealias SwiftABI = IMapViewString_ICompositionAnimationBase
    internal typealias SwiftProjection = WindowsFoundation.AnyIMapView<String, UWP.AnyICompositionAnimationBase?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseImpl : IMapView, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, UWP.AnyICompositionAnimationBase?>?
    typealias K = String
    typealias V = UWP.AnyICompositionAnimationBase?
    typealias Bridge = __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.lookup)
    fileprivate func lookup(_ key: String) -> UWP.AnyICompositionAnimationBase? {
        try! _default.Lookup(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.haskey)
    fileprivate func hasKey(_ key: String) -> Bool {
        try! _default.HasKey(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.split)
    fileprivate func split(_ first: inout WindowsFoundation.AnyIMapView<String, UWP.AnyICompositionAnimationBase?>?, _ second: inout WindowsFoundation.AnyIMapView<String, UWP.AnyICompositionAnimationBase?>?) {
        try! _default.Split(&first, &second)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_ICompositionAnimationBase! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imapview-2.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, UWP.AnyICompositionAnimationBase?>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMap_2_HSTRING_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0x1b0d3570, Data2: 0x0877, Data3: 0x5ec2, Data4: ( 0x8a,0x2c,0x3b,0x95,0x39,0x50,0x6a,0xca ))// 1b0d3570-0877-5ec2-8a2c-3b9539506aca
}

internal var __x_ABI_C__FIMap_2_HSTRING_IInspectableVTable: __x_ABI_C__FIMap_2_HSTRING_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMap`2<String, Any>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        let resultWrapper = __ABI_.AnyWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = UWP.__x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    Insert: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let value: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
        let result = __unwrapped__instance.insert(key, value)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    Remove: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        __unwrapped__instance.remove(key)
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    }
)
typealias __x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIMap_2_HSTRING_IInspectableBridge>
public class IMapString_Any: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIMap_2_HSTRING_IInspectable }

    open func Lookup(_ key: String) throws -> Any? {
        let (result) = try ComPtrs.initialize { resultAbi in
            let _key = try! HString(key)
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_IInspectable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, _key.get(), &resultAbi))
            }
        }
        return __ABI_.AnyWrapper.unwrapFrom(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func HasKey(_ key: String) throws -> Bool {
        var result: boolean = 0
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, _key.get(), &result))
        }
        return .init(from: result)
    }

    open func GetView() throws -> WindowsFoundation.AnyIMapView<String, Any?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_IInspectable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIMapView_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: result)
    }

    open func Insert(_ key: String, _ value: Any?) throws -> Bool {
        var result: boolean = 0
        let _key = try! HString(key)
        let valueWrapper = __ABI_.AnyWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Insert(pThis, _key.get(), _value, &result))
        }
        return .init(from: result)
    }

    open func Remove(_ key: String) throws {
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Remove(pThis, _key.get()))
        }
    }

    open func Clear() throws {
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

}

internal enum __x_ABI_C__FIMap_2_HSTRING_IInspectableBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIMap_2_HSTRING_IInspectable
    internal typealias SwiftABI = IMapString_Any
    internal typealias SwiftProjection = WindowsFoundation.AnyIMap<String, Any?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMap_2_HSTRING_IInspectableImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMap_2_HSTRING_IInspectableVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIMap_2_HSTRING_IInspectableImpl : IMap, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, Any?>?
    typealias K = String
    typealias V = Any?
    typealias Bridge = __x_ABI_C__FIMap_2_HSTRING_IInspectableBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.lookup)
    fileprivate func lookup(_ key: String) -> Any? {
        try! _default.Lookup(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.haskey)
    fileprivate func hasKey(_ key: String) -> Bool {
        try! _default.HasKey(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.getview)
    fileprivate func getView() -> WindowsFoundation.AnyIMapView<String, Any?>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.insert)
    fileprivate func insert(_ key: String, _ value: Any?) -> Bool {
        try! _default.Insert(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.remove)
    fileprivate func remove(_ key: String) {
        try! _default.Remove(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.clear)
    fileprivate func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_Any! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, Any?>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMap_2_HSTRING_HSTRING: WindowsFoundation.IID {
    .init(Data1: 0xf6d1f700, Data2: 0x49c2, Data3: 0x52ae, Data4: ( 0x81,0x54,0x82,0x6f,0x99,0x08,0x77,0x3c ))// f6d1f700-49c2-52ae-8154-826f9908773c
}

internal var __x_ABI_C__FIMap_2_HSTRING_HSTRINGVTable: __x_ABI_C__FIMap_2_HSTRING_HSTRINGVtbl = .init(
    QueryInterface: { __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.addRef($0) },
    Release: { __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_HSTRINGWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMap`2<String, String>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        $2?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = UWP.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    Insert: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let value: String = .init(from: $2)
        let result = __unwrapped__instance.insert(key, value)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    Remove: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        __unwrapped__instance.remove(key)
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    }
)
typealias __x_ABI_C__FIMap_2_HSTRING_HSTRINGWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIMap_2_HSTRING_HSTRINGBridge>
public class IMapString_String: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIMap_2_HSTRING_HSTRING }

    open func Lookup(_ key: String) throws -> String {
        var result: HSTRING?
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, _key.get(), &result))
        }
        return .init(from: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func HasKey(_ key: String) throws -> Bool {
        var result: boolean = 0
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, _key.get(), &result))
        }
        return .init(from: result)
    }

    open func GetView() throws -> WindowsFoundation.AnyIMapView<String, String>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIMapView_2_HSTRING_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    open func Insert(_ key: String, _ value: String) throws -> Bool {
        var result: boolean = 0
        let _key = try! HString(key)
        let _value = try! HString(value)
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Insert(pThis, _key.get(), _value.get(), &result))
        }
        return .init(from: result)
    }

    open func Remove(_ key: String) throws {
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Remove(pThis, _key.get()))
        }
    }

    open func Clear() throws {
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

}

internal enum __x_ABI_C__FIMap_2_HSTRING_HSTRINGBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIMap_2_HSTRING_HSTRING
    internal typealias SwiftABI = IMapString_String
    internal typealias SwiftProjection = WindowsFoundation.AnyIMap<String, String>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMap_2_HSTRING_HSTRINGImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMap_2_HSTRING_HSTRINGVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIMap_2_HSTRING_HSTRINGImpl : IMap, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, String>?
    typealias K = String
    typealias V = String
    typealias Bridge = __x_ABI_C__FIMap_2_HSTRING_HSTRINGBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.lookup)
    fileprivate func lookup(_ key: String) -> String {
        try! _default.Lookup(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.haskey)
    fileprivate func hasKey(_ key: String) -> Bool {
        try! _default.HasKey(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.getview)
    fileprivate func getView() -> WindowsFoundation.AnyIMapView<String, String>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.insert)
    fileprivate func insert(_ key: String, _ value: String) -> Bool {
        try! _default.Insert(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.remove)
    fileprivate func remove(_ key: String) {
        try! _default.Remove(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.clear)
    fileprivate func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_String! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, String>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment: WindowsFoundation.IID {
    .init(Data1: 0xa31b6540, Data2: 0xb2b1, Data3: 0x536d, Data4: ( 0x81,0x8f,0x8a,0xde,0x70,0x51,0xc3,0xb3 ))// a31b6540-b2b1-536d-818f-8ade7051c3b3
}

internal var __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentVTable: __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentVtbl = .init(
    QueryInterface: { __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.addRef($0) },
    Release: { __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMap`2<String, Windows.Foundation.Collections.IVectorView`1<Windows.Data.Text.TextSegment>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        let resultWrapper = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    Insert: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let value: WindowsFoundation.AnyIVectorView<UWP.TextSegment>? = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.unwrapFrom(abi: ComPtr($2))
        let result = __unwrapped__instance.insert(key, value)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    Remove: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        __unwrapped__instance.remove(key)
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    }
)
typealias __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge>
public class IMapString_IVectorViewTextSegment: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment }

    open func Lookup(_ key: String) throws -> WindowsFoundation.AnyIVectorView<UWP.TextSegment>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            let _key = try! HString(key)
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, _key.get(), &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.unwrapFrom(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func HasKey(_ key: String) throws -> Bool {
        var result: boolean = 0
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, _key.get(), &result))
        }
        return .init(from: result)
    }

    open func GetView() throws -> WindowsFoundation.AnyIMapView<String, WindowsFoundation.AnyIVectorView<UWP.TextSegment>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.unwrapFrom(abi: result)
    }

    open func Insert(_ key: String, _ value: WindowsFoundation.AnyIVectorView<UWP.TextSegment>?) throws -> Bool {
        var result: boolean = 0
        let _key = try! HString(key)
        let valueWrapper = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Insert(pThis, _key.get(), _value, &result))
        }
        return .init(from: result)
    }

    open func Remove(_ key: String) throws {
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Remove(pThis, _key.get()))
        }
    }

    open func Clear() throws {
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

}

internal enum __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment
    internal typealias SwiftABI = IMapString_IVectorViewTextSegment
    internal typealias SwiftProjection = WindowsFoundation.AnyIMap<String, WindowsFoundation.AnyIVectorView<UWP.TextSegment>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentImpl : IMap, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVectorView<UWP.TextSegment>?>?
    typealias K = String
    typealias V = WindowsFoundation.AnyIVectorView<UWP.TextSegment>?
    typealias Bridge = __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.lookup)
    fileprivate func lookup(_ key: String) -> WindowsFoundation.AnyIVectorView<UWP.TextSegment>? {
        try! _default.Lookup(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.haskey)
    fileprivate func hasKey(_ key: String) -> Bool {
        try! _default.HasKey(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.getview)
    fileprivate func getView() -> WindowsFoundation.AnyIMapView<String, WindowsFoundation.AnyIVectorView<UWP.TextSegment>?>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.insert)
    fileprivate func insert(_ key: String, _ value: WindowsFoundation.AnyIVectorView<UWP.TextSegment>?) -> Bool {
        try! _default.Insert(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.remove)
    fileprivate func remove(_ key: String) {
        try! _default.Remove(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.clear)
    fileprivate func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_IVectorViewTextSegment! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVectorView<UWP.TextSegment>?>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRING: WindowsFoundation.IID {
    .init(Data1: 0xe475ca9d, Data2: 0x6afb, Data3: 0x5992, Data4: ( 0x99,0x3e,0x53,0xe6,0xef,0x7a,0x9e,0xcd ))// e475ca9d-6afb-5992-993e-53e6ef7a9ecd
}

internal var __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGVTable: __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGVtbl = .init(
    QueryInterface: { __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.addRef($0) },
    Release: { __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMap`2<String, Windows.Foundation.Collections.IVector`1<String>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        let resultWrapper = UWP.__x_ABI_C__FIVector_1_HSTRINGWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    Insert: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let value: WindowsFoundation.AnyIVector<String>? = UWP.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: ComPtr($2))
        let result = __unwrapped__instance.insert(key, value)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    Remove: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        __unwrapped__instance.remove(key)
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    }
)
typealias __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGBridge>
public class IMapString_IVectorString: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRING }

    open func Lookup(_ key: String) throws -> WindowsFoundation.AnyIVector<String>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            let _key = try! HString(key)
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, _key.get(), &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func HasKey(_ key: String) throws -> Bool {
        var result: boolean = 0
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, _key.get(), &result))
        }
        return .init(from: result)
    }

    open func GetView() throws -> WindowsFoundation.AnyIMapView<String, WindowsFoundation.AnyIVector<String>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    open func Insert(_ key: String, _ value: WindowsFoundation.AnyIVector<String>?) throws -> Bool {
        var result: boolean = 0
        let _key = try! HString(key)
        let valueWrapper = UWP.__x_ABI_C__FIVector_1_HSTRINGWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Insert(pThis, _key.get(), _value, &result))
        }
        return .init(from: result)
    }

    open func Remove(_ key: String) throws {
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Remove(pThis, _key.get()))
        }
    }

    open func Clear() throws {
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

}

internal enum __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRING
    internal typealias SwiftABI = IMapString_IVectorString
    internal typealias SwiftProjection = WindowsFoundation.AnyIMap<String, WindowsFoundation.AnyIVector<String>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGImpl : IMap, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVector<String>?>?
    typealias K = String
    typealias V = WindowsFoundation.AnyIVector<String>?
    typealias Bridge = __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRINGBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.lookup)
    fileprivate func lookup(_ key: String) -> WindowsFoundation.AnyIVector<String>? {
        try! _default.Lookup(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.haskey)
    fileprivate func hasKey(_ key: String) -> Bool {
        try! _default.HasKey(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.getview)
    fileprivate func getView() -> WindowsFoundation.AnyIMapView<String, WindowsFoundation.AnyIVector<String>?>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.insert)
    fileprivate func insert(_ key: String, _ value: WindowsFoundation.AnyIVector<String>?) -> Bool {
        try! _default.Insert(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.remove)
    fileprivate func remove(_ key: String) {
        try! _default.Remove(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.clear)
    fileprivate func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_IVectorString! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, WindowsFoundation.AnyIVector<String>?>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue: WindowsFoundation.IID {
    .init(Data1: 0x2c70ef8d, Data2: 0x5d4c, Data3: 0x5185, Data4: ( 0x8d,0xb7,0xfe,0xd8,0x77,0x28,0x16,0x5d ))// 2c70ef8d-5d4c-5185-8db7-fed87728165d
}

internal var __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVTable: __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVtbl = .init(
    QueryInterface: { __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.addRef($0) },
    Release: { __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMap`2<String, Windows.Graphics.Imaging.BitmapTypedValue>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    Insert: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let value: UWP.BitmapTypedValue? = __IMPL_Windows_Graphics_Imaging.BitmapTypedValueBridge.from(abi: ComPtr($2))
        let result = __unwrapped__instance.insert(key, value)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    Remove: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        __unwrapped__instance.remove(key)
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    }
)
typealias __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueBridge>
public class IMapString_BitmapTypedValue: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue }

    open func Lookup(_ key: String) throws -> UWP.BitmapTypedValue? {
        let (result) = try ComPtrs.initialize { resultAbi in
            let _key = try! HString(key)
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, _key.get(), &resultAbi))
            }
        }
        return __IMPL_Windows_Graphics_Imaging.BitmapTypedValueBridge.from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func HasKey(_ key: String) throws -> Bool {
        var result: boolean = 0
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, _key.get(), &result))
        }
        return .init(from: result)
    }

    open func GetView() throws -> WindowsFoundation.AnyIMapView<String, UWP.BitmapTypedValue?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueWrapper.unwrapFrom(abi: result)
    }

    open func Insert(_ key: String, _ value: UWP.BitmapTypedValue?) throws -> Bool {
        var result: boolean = 0
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Insert(pThis, _key.get(), RawPointer(value), &result))
        }
        return .init(from: result)
    }

    open func Remove(_ key: String) throws {
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Remove(pThis, _key.get()))
        }
    }

    open func Clear() throws {
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

}

internal enum __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValue
    internal typealias SwiftABI = IMapString_BitmapTypedValue
    internal typealias SwiftProjection = WindowsFoundation.AnyIMap<String, UWP.BitmapTypedValue?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueImpl : IMap, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, UWP.BitmapTypedValue?>?
    typealias K = String
    typealias V = UWP.BitmapTypedValue?
    typealias Bridge = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CGraphics__CImaging__CBitmapTypedValueBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.lookup)
    fileprivate func lookup(_ key: String) -> UWP.BitmapTypedValue? {
        try! _default.Lookup(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.haskey)
    fileprivate func hasKey(_ key: String) -> Bool {
        try! _default.HasKey(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.getview)
    fileprivate func getView() -> WindowsFoundation.AnyIMapView<String, UWP.BitmapTypedValue?>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.insert)
    fileprivate func insert(_ key: String, _ value: UWP.BitmapTypedValue?) -> Bool {
        try! _default.Insert(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.remove)
    fileprivate func remove(_ key: String) {
        try! _default.Remove(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.clear)
    fileprivate func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_BitmapTypedValue! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, UWP.BitmapTypedValue?>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference: WindowsFoundation.IID {
    .init(Data1: 0xe5d2ccfc, Data2: 0x825a, Data3: 0x5a8e, Data4: ( 0x82,0xaa,0x09,0x5e,0xd5,0xdb,0xd5,0xd1 ))// e5d2ccfc-825a-5a8e-82aa-095ed5dbd5d1
}

internal var __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceVTable: __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceVtbl = .init(
    QueryInterface: { __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.addRef($0) },
    Release: { __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMap`2<String, Windows.Storage.Streams.RandomAccessStreamReference>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    Insert: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let value: UWP.RandomAccessStreamReference? = __IMPL_Windows_Storage_Streams.RandomAccessStreamReferenceBridge.from(abi: ComPtr($2))
        let result = __unwrapped__instance.insert(key, value)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    Remove: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        __unwrapped__instance.remove(key)
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    }
)
typealias __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge>
public class IMapString_RandomAccessStreamReference: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference }

    open func Lookup(_ key: String) throws -> UWP.RandomAccessStreamReference? {
        let (result) = try ComPtrs.initialize { resultAbi in
            let _key = try! HString(key)
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, _key.get(), &resultAbi))
            }
        }
        return __IMPL_Windows_Storage_Streams.RandomAccessStreamReferenceBridge.from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func HasKey(_ key: String) throws -> Bool {
        var result: boolean = 0
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, _key.get(), &result))
        }
        return .init(from: result)
    }

    open func GetView() throws -> WindowsFoundation.AnyIMapView<String, UWP.RandomAccessStreamReference?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.unwrapFrom(abi: result)
    }

    open func Insert(_ key: String, _ value: UWP.RandomAccessStreamReference?) throws -> Bool {
        var result: boolean = 0
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Insert(pThis, _key.get(), RawPointer(value), &result))
        }
        return .init(from: result)
    }

    open func Remove(_ key: String) throws {
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Remove(pThis, _key.get()))
        }
    }

    open func Clear() throws {
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

}

internal enum __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference
    internal typealias SwiftABI = IMapString_RandomAccessStreamReference
    internal typealias SwiftProjection = WindowsFoundation.AnyIMap<String, UWP.RandomAccessStreamReference?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceImpl : IMap, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, UWP.RandomAccessStreamReference?>?
    typealias K = String
    typealias V = UWP.RandomAccessStreamReference?
    typealias Bridge = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.lookup)
    fileprivate func lookup(_ key: String) -> UWP.RandomAccessStreamReference? {
        try! _default.Lookup(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.haskey)
    fileprivate func hasKey(_ key: String) -> Bool {
        try! _default.HasKey(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.getview)
    fileprivate func getView() -> WindowsFoundation.AnyIMapView<String, UWP.RandomAccessStreamReference?>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.insert)
    fileprivate func insert(_ key: String, _ value: UWP.RandomAccessStreamReference?) -> Bool {
        try! _default.Insert(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.remove)
    fileprivate func remove(_ key: String) {
        try! _default.Remove(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.clear)
    fileprivate func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_RandomAccessStreamReference! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, UWP.RandomAccessStreamReference?>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase: WindowsFoundation.IID {
    .init(Data1: 0x4ba9aa1d, Data2: 0x57ac, Data3: 0x54de, Data4: ( 0xa8,0x07,0xb5,0x2e,0x68,0x9b,0xfc,0x04 ))// 4ba9aa1d-57ac-54de-a807-b52e689bfc04
}

internal var __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseVTable: __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseVtbl = .init(
    QueryInterface: { __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.addRef($0) },
    Release: { __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IMap`2<String, Windows.UI.Composition.ICompositionAnimationBase>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    Lookup: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.lookup(key)
        let resultWrapper = __ABI_Windows_UI_Composition.ICompositionAnimationBaseWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    HasKey: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let result = __unwrapped__instance.hasKey(key)
        $2?.initialize(to: .init(from: result))
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    Insert: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        let value: UWP.AnyICompositionAnimationBase? = __ABI_Windows_UI_Composition.ICompositionAnimationBaseWrapper.unwrapFrom(abi: ComPtr($2))
        let result = __unwrapped__instance.insert(key, value)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    Remove: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let key: String = .init(from: $1)
        __unwrapped__instance.remove(key)
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    }
)
typealias __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseBridge>
public class IMapString_ICompositionAnimationBase: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase }

    open func Lookup(_ key: String) throws -> UWP.AnyICompositionAnimationBase? {
        let (result) = try ComPtrs.initialize { resultAbi in
            let _key = try! HString(key)
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Lookup(pThis, _key.get(), &resultAbi))
            }
        }
        return __ABI_Windows_UI_Composition.ICompositionAnimationBaseWrapper.unwrapFrom(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func HasKey(_ key: String) throws -> Bool {
        var result: boolean = 0
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.HasKey(pThis, _key.get(), &result))
        }
        return .init(from: result)
    }

    open func GetView() throws -> WindowsFoundation.AnyIMapView<String, UWP.AnyICompositionAnimationBase?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseWrapper.unwrapFrom(abi: result)
    }

    open func Insert(_ key: String, _ value: UWP.AnyICompositionAnimationBase?) throws -> Bool {
        var result: boolean = 0
        let _key = try! HString(key)
        let valueWrapper = __ABI_Windows_UI_Composition.ICompositionAnimationBaseWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Insert(pThis, _key.get(), _value, &result))
        }
        return .init(from: result)
    }

    open func Remove(_ key: String) throws {
        let _key = try! HString(key)
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Remove(pThis, _key.get()))
        }
    }

    open func Clear() throws {
        _ = try perform(as: __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

}

internal enum __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBase
    internal typealias SwiftABI = IMapString_ICompositionAnimationBase
    internal typealias SwiftProjection = WindowsFoundation.AnyIMap<String, UWP.AnyICompositionAnimationBase?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseImpl : IMap, AbiInterfaceImpl {
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, UWP.AnyICompositionAnimationBase?>?
    typealias K = String
    typealias V = UWP.AnyICompositionAnimationBase?
    typealias Bridge = __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CUI__CComposition__CICompositionAnimationBaseBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.lookup)
    fileprivate func lookup(_ key: String) -> UWP.AnyICompositionAnimationBase? {
        try! _default.Lookup(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.haskey)
    fileprivate func hasKey(_ key: String) -> Bool {
        try! _default.HasKey(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.getview)
    fileprivate func getView() -> WindowsFoundation.AnyIMapView<String, UWP.AnyICompositionAnimationBase?>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.insert)
    fileprivate func insert(_ key: String, _ value: UWP.AnyICompositionAnimationBase?) -> Bool {
        try! _default.Insert(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.remove)
    fileprivate func remove(_ key: String) {
        try! _default.Remove(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.clear)
    fileprivate func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_ICompositionAnimationBase! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.imap-2.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, UWP.AnyICompositionAnimationBase?>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIObservableMap_2_HSTRING_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0x236aac9d, Data2: 0xfb12, Data3: 0x5c4d, Data4: ( 0xa4,0x1c,0x9e,0x44,0x5f,0xb4,0xd7,0xec ))// 236aac9d-fb12-5c4d-a41c-9e445fb4d7ec
}

internal var __x_ABI_C__FIObservableMap_2_HSTRING_IInspectableVTable: __x_ABI_C__FIObservableMap_2_HSTRING_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FIObservableMap_2_HSTRING_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIObservableMap_2_HSTRING_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FIObservableMap_2_HSTRING_IInspectableWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 5).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIObservableMap_2_HSTRING_IInspectableWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.IID
        iids[4] = UWP.__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING_IInspectableWrapper.IID
        $1!.pointee = 5
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IObservableMap`2<String, Any>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    add_MapChanged: {
        guard let __unwrapped__instance = __x_ABI_C__FIObservableMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let vhnd = UWP.__x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        let result = __unwrapped__instance.mapChanged.addHandler(vhnd)
        $2?.initialize(to: .from(swift: result))
        return S_OK
    },

    remove_MapChanged: {
        guard let __unwrapped__instance = __x_ABI_C__FIObservableMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let token: EventRegistrationToken = $1
        __unwrapped__instance.mapChanged.removeHandler(token)
        return S_OK
    }
)
typealias __x_ABI_C__FIObservableMap_2_HSTRING_IInspectableWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIObservableMap_2_HSTRING_IInspectableBridge>
public class IObservableMapString_Any: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIObservableMap_2_HSTRING_IInspectable }

    open func add_MapChanged(_ vhnd: MapChangedEventHandler<String, Any?>?) throws -> EventRegistrationToken {
        var result: EventRegistrationToken = .init()
        let vhndWrapper = UWP.__x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectableWrapper(vhnd)
        let _vhnd = try! vhndWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIObservableMap_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.add_MapChanged(pThis, _vhnd, &result))
        }
        return result
    }

    open func remove_MapChanged(_ token: EventRegistrationToken) throws {
        _ = try perform(as: __x_ABI_C__FIObservableMap_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.remove_MapChanged(pThis, token))
        }
    }

}

internal enum __x_ABI_C__FIObservableMap_2_HSTRING_IInspectableBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIObservableMap_2_HSTRING_IInspectable
    internal typealias SwiftABI = IObservableMapString_Any
    internal typealias SwiftProjection = WindowsFoundation.AnyIObservableMap<String, Any?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIObservableMap_2_HSTRING_IInspectableImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIObservableMap_2_HSTRING_IInspectableVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIObservableMap_2_HSTRING_IInspectableImpl : IObservableMap, AbiInterfaceImpl {
    typealias K = String
    typealias V = Any?
    typealias T = WindowsFoundation.AnyIKeyValuePair<String, Any?>?
    typealias Bridge = __x_ABI_C__FIObservableMap_2_HSTRING_IInspectableBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablemap-2.mapchanged)
    fileprivate lazy var mapChanged : Event<MapChangedEventHandler<String, Any?>> = {
      .init(
        add: { [weak self] in
          guard let this = self?._default else { return .init() }
          return try! this.add_MapChanged($0)
        },
        remove: { [weak self] in
         try? self?._default.remove_MapChanged($0)
       }
      )
    }()

    private lazy var _IMap: IMapString_Any! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablemap-2.lookup)
    fileprivate func lookup(_ key: String) -> Any? {
        try! _IMap.Lookup(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablemap-2.haskey)
    fileprivate func hasKey(_ key: String) -> Bool {
        try! _IMap.HasKey(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablemap-2.getview)
    fileprivate func getView() -> WindowsFoundation.AnyIMapView<String, Any?>? {
        try! _IMap.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablemap-2.insert)
    fileprivate func insert(_ key: String, _ value: Any?) -> Bool {
        try! _IMap.Insert(key, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablemap-2.remove)
    fileprivate func remove(_ key: String) {
        try! _IMap.Remove(key)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablemap-2.clear)
    fileprivate func clear() {
        try! _IMap.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablemap-2.size)
    fileprivate var size : UInt32 {
        get { try! _IMap.get_Size() }
    }

    private lazy var _IIterable: IIterableIKeyValuePairString_Any! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.iobservablemap-2.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<WindowsFoundation.AnyIKeyValuePair<String, Any?>?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1_float: WindowsFoundation.IID {
    .init(Data1: 0x7bca64fd, Data2: 0x150c, Data3: 0x5d50, Data4: ( 0xb5,0x6b,0x9f,0x4f,0x47,0x4c,0x59,0x30 ))// 7bca64fd-150c-5d50-b56b-9f4f474c5930
}

internal var __x_ABI_C__FIVectorView_1_floatVTable: __x_ABI_C__FIVectorView_1_floatVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1_floatWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1_floatWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1_floatWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVectorView_1_floatWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1_floatWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Float>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1_floatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        $2?.initialize(to: result)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1_floatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1_floatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: Float = $1
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1_floatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [Float] = .from(abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3)
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1_floatWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVectorView_1_floatBridge>
public class IVectorViewFloat: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1_float }

    open func GetAt(_ index: UInt32) throws -> Float {
        var result: FLOAT = 0.0
        _ = try perform(as: __x_ABI_C__FIVectorView_1_float.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
        }
        return result
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1_float.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: Float, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1_float.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [Float]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1_float.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1_floatBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1_float
    internal typealias SwiftABI = IVectorViewFloat
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<Float>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1_floatImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1_floatVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1_floatImpl : IVectorView, AbiInterfaceImpl {
    typealias T = Float
    typealias Bridge = __x_ABI_C__FIVectorView_1_floatBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> Float {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: Float, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [Float]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableFloat! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<Float>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1_HSTRING: WindowsFoundation.IID {
    .init(Data1: 0x2f13c006, Data2: 0xa03a, Data3: 0x5f69, Data4: ( 0xb0,0x90,0x75,0xa4,0x3e,0x33,0x42,0x3e ))// 2f13c006-a03a-5f69-b090-75a43e33423e
}

internal var __x_ABI_C__FIVectorView_1_HSTRINGVTable: __x_ABI_C__FIVectorView_1_HSTRINGVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1_HSTRINGWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1_HSTRINGWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1_HSTRINGWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1_HSTRINGWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<String>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        $2?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: String = .init(from: $1)
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [String] = .from(abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        do {
            try items.fill(abi: $3)
        } catch { return failWith(error: error) }
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1_HSTRINGWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVectorView_1_HSTRINGBridge>
public class IVectorViewString: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1_HSTRING }

    open func GetAt(_ index: UInt32) throws -> String {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIVectorView_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
        }
        return .init(from: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: String, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        let _value = try! HString(value)
        _ = try perform(as: __x_ABI_C__FIVectorView_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, _value.get(), &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [String]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1_HSTRINGBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1_HSTRING
    internal typealias SwiftABI = IVectorViewString
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<String>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1_HSTRINGImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1_HSTRINGVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1_HSTRINGImpl : IVectorView, AbiInterfaceImpl {
    typealias T = String
    typealias Bridge = __x_ABI_C__FIVectorView_1_HSTRINGBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> String {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: String, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [String]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableString! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<String>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo: WindowsFoundation.IID {
    .init(Data1: 0x8246ed12, Data2: 0x33e8, Data3: 0x52b3, Data4: ( 0xa5,0xc5,0x19,0x77,0x9d,0xe9,0x99,0x9e ))// 8246ed12-33e8-52b3-a5c5-19779de9999e
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoVTable: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.AppInfo>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.AppInfo? = __IMPL_Windows_ApplicationModel.AppInfoBridge.from(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [UWP.AppInfo?] = .from(abiBridge: __IMPL_Windows_ApplicationModel.AppInfoBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: __IMPL_Windows_ApplicationModel.AppInfoBridge.self)
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoBridge>
public class IVectorViewAppInfo: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo }

    open func GetAt(_ index: UInt32) throws -> UWP.AppInfo? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return __IMPL_Windows_ApplicationModel.AppInfoBridge.from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: UWP.AppInfo?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, RawPointer(value), &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [UWP.AppInfo?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_ApplicationModel.AppInfoBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_ApplicationModel.AppInfoBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo
    internal typealias SwiftABI = IVectorViewAppInfo
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<UWP.AppInfo?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoImpl : IVectorView, AbiInterfaceImpl {
    typealias T = UWP.AppInfo?
    typealias Bridge = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> UWP.AppInfo? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: UWP.AppInfo?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [UWP.AppInfo?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableAppInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.AppInfo?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView: WindowsFoundation.IID {
    .init(Data1: 0xde9e16c4, Data2: 0x1b7c, Data3: 0x5126, Data4: ( 0xb1,0xd8,0x7c,0xd0,0x4f,0x13,0xbd,0x08 ))// de9e16c4-1b7c-5126-b1d8-7cd04f13bd08
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewVTable: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.Core.CoreApplicationView>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.CoreApplicationView? = __IMPL_Windows_ApplicationModel_Core.CoreApplicationViewBridge.from(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [UWP.CoreApplicationView?] = .from(abiBridge: __IMPL_Windows_ApplicationModel_Core.CoreApplicationViewBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: __IMPL_Windows_ApplicationModel_Core.CoreApplicationViewBridge.self)
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewBridge>
public class IVectorViewCoreApplicationView: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView }

    open func GetAt(_ index: UInt32) throws -> UWP.CoreApplicationView? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return __IMPL_Windows_ApplicationModel_Core.CoreApplicationViewBridge.from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: UWP.CoreApplicationView?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, RawPointer(value), &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [UWP.CoreApplicationView?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_ApplicationModel_Core.CoreApplicationViewBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_ApplicationModel_Core.CoreApplicationViewBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView
    internal typealias SwiftABI = IVectorViewCoreApplicationView
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<UWP.CoreApplicationView?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewImpl : IVectorView, AbiInterfaceImpl {
    typealias T = UWP.CoreApplicationView?
    typealias Bridge = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> UWP.CoreApplicationView? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: UWP.CoreApplicationView?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [UWP.CoreApplicationView?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableCoreApplicationView! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.CoreApplicationView?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItem: WindowsFoundation.IID {
    .init(Data1: 0xc91de16d, Data2: 0x13ff, Data3: 0x55b0, Data4: ( 0x89,0x7d,0x18,0xa1,0x31,0xd5,0x7a,0xc9 ))// c91de16d-13ff-55b0-897d-18a131d57ac9
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemVTable: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.DataTransfer.ClipboardHistoryItem>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.ClipboardHistoryItem? = __IMPL_Windows_ApplicationModel_DataTransfer.ClipboardHistoryItemBridge.from(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [UWP.ClipboardHistoryItem?] = .from(abiBridge: __IMPL_Windows_ApplicationModel_DataTransfer.ClipboardHistoryItemBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: __IMPL_Windows_ApplicationModel_DataTransfer.ClipboardHistoryItemBridge.self)
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemBridge>
public class IVectorViewClipboardHistoryItem: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItem }

    open func GetAt(_ index: UInt32) throws -> UWP.ClipboardHistoryItem? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return __IMPL_Windows_ApplicationModel_DataTransfer.ClipboardHistoryItemBridge.from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: UWP.ClipboardHistoryItem?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, RawPointer(value), &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [UWP.ClipboardHistoryItem?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_ApplicationModel_DataTransfer.ClipboardHistoryItemBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_ApplicationModel_DataTransfer.ClipboardHistoryItemBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItem
    internal typealias SwiftABI = IVectorViewClipboardHistoryItem
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<UWP.ClipboardHistoryItem?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemImpl : IVectorView, AbiInterfaceImpl {
    typealias T = UWP.ClipboardHistoryItem?
    typealias Bridge = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> UWP.ClipboardHistoryItem? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: UWP.ClipboardHistoryItem?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [UWP.ClipboardHistoryItem?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableClipboardHistoryItem! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.ClipboardHistoryItem?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider: WindowsFoundation.IID {
    .init(Data1: 0x946537a2, Data2: 0x932c, Data3: 0x5b77, Data4: ( 0xab,0x36,0xb7,0x06,0x50,0xf0,0xbc,0xd5 ))// 946537a2-932c-5b77-ab36-b70650f0bcd5
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderVTable: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.DataTransfer.ShareProvider>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.ShareProvider? = __IMPL_Windows_ApplicationModel_DataTransfer.ShareProviderBridge.from(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [UWP.ShareProvider?] = .from(abiBridge: __IMPL_Windows_ApplicationModel_DataTransfer.ShareProviderBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: __IMPL_Windows_ApplicationModel_DataTransfer.ShareProviderBridge.self)
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderBridge>
public class IVectorViewShareProvider: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider }

    open func GetAt(_ index: UInt32) throws -> UWP.ShareProvider? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return __IMPL_Windows_ApplicationModel_DataTransfer.ShareProviderBridge.from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: UWP.ShareProvider?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, RawPointer(value), &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [UWP.ShareProvider?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_ApplicationModel_DataTransfer.ShareProviderBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_ApplicationModel_DataTransfer.ShareProviderBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider
    internal typealias SwiftABI = IVectorViewShareProvider
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<UWP.ShareProvider?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderImpl : IVectorView, AbiInterfaceImpl {
    typealias T = UWP.ShareProvider?
    typealias Bridge = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> UWP.ShareProvider? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: UWP.ShareProvider?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [UWP.ShareProvider?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableShareProvider! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.ShareProvider?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment: WindowsFoundation.IID {
    .init(Data1: 0x2f245f9d, Data2: 0xeb5f, Data3: 0x5641, Data4: ( 0x9d,0xcc,0x6a,0xb1,0x94,0x6c,0xc7,0xe6 ))// 2f245f9d-eb5f-5641-9dcc-6ab1946cc7e6
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentVTable: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Windows.Data.Text.TextSegment>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        $2?.initialize(to: .from(swift: result))
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.TextSegment = .from(abi: $1)
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [UWP.TextSegment] = .from(abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        do {
            try items.fill(abi: $3)
        } catch { return failWith(error: error) }
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge>
public class IVectorViewTextSegment: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment }

    open func GetAt(_ index: UInt32) throws -> UWP.TextSegment {
        var result: __x_ABI_CWindows_CData_CText_CTextSegment = .init()
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
        }
        return .from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: UWP.TextSegment, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, .from(swift: value), &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [UWP.TextSegment]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegment
    internal typealias SwiftABI = IVectorViewTextSegment
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<UWP.TextSegment>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentImpl : IVectorView, AbiInterfaceImpl {
    typealias T = UWP.TextSegment
    typealias Bridge = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CData__CText__CTextSegmentBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> UWP.TextSegment {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: UWP.TextSegment, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [UWP.TextSegment]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableTextSegment! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.TextSegment>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDevice: WindowsFoundation.IID {
    .init(Data1: 0xcf5674f1, Data2: 0x9808, Data3: 0x5a2b, Data4: ( 0x80,0xb8,0x56,0x84,0xed,0x0e,0xa8,0x16 ))// cf5674f1-9808-5a2b-80b8-5684ed0ea816
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceVTable: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Input.PointerDevice>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.PointerDevice? = __IMPL_Windows_Devices_Input.PointerDeviceBridge.from(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [UWP.PointerDevice?] = .from(abiBridge: __IMPL_Windows_Devices_Input.PointerDeviceBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: __IMPL_Windows_Devices_Input.PointerDeviceBridge.self)
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceBridge>
public class IVectorViewPointerDevice: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDevice }

    open func GetAt(_ index: UInt32) throws -> UWP.PointerDevice? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return __IMPL_Windows_Devices_Input.PointerDeviceBridge.from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDevice.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: UWP.PointerDevice?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDevice.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, RawPointer(value), &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [UWP.PointerDevice?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_Devices_Input.PointerDeviceBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDevice.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_Devices_Input.PointerDeviceBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDevice
    internal typealias SwiftABI = IVectorViewPointerDevice
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<UWP.PointerDevice?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceImpl : IVectorView, AbiInterfaceImpl {
    typealias T = UWP.PointerDevice?
    typealias Bridge = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> UWP.PointerDevice? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: UWP.PointerDevice?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [UWP.PointerDevice?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterablePointerDevice! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.PointerDevice?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsage: WindowsFoundation.IID {
    .init(Data1: 0x8e5a2c7e, Data2: 0x3830, Data3: 0x50d5, Data4: ( 0x92,0xba,0x31,0x63,0xc8,0x9c,0xbb,0xd0 ))// 8e5a2c7e-3830-50d5-92ba-3163c89cbbd0
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageVTable: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Windows.Devices.Input.PointerDeviceUsage>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        $2?.initialize(to: .from(swift: result))
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.PointerDeviceUsage = .from(abi: $1)
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [UWP.PointerDeviceUsage] = .from(abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        do {
            try items.fill(abi: $3)
        } catch { return failWith(error: error) }
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageBridge>
public class IVectorViewPointerDeviceUsage: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsage }

    open func GetAt(_ index: UInt32) throws -> UWP.PointerDeviceUsage {
        var result: __x_ABI_CWindows_CDevices_CInput_CPointerDeviceUsage = .init()
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
        }
        return .from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: UWP.PointerDeviceUsage, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsage.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, .from(swift: value), &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [UWP.PointerDeviceUsage]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsage.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsage
    internal typealias SwiftABI = IVectorViewPointerDeviceUsage
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<UWP.PointerDeviceUsage>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageImpl : IVectorView, AbiInterfaceImpl {
    typealias T = UWP.PointerDeviceUsage
    typealias Bridge = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CInput__CPointerDeviceUsageBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> UWP.PointerDeviceUsage {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: UWP.PointerDeviceUsage, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [UWP.PointerDeviceUsage]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterablePointerDeviceUsage! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.PointerDeviceUsage>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation: WindowsFoundation.IID {
    .init(Data1: 0x97dfde96, Data2: 0xff1d, Data3: 0x5aa1, Data4: ( 0x86,0x3a,0x90,0x11,0x6a,0x31,0xb8,0x6b ))// 97dfde96-ff1d-5aa1-863a-90116a31b86b
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationVTable: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Windows.Graphics.Imaging.BitmapCodecInformation>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.BitmapCodecInformation? = __IMPL_Windows_Graphics_Imaging.BitmapCodecInformationBridge.from(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [UWP.BitmapCodecInformation?] = .from(abiBridge: __IMPL_Windows_Graphics_Imaging.BitmapCodecInformationBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: __IMPL_Windows_Graphics_Imaging.BitmapCodecInformationBridge.self)
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationBridge>
public class IVectorViewBitmapCodecInformation: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation }

    open func GetAt(_ index: UInt32) throws -> UWP.BitmapCodecInformation? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return __IMPL_Windows_Graphics_Imaging.BitmapCodecInformationBridge.from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: UWP.BitmapCodecInformation?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, RawPointer(value), &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [UWP.BitmapCodecInformation?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_Graphics_Imaging.BitmapCodecInformationBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_Graphics_Imaging.BitmapCodecInformationBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformation
    internal typealias SwiftABI = IVectorViewBitmapCodecInformation
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<UWP.BitmapCodecInformation?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationImpl : IVectorView, AbiInterfaceImpl {
    typealias T = UWP.BitmapCodecInformation?
    typealias Bridge = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapCodecInformationBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> UWP.BitmapCodecInformation? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: UWP.BitmapCodecInformation?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [UWP.BitmapCodecInformation?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableBitmapCodecInformation! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.BitmapCodecInformation?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem: WindowsFoundation.IID {
    .init(Data1: 0x85575a41, Data2: 0x06cb, Data3: 0x58d0, Data4: ( 0xb9,0x8a,0x7c,0x8f,0x06,0xe6,0xe9,0xd7 ))// 85575a41-06cb-58d0-b98a-7c8f06e6e9d7
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemVTable: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Windows.Storage.IStorageItem>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        let resultWrapper = __ABI_Windows_Storage.IStorageItemWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.AnyIStorageItem? = __ABI_Windows_Storage.IStorageItemWrapper.unwrapFrom(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [UWP.AnyIStorageItem?] = .from(abiBridge: __IMPL_Windows_Storage.IStorageItemBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: __IMPL_Windows_Storage.IStorageItemBridge.self)
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemBridge>
public class IVectorViewIStorageItem: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem }

    open func GetAt(_ index: UInt32) throws -> UWP.AnyIStorageItem? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return __ABI_Windows_Storage.IStorageItemWrapper.unwrapFrom(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: UWP.AnyIStorageItem?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        let valueWrapper = __ABI_Windows_Storage.IStorageItemWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, _value, &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [UWP.AnyIStorageItem?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_Storage.IStorageItemBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_Storage.IStorageItemBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem
    internal typealias SwiftABI = IVectorViewIStorageItem
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<UWP.AnyIStorageItem?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemImpl : IVectorView, AbiInterfaceImpl {
    typealias T = UWP.AnyIStorageItem?
    typealias Bridge = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> UWP.AnyIStorageItem? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: UWP.AnyIStorageItem?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [UWP.AnyIStorageItem?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIStorageItem! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.AnyIStorageItem?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry: WindowsFoundation.IID {
    .init(Data1: 0x823c7604, Data2: 0xb37b, Data3: 0x5465, Data4: ( 0xa1,0x69,0x29,0x49,0x78,0x93,0xcd,0xb9 ))// 823c7604-b37b-5465-a169-29497893cdb9
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryVTable: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Windows.Storage.Search.SortEntry>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        let _result = __ABI_Windows_Storage_Search._ABI_SortEntry(from: result)
        	$2?.initialize(to: _result.detach())
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.SortEntry = .from(abi: $1)
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [UWP.SortEntry] = .from(abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        do {
            try items.fill(abi: $3)
        } catch { return failWith(error: error) }
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryBridge>
public class IVectorViewSortEntry: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry }

    open func GetAt(_ index: UInt32) throws -> UWP.SortEntry {
        var result: __x_ABI_CWindows_CStorage_CSearch_CSortEntry = .init()
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
        }
        return .from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: UWP.SortEntry, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        let _value = __ABI_Windows_Storage_Search._ABI_SortEntry(from: value)
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, _value.val, &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [UWP.SortEntry]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry
    internal typealias SwiftABI = IVectorViewSortEntry
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<UWP.SortEntry>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryImpl : IVectorView, AbiInterfaceImpl {
    typealias T = UWP.SortEntry
    typealias Bridge = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> UWP.SortEntry {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: UWP.SortEntry, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [UWP.SortEntry]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableSortEntry! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.SortEntry>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFile: WindowsFoundation.IID {
    .init(Data1: 0x80646519, Data2: 0x5e2a, Data3: 0x595d, Data4: ( 0xa8,0xcd,0x2a,0x24,0xb4,0x06,0x7f,0x1b ))// 80646519-5e2a-595d-a8cd-2a24b4067f1b
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileVTable: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Windows.Storage.StorageFile>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.StorageFile? = __IMPL_Windows_Storage.StorageFileBridge.from(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [UWP.StorageFile?] = .from(abiBridge: __IMPL_Windows_Storage.StorageFileBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: __IMPL_Windows_Storage.StorageFileBridge.self)
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileBridge>
public class IVectorViewStorageFile: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFile }

    open func GetAt(_ index: UInt32) throws -> UWP.StorageFile? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFile.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return __IMPL_Windows_Storage.StorageFileBridge.from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: UWP.StorageFile?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, RawPointer(value), &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [UWP.StorageFile?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_Storage.StorageFileBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFile.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_Storage.StorageFileBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFile
    internal typealias SwiftABI = IVectorViewStorageFile
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<UWP.StorageFile?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileImpl : IVectorView, AbiInterfaceImpl {
    typealias T = UWP.StorageFile?
    typealias Bridge = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> UWP.StorageFile? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: UWP.StorageFile?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [UWP.StorageFile?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableStorageFile! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.StorageFile?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolder: WindowsFoundation.IID {
    .init(Data1: 0xe20debc6, Data2: 0xdc4e, Data3: 0x542e, Data4: ( 0xa2,0xe7,0xa2,0x4d,0x19,0xc8,0xdd,0x62 ))// e20debc6-dc4e-542e-a2e7-a24d19c8dd62
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderVTable: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Windows.Storage.StorageFolder>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.StorageFolder? = __IMPL_Windows_Storage.StorageFolderBridge.from(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [UWP.StorageFolder?] = .from(abiBridge: __IMPL_Windows_Storage.StorageFolderBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: __IMPL_Windows_Storage.StorageFolderBridge.self)
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderBridge>
public class IVectorViewStorageFolder: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolder }

    open func GetAt(_ index: UInt32) throws -> UWP.StorageFolder? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return __IMPL_Windows_Storage.StorageFolderBridge.from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolder.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: UWP.StorageFolder?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolder.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, RawPointer(value), &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [UWP.StorageFolder?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_Storage.StorageFolderBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_Storage.StorageFolderBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolder
    internal typealias SwiftABI = IVectorViewStorageFolder
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<UWP.StorageFolder?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderImpl : IVectorView, AbiInterfaceImpl {
    typealias T = UWP.StorageFolder?
    typealias Bridge = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> UWP.StorageFolder? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: UWP.StorageFolder?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [UWP.StorageFolder?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableStorageFolder! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.StorageFolder?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChange: WindowsFoundation.IID {
    .init(Data1: 0x0d3879e2, Data2: 0x5c7e, Data3: 0x5b6c, Data4: ( 0x95,0x4d,0x10,0xc6,0xda,0x95,0xfb,0xff ))// 0d3879e2-5c7e-5b6c-954d-10c6da95fbff
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeVTable: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Windows.Storage.StorageLibraryChange>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.StorageLibraryChange? = __IMPL_Windows_Storage.StorageLibraryChangeBridge.from(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [UWP.StorageLibraryChange?] = .from(abiBridge: __IMPL_Windows_Storage.StorageLibraryChangeBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: __IMPL_Windows_Storage.StorageLibraryChangeBridge.self)
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeBridge>
public class IVectorViewStorageLibraryChange: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChange }

    open func GetAt(_ index: UInt32) throws -> UWP.StorageLibraryChange? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return __IMPL_Windows_Storage.StorageLibraryChangeBridge.from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChange.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: UWP.StorageLibraryChange?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChange.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, RawPointer(value), &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [UWP.StorageLibraryChange?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_Storage.StorageLibraryChangeBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_Storage.StorageLibraryChangeBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChange
    internal typealias SwiftABI = IVectorViewStorageLibraryChange
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<UWP.StorageLibraryChange?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeImpl : IVectorView, AbiInterfaceImpl {
    typealias T = UWP.StorageLibraryChange?
    typealias Bridge = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> UWP.StorageLibraryChange? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: UWP.StorageLibraryChange?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [UWP.StorageLibraryChange?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableStorageLibraryChange! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.StorageLibraryChange?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser: WindowsFoundation.IID {
    .init(Data1: 0x8cbd762a, Data2: 0x1222, Data3: 0x5ee5, Data4: ( 0xb7,0x45,0x48,0x9e,0x7a,0x42,0xc6,0xec ))// 8cbd762a-1222-5ee5-b745-489e7a42c6ec
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserVTable: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CSystem__CUserWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Windows.System.User>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.User? = __IMPL_Windows_System.UserBridge.from(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [UWP.User?] = .from(abiBridge: __IMPL_Windows_System.UserBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: __IMPL_Windows_System.UserBridge.self)
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserBridge>
public class IVectorViewUser: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser }

    open func GetAt(_ index: UInt32) throws -> UWP.User? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return __IMPL_Windows_System.UserBridge.from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: UWP.User?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, RawPointer(value), &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [UWP.User?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_System.UserBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_System.UserBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser
    internal typealias SwiftABI = IVectorViewUser
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<UWP.User?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserImpl : IVectorView, AbiInterfaceImpl {
    typealias T = UWP.User?
    typealias Bridge = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> UWP.User? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: UWP.User?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [UWP.User?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableUser! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.User?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop: WindowsFoundation.IID {
    .init(Data1: 0x801d95c7, Data2: 0x7ce2, Data3: 0x55d7, Data4: ( 0xa6,0x2f,0x2f,0xf9,0x4c,0x54,0x40,0x34 ))// 801d95c7-7ce2-55d7-a62f-2ff94c544034
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopVTable: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Windows.UI.Composition.CompositionColorGradientStop>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.CompositionColorGradientStop? = __IMPL_Windows_UI_Composition.CompositionColorGradientStopBridge.from(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [UWP.CompositionColorGradientStop?] = .from(abiBridge: __IMPL_Windows_UI_Composition.CompositionColorGradientStopBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: __IMPL_Windows_UI_Composition.CompositionColorGradientStopBridge.self)
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopBridge>
public class IVectorViewCompositionColorGradientStop: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop }

    open func GetAt(_ index: UInt32) throws -> UWP.CompositionColorGradientStop? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return __IMPL_Windows_UI_Composition.CompositionColorGradientStopBridge.from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: UWP.CompositionColorGradientStop?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, RawPointer(value), &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [UWP.CompositionColorGradientStop?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_UI_Composition.CompositionColorGradientStopBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_UI_Composition.CompositionColorGradientStopBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop
    internal typealias SwiftABI = IVectorViewCompositionColorGradientStop
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<UWP.CompositionColorGradientStop?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopImpl : IVectorView, AbiInterfaceImpl {
    typealias T = UWP.CompositionColorGradientStop?
    typealias Bridge = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> UWP.CompositionColorGradientStop? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: UWP.CompositionColorGradientStop?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [UWP.CompositionColorGradientStop?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableCompositionColorGradientStop! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.CompositionColorGradientStop?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape: WindowsFoundation.IID {
    .init(Data1: 0xe7e27ef4, Data2: 0x4ec6, Data3: 0x5b8a, Data4: ( 0xa8,0x58,0x56,0x1b,0x95,0x34,0xa8,0x85 ))// e7e27ef4-4ec6-5b8a-a858-561b9534a885
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeVTable: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Windows.UI.Composition.CompositionShape>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.CompositionShape? = __IMPL_Windows_UI_Composition.CompositionShapeBridge.from(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [UWP.CompositionShape?] = .from(abiBridge: __IMPL_Windows_UI_Composition.CompositionShapeBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: __IMPL_Windows_UI_Composition.CompositionShapeBridge.self)
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeBridge>
public class IVectorViewCompositionShape: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape }

    open func GetAt(_ index: UInt32) throws -> UWP.CompositionShape? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return __IMPL_Windows_UI_Composition.CompositionShapeBridge.from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: UWP.CompositionShape?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, RawPointer(value), &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [UWP.CompositionShape?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_UI_Composition.CompositionShapeBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_UI_Composition.CompositionShapeBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape
    internal typealias SwiftABI = IVectorViewCompositionShape
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<UWP.CompositionShape?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeImpl : IVectorView, AbiInterfaceImpl {
    typealias T = UWP.CompositionShape?
    typealias Bridge = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> UWP.CompositionShape? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: UWP.CompositionShape?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [UWP.CompositionShape?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableCompositionShape! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.CompositionShape?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint: WindowsFoundation.IID {
    .init(Data1: 0xf0f57411, Data2: 0x7786, Data3: 0x5174, Data4: ( 0x87,0x52,0x4c,0x5e,0x83,0x4b,0x6d,0xa2 ))// f0f57411-7786-5174-8752-4c5e834b6da2
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointVTable: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Windows.UI.Input.PointerPoint>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.PointerPoint? = __IMPL_Windows_UI_Input.PointerPointBridge.from(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [UWP.PointerPoint?] = .from(abiBridge: __IMPL_Windows_UI_Input.PointerPointBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: __IMPL_Windows_UI_Input.PointerPointBridge.self)
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointBridge>
public class IVectorViewPointerPoint: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint }

    open func GetAt(_ index: UInt32) throws -> UWP.PointerPoint? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return __IMPL_Windows_UI_Input.PointerPointBridge.from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: UWP.PointerPoint?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, RawPointer(value), &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [UWP.PointerPoint?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_UI_Input.PointerPointBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_UI_Input.PointerPointBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPoint
    internal typealias SwiftABI = IVectorViewPointerPoint
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<UWP.PointerPoint?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointImpl : IVectorView, AbiInterfaceImpl {
    typealias T = UWP.PointerPoint?
    typealias Bridge = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> UWP.PointerPoint? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: UWP.PointerPoint?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [UWP.PointerPoint?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterablePointerPoint! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.PointerPoint?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotification: WindowsFoundation.IID {
    .init(Data1: 0x2b23baa9, Data2: 0x1d54, Data3: 0x5440, Data4: ( 0xbd,0x32,0x86,0xed,0x70,0xf1,0x5c,0x9e ))// 2b23baa9-1d54-5440-bd32-86ed70f15c9e
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationVTable: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Windows.UI.Notifications.ShownTileNotification>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.ShownTileNotification? = __IMPL_Windows_UI_Notifications.ShownTileNotificationBridge.from(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [UWP.ShownTileNotification?] = .from(abiBridge: __IMPL_Windows_UI_Notifications.ShownTileNotificationBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: __IMPL_Windows_UI_Notifications.ShownTileNotificationBridge.self)
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationBridge>
public class IVectorViewShownTileNotification: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotification }

    open func GetAt(_ index: UInt32) throws -> UWP.ShownTileNotification? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return __IMPL_Windows_UI_Notifications.ShownTileNotificationBridge.from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotification.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: UWP.ShownTileNotification?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotification.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, RawPointer(value), &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [UWP.ShownTileNotification?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_UI_Notifications.ShownTileNotificationBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotification.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_UI_Notifications.ShownTileNotificationBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotification
    internal typealias SwiftABI = IVectorViewShownTileNotification
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<UWP.ShownTileNotification?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationImpl : IVectorView, AbiInterfaceImpl {
    typealias T = UWP.ShownTileNotification?
    typealias Bridge = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CNotifications__CShownTileNotificationBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> UWP.ShownTileNotification? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: UWP.ShownTileNotification?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [UWP.ShownTileNotification?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableShownTileNotification! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.ShownTileNotification?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegment: WindowsFoundation.IID {
    .init(Data1: 0x214b64ff, Data2: 0xcf4d, Data3: 0x5dd4, Data4: ( 0x93,0x2a,0x7b,0xc6,0x6e,0x69,0x03,0x6e ))// 214b64ff-cf4d-5dd4-932a-7bc66e69036e
}

internal var __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentVTable: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVectorView`1<Windows.UI.Text.Core.CoreTextCompositionSegment>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.CoreTextCompositionSegment? = __IMPL_Windows_UI_Text_Core.CoreTextCompositionSegmentBridge.from(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [UWP.CoreTextCompositionSegment?] = .from(abiBridge: __IMPL_Windows_UI_Text_Core.CoreTextCompositionSegmentBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: __IMPL_Windows_UI_Text_Core.CoreTextCompositionSegmentBridge.self)
        $4?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentBridge>
public class IVectorViewCoreTextCompositionSegment: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegment }

    open func GetAt(_ index: UInt32) throws -> UWP.CoreTextCompositionSegment? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegment.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return __IMPL_Windows_UI_Text_Core.CoreTextCompositionSegmentBridge.from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func IndexOf(_ value: UWP.CoreTextCompositionSegment?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegment.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, RawPointer(value), &index, &result))
        }
        return .init(from: result)
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [UWP.CoreTextCompositionSegment?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_UI_Text_Core.CoreTextCompositionSegmentBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegment.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_UI_Text_Core.CoreTextCompositionSegmentBridge.self, abi: _items)
        }
        return result
    }

}

internal enum __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegment
    internal typealias SwiftABI = IVectorViewCoreTextCompositionSegment
    internal typealias SwiftProjection = WindowsFoundation.AnyIVectorView<UWP.CoreTextCompositionSegment?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentImpl : IVectorView, AbiInterfaceImpl {
    typealias T = UWP.CoreTextCompositionSegment?
    typealias Bridge = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionSegmentBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }

    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
    }
    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getat)
    fileprivate func getAt(_ index: UInt32) -> UWP.CoreTextCompositionSegment? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.indexof)
    fileprivate func indexOf(_ value: UWP.CoreTextCompositionSegment?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [UWP.CoreTextCompositionSegment?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableCoreTextCompositionSegment! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivectorview-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.CoreTextCompositionSegment?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVector_1_float: WindowsFoundation.IID {
    .init(Data1: 0x61cf693f, Data2: 0xdb4c, Data3: 0x579f, Data4: ( 0xb9,0x05,0x5d,0xd3,0xd2,0x3c,0xfd,0x4d ))// 61cf693f-db4c-579f-b905-5dd3d23cfd4d
}

internal var __x_ABI_C__FIVector_1_floatVTable: __x_ABI_C__FIVector_1_floatVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVector_1_floatWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVector_1_floatWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVector_1_floatWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVector_1_floatWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1_floatWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVector`1<Float>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_floatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        $2?.initialize(to: result)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_floatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_floatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = UWP.__x_ABI_C__FIVectorView_1_floatWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_floatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: Float = $1
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    SetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_floatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: Float = $2
        __unwrapped__instance.setAt(index, value)
        return S_OK
    },

    InsertAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_floatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: Float = $2
        __unwrapped__instance.insertAt(index, value)
        return S_OK
    },

    RemoveAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_floatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        __unwrapped__instance.removeAt(index)
        return S_OK
    },

    Append: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_floatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: Float = $1
        __unwrapped__instance.append(value)
        return S_OK
    },

    RemoveAtEnd: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_floatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.removeAtEnd()
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_floatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_floatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [Float] = .from(abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3)
        $4?.initialize(to: result)
        return S_OK
    },

    ReplaceAll: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_floatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let items: [Float] = .from(abi: (count: $1, start: $2))
        __unwrapped__instance.replaceAll(items)
        return S_OK
    }
)
typealias __x_ABI_C__FIVector_1_floatWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVector_1_floatBridge>
public class IVectorFloat: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVector_1_float }

    open func GetAt(_ index: UInt32) throws -> Float {
        var result: FLOAT = 0.0
        _ = try perform(as: __x_ABI_C__FIVector_1_float.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
        }
        return result
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVector_1_float.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func GetView() throws -> WindowsFoundation.AnyIVectorView<Float>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVector_1_float.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIVectorView_1_floatWrapper.unwrapFrom(abi: result)
    }

    open func IndexOf(_ value: Float, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVector_1_float.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, value, &index, &result))
        }
        return .init(from: result)
    }

    open func SetAt(_ index: UInt32, _ value: Float) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_float.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, value))
        }
    }

    open func InsertAt(_ index: UInt32, _ value: Float) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_float.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, value))
        }
    }

    open func RemoveAt(_ index: UInt32) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_float.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }

    open func Append(_ value: Float) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_float.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, value))
        }
    }

    open func RemoveAtEnd() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_float.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }

    open func Clear() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_float.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [Float]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI { _items in
            _ = try perform(as: __x_ABI_C__FIVector_1_float.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        }
        return result
    }

    open func ReplaceAll(_ items: [Float]) throws {
        try items.toABI { _items in
            _ = try perform(as: __x_ABI_C__FIVector_1_float.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, _items.count, _items.start))
            }
        }
    }

}

internal enum __x_ABI_C__FIVector_1_floatBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVector_1_float
    internal typealias SwiftABI = IVectorFloat
    internal typealias SwiftProjection = WindowsFoundation.AnyIVector<Float>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVector_1_floatImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVector_1_floatVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVector_1_floatImpl : IVector, AbiInterfaceImpl {
    typealias T = Float
    typealias Bridge = __x_ABI_C__FIVector_1_floatBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }


    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getat)
    fileprivate func getAt(_ index: UInt32) -> Float {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getview)
    fileprivate func getView() -> WindowsFoundation.AnyIVectorView<Float>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.indexof)
    fileprivate func indexOf(_ value: Float, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.setat)
    fileprivate func setAt(_ index: UInt32, _ value: Float) {
        try! _default.SetAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.insertat)
    fileprivate func insertAt(_ index: UInt32, _ value: Float) {
        try! _default.InsertAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.removeat)
    fileprivate func removeAt(_ index: UInt32) {
        try! _default.RemoveAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.append)
    fileprivate func append(_ value: Float) {
        try! _default.Append(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.removeatend)
    fileprivate func removeAtEnd() {
        try! _default.RemoveAtEnd()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.clear)
    fileprivate func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [Float]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.replaceall)
    fileprivate func replaceAll(_ items: [Float]) {
        try! _default.ReplaceAll(items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableFloat! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<Float>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVector_1_HSTRING: WindowsFoundation.IID {
    .init(Data1: 0x98b9acc1, Data2: 0x4b56, Data3: 0x532e, Data4: ( 0xac,0x73,0x03,0xd5,0x29,0x1c,0xca,0x90 ))// 98b9acc1-4b56-532e-ac73-03d5291cca90
}

internal var __x_ABI_C__FIVector_1_HSTRINGVTable: __x_ABI_C__FIVector_1_HSTRINGVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVector_1_HSTRINGWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVector_1_HSTRINGWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVector_1_HSTRINGWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVector_1_HSTRINGWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1_HSTRINGWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVector`1<String>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        $2?.initialize(to: try! HString(result).detach())
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = UWP.__x_ABI_C__FIVectorView_1_HSTRINGWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: String = .init(from: $1)
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    SetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: String = .init(from: $2)
        __unwrapped__instance.setAt(index, value)
        return S_OK
    },

    InsertAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: String = .init(from: $2)
        __unwrapped__instance.insertAt(index, value)
        return S_OK
    },

    RemoveAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        __unwrapped__instance.removeAt(index)
        return S_OK
    },

    Append: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: String = .init(from: $1)
        __unwrapped__instance.append(value)
        return S_OK
    },

    RemoveAtEnd: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.removeAtEnd()
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [String] = .from(abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        do {
            try items.fill(abi: $3)
        } catch { return failWith(error: error) }
        $4?.initialize(to: result)
        return S_OK
    },

    ReplaceAll: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let items: [String] = .from(abi: (count: $1, start: $2))
        __unwrapped__instance.replaceAll(items)
        return S_OK
    }
)
typealias __x_ABI_C__FIVector_1_HSTRINGWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVector_1_HSTRINGBridge>
public class IVectorString: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVector_1_HSTRING }

    open func GetAt(_ index: UInt32) throws -> String {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
        }
        return .init(from: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func GetView() throws -> WindowsFoundation.AnyIVectorView<String>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIVectorView_1_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    open func IndexOf(_ value: String, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        let _value = try! HString(value)
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, _value.get(), &index, &result))
        }
        return .init(from: result)
    }

    open func SetAt(_ index: UInt32, _ value: String) throws {
        let _value = try! HString(value)
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, _value.get()))
        }
    }

    open func InsertAt(_ index: UInt32, _ value: String) throws {
        let _value = try! HString(value)
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, _value.get()))
        }
    }

    open func RemoveAt(_ index: UInt32) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }

    open func Append(_ value: String) throws {
        let _value = try! HString(value)
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, _value.get()))
        }
    }

    open func RemoveAtEnd() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }

    open func Clear() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [String]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI { _items in
            _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abi: _items)
        }
        return result
    }

    open func ReplaceAll(_ items: [String]) throws {
        try items.toABI { _items in
            _ = try perform(as: __x_ABI_C__FIVector_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, _items.count, _items.start))
            }
        }
    }

}

internal enum __x_ABI_C__FIVector_1_HSTRINGBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVector_1_HSTRING
    internal typealias SwiftABI = IVectorString
    internal typealias SwiftProjection = WindowsFoundation.AnyIVector<String>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVector_1_HSTRINGImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVector_1_HSTRINGVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVector_1_HSTRINGImpl : IVector, AbiInterfaceImpl {
    typealias T = String
    typealias Bridge = __x_ABI_C__FIVector_1_HSTRINGBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }


    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getat)
    fileprivate func getAt(_ index: UInt32) -> String {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getview)
    fileprivate func getView() -> WindowsFoundation.AnyIVectorView<String>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.indexof)
    fileprivate func indexOf(_ value: String, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.setat)
    fileprivate func setAt(_ index: UInt32, _ value: String) {
        try! _default.SetAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.insertat)
    fileprivate func insertAt(_ index: UInt32, _ value: String) {
        try! _default.InsertAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.removeat)
    fileprivate func removeAt(_ index: UInt32) {
        try! _default.RemoveAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.append)
    fileprivate func append(_ value: String) {
        try! _default.Append(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.removeatend)
    fileprivate func removeAtEnd() {
        try! _default.RemoveAtEnd()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.clear)
    fileprivate func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [String]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.replaceall)
    fileprivate func replaceAll(_ items: [String]) {
        try! _default.ReplaceAll(items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableString! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<String>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider: WindowsFoundation.IID {
    .init(Data1: 0xa1687865, Data2: 0x31e2, Data3: 0x5536, Data4: ( 0x97,0xec,0x29,0x22,0x69,0xa7,0x80,0x46 ))// a1687865-31e2-5536-97ec-292269a78046
}

internal var __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderVTable: __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVector`1<Windows.ApplicationModel.DataTransfer.ShareProvider>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.ShareProvider? = __IMPL_Windows_ApplicationModel_DataTransfer.ShareProviderBridge.from(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    SetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: UWP.ShareProvider? = __IMPL_Windows_ApplicationModel_DataTransfer.ShareProviderBridge.from(abi: ComPtr($2))
        __unwrapped__instance.setAt(index, value)
        return S_OK
    },

    InsertAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: UWP.ShareProvider? = __IMPL_Windows_ApplicationModel_DataTransfer.ShareProviderBridge.from(abi: ComPtr($2))
        __unwrapped__instance.insertAt(index, value)
        return S_OK
    },

    RemoveAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        __unwrapped__instance.removeAt(index)
        return S_OK
    },

    Append: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.ShareProvider? = __IMPL_Windows_ApplicationModel_DataTransfer.ShareProviderBridge.from(abi: ComPtr($1))
        __unwrapped__instance.append(value)
        return S_OK
    },

    RemoveAtEnd: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.removeAtEnd()
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [UWP.ShareProvider?] = .from(abiBridge: __IMPL_Windows_ApplicationModel_DataTransfer.ShareProviderBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: __IMPL_Windows_ApplicationModel_DataTransfer.ShareProviderBridge.self)
        $4?.initialize(to: result)
        return S_OK
    },

    ReplaceAll: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let items: [UWP.ShareProvider?] = .from(abiBridge: __IMPL_Windows_ApplicationModel_DataTransfer.ShareProviderBridge.self, abi: (count: $1, start: $2))
        __unwrapped__instance.replaceAll(items)
        return S_OK
    }
)
typealias __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderBridge>
public class IVectorShareProvider: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider }

    open func GetAt(_ index: UInt32) throws -> UWP.ShareProvider? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return __IMPL_Windows_ApplicationModel_DataTransfer.ShareProviderBridge.from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func GetView() throws -> WindowsFoundation.AnyIVectorView<UWP.ShareProvider?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderWrapper.unwrapFrom(abi: result)
    }

    open func IndexOf(_ value: UWP.ShareProvider?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, RawPointer(value), &index, &result))
        }
        return .init(from: result)
    }

    open func SetAt(_ index: UInt32, _ value: UWP.ShareProvider?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, RawPointer(value)))
        }
    }

    open func InsertAt(_ index: UInt32, _ value: UWP.ShareProvider?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, RawPointer(value)))
        }
    }

    open func RemoveAt(_ index: UInt32) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }

    open func Append(_ value: UWP.ShareProvider?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, RawPointer(value)))
        }
    }

    open func RemoveAtEnd() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }

    open func Clear() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [UWP.ShareProvider?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_ApplicationModel_DataTransfer.ShareProviderBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_ApplicationModel_DataTransfer.ShareProviderBridge.self, abi: _items)
        }
        return result
    }

    open func ReplaceAll(_ items: [UWP.ShareProvider?]) throws {
        try items.toABI(abiBridge: __IMPL_Windows_ApplicationModel_DataTransfer.ShareProviderBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, _items.count, _items.start))
            }
        }
    }

}

internal enum __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvider
    internal typealias SwiftABI = IVectorShareProvider
    internal typealias SwiftProjection = WindowsFoundation.AnyIVector<UWP.ShareProvider?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderImpl : IVector, AbiInterfaceImpl {
    typealias T = UWP.ShareProvider?
    typealias Bridge = __x_ABI_C__FIVector_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProviderBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }


    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getat)
    fileprivate func getAt(_ index: UInt32) -> UWP.ShareProvider? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getview)
    fileprivate func getView() -> WindowsFoundation.AnyIVectorView<UWP.ShareProvider?>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.indexof)
    fileprivate func indexOf(_ value: UWP.ShareProvider?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.setat)
    fileprivate func setAt(_ index: UInt32, _ value: UWP.ShareProvider?) {
        try! _default.SetAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.insertat)
    fileprivate func insertAt(_ index: UInt32, _ value: UWP.ShareProvider?) {
        try! _default.InsertAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.removeat)
    fileprivate func removeAt(_ index: UInt32) {
        try! _default.RemoveAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.append)
    fileprivate func append(_ value: UWP.ShareProvider?) {
        try! _default.Append(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.removeatend)
    fileprivate func removeAtEnd() {
        try! _default.RemoveAtEnd()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.clear)
    fileprivate func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [UWP.ShareProvider?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.replaceall)
    fileprivate func replaceAll(_ items: [UWP.ShareProvider?]) {
        try! _default.ReplaceAll(items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableShareProvider! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.ShareProvider?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem: WindowsFoundation.IID {
    .init(Data1: 0x802508e2, Data2: 0x9c2c, Data3: 0x5b91, Data4: ( 0x89,0xa8,0x39,0xbc,0xf7,0x22,0x33,0x44 ))// 802508e2-9c2c-5b91-89a8-39bcf7223344
}

internal var __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemVTable: __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVector`1<Windows.Storage.IStorageItem>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        let resultWrapper = __ABI_Windows_Storage.IStorageItemWrapper(result)
        resultWrapper?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.AnyIStorageItem? = __ABI_Windows_Storage.IStorageItemWrapper.unwrapFrom(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    SetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: UWP.AnyIStorageItem? = __ABI_Windows_Storage.IStorageItemWrapper.unwrapFrom(abi: ComPtr($2))
        __unwrapped__instance.setAt(index, value)
        return S_OK
    },

    InsertAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: UWP.AnyIStorageItem? = __ABI_Windows_Storage.IStorageItemWrapper.unwrapFrom(abi: ComPtr($2))
        __unwrapped__instance.insertAt(index, value)
        return S_OK
    },

    RemoveAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        __unwrapped__instance.removeAt(index)
        return S_OK
    },

    Append: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.AnyIStorageItem? = __ABI_Windows_Storage.IStorageItemWrapper.unwrapFrom(abi: ComPtr($1))
        __unwrapped__instance.append(value)
        return S_OK
    },

    RemoveAtEnd: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.removeAtEnd()
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [UWP.AnyIStorageItem?] = .from(abiBridge: __IMPL_Windows_Storage.IStorageItemBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: __IMPL_Windows_Storage.IStorageItemBridge.self)
        $4?.initialize(to: result)
        return S_OK
    },

    ReplaceAll: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let items: [UWP.AnyIStorageItem?] = .from(abiBridge: __IMPL_Windows_Storage.IStorageItemBridge.self, abi: (count: $1, start: $2))
        __unwrapped__instance.replaceAll(items)
        return S_OK
    }
)
typealias __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemBridge>
public class IVectorIStorageItem: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem }

    open func GetAt(_ index: UInt32) throws -> UWP.AnyIStorageItem? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return __ABI_Windows_Storage.IStorageItemWrapper.unwrapFrom(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func GetView() throws -> WindowsFoundation.AnyIVectorView<UWP.AnyIStorageItem?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.unwrapFrom(abi: result)
    }

    open func IndexOf(_ value: UWP.AnyIStorageItem?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        let valueWrapper = __ABI_Windows_Storage.IStorageItemWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, _value, &index, &result))
        }
        return .init(from: result)
    }

    open func SetAt(_ index: UInt32, _ value: UWP.AnyIStorageItem?) throws {
        let valueWrapper = __ABI_Windows_Storage.IStorageItemWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, _value))
        }
    }

    open func InsertAt(_ index: UInt32, _ value: UWP.AnyIStorageItem?) throws {
        let valueWrapper = __ABI_Windows_Storage.IStorageItemWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, _value))
        }
    }

    open func RemoveAt(_ index: UInt32) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }

    open func Append(_ value: UWP.AnyIStorageItem?) throws {
        let valueWrapper = __ABI_Windows_Storage.IStorageItemWrapper(value)
        let _value = try! valueWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, _value))
        }
    }

    open func RemoveAtEnd() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }

    open func Clear() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [UWP.AnyIStorageItem?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_Storage.IStorageItemBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_Storage.IStorageItemBridge.self, abi: _items)
        }
        return result
    }

    open func ReplaceAll(_ items: [UWP.AnyIStorageItem?]) throws {
        try items.toABI(abiBridge: __IMPL_Windows_Storage.IStorageItemBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, _items.count, _items.start))
            }
        }
    }

}

internal enum __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItem
    internal typealias SwiftABI = IVectorIStorageItem
    internal typealias SwiftProjection = WindowsFoundation.AnyIVector<UWP.AnyIStorageItem?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemImpl : IVector, AbiInterfaceImpl {
    typealias T = UWP.AnyIStorageItem?
    typealias Bridge = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CIStorageItemBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }


    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getat)
    fileprivate func getAt(_ index: UInt32) -> UWP.AnyIStorageItem? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getview)
    fileprivate func getView() -> WindowsFoundation.AnyIVectorView<UWP.AnyIStorageItem?>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.indexof)
    fileprivate func indexOf(_ value: UWP.AnyIStorageItem?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.setat)
    fileprivate func setAt(_ index: UInt32, _ value: UWP.AnyIStorageItem?) {
        try! _default.SetAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.insertat)
    fileprivate func insertAt(_ index: UInt32, _ value: UWP.AnyIStorageItem?) {
        try! _default.InsertAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.removeat)
    fileprivate func removeAt(_ index: UInt32) {
        try! _default.RemoveAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.append)
    fileprivate func append(_ value: UWP.AnyIStorageItem?) {
        try! _default.Append(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.removeatend)
    fileprivate func removeAtEnd() {
        try! _default.RemoveAtEnd()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.clear)
    fileprivate func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [UWP.AnyIStorageItem?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.replaceall)
    fileprivate func replaceAll(_ items: [UWP.AnyIStorageItem?]) {
        try! _default.ReplaceAll(items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableIStorageItem! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.AnyIStorageItem?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry: WindowsFoundation.IID {
    .init(Data1: 0xd8ea401b, Data2: 0x47b3, Data3: 0x5254, Data4: ( 0x84,0xf4,0xee,0xa1,0x0c,0x4c,0xf0,0x68 ))// d8ea401b-47b3-5254-84f4-eea10c4cf068
}

internal var __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryVTable: __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVector`1<Windows.Storage.Search.SortEntry>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        let _result = __ABI_Windows_Storage_Search._ABI_SortEntry(from: result)
        	$2?.initialize(to: _result.detach())
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.SortEntry = .from(abi: $1)
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    SetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: UWP.SortEntry = .from(abi: $2)
        __unwrapped__instance.setAt(index, value)
        return S_OK
    },

    InsertAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: UWP.SortEntry = .from(abi: $2)
        __unwrapped__instance.insertAt(index, value)
        return S_OK
    },

    RemoveAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        __unwrapped__instance.removeAt(index)
        return S_OK
    },

    Append: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.SortEntry = .from(abi: $1)
        __unwrapped__instance.append(value)
        return S_OK
    },

    RemoveAtEnd: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.removeAtEnd()
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [UWP.SortEntry] = .from(abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        do {
            try items.fill(abi: $3)
        } catch { return failWith(error: error) }
        $4?.initialize(to: result)
        return S_OK
    },

    ReplaceAll: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let items: [UWP.SortEntry] = .from(abi: (count: $1, start: $2))
        __unwrapped__instance.replaceAll(items)
        return S_OK
    }
)
typealias __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryBridge>
public class IVectorSortEntry: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry }

    open func GetAt(_ index: UInt32) throws -> UWP.SortEntry {
        var result: __x_ABI_CWindows_CStorage_CSearch_CSortEntry = .init()
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &result))
        }
        return .from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func GetView() throws -> WindowsFoundation.AnyIVectorView<UWP.SortEntry>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryWrapper.unwrapFrom(abi: result)
    }

    open func IndexOf(_ value: UWP.SortEntry, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        let _value = __ABI_Windows_Storage_Search._ABI_SortEntry(from: value)
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, _value.val, &index, &result))
        }
        return .init(from: result)
    }

    open func SetAt(_ index: UInt32, _ value: UWP.SortEntry) throws {
        let _value = __ABI_Windows_Storage_Search._ABI_SortEntry(from: value)
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, _value.val))
        }
    }

    open func InsertAt(_ index: UInt32, _ value: UWP.SortEntry) throws {
        let _value = __ABI_Windows_Storage_Search._ABI_SortEntry(from: value)
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, _value.val))
        }
    }

    open func RemoveAt(_ index: UInt32) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }

    open func Append(_ value: UWP.SortEntry) throws {
        let _value = __ABI_Windows_Storage_Search._ABI_SortEntry(from: value)
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, _value.val))
        }
    }

    open func RemoveAtEnd() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }

    open func Clear() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [UWP.SortEntry]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI { _items in
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abi: _items)
        }
        return result
    }

    open func ReplaceAll(_ items: [UWP.SortEntry]) throws {
        try items.toABI { _items in
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, _items.count, _items.start))
            }
        }
    }

}

internal enum __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntry
    internal typealias SwiftABI = IVectorSortEntry
    internal typealias SwiftProjection = WindowsFoundation.AnyIVector<UWP.SortEntry>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryImpl : IVector, AbiInterfaceImpl {
    typealias T = UWP.SortEntry
    typealias Bridge = __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CSearch__CSortEntryBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }


    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getat)
    fileprivate func getAt(_ index: UInt32) -> UWP.SortEntry {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getview)
    fileprivate func getView() -> WindowsFoundation.AnyIVectorView<UWP.SortEntry>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.indexof)
    fileprivate func indexOf(_ value: UWP.SortEntry, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.setat)
    fileprivate func setAt(_ index: UInt32, _ value: UWP.SortEntry) {
        try! _default.SetAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.insertat)
    fileprivate func insertAt(_ index: UInt32, _ value: UWP.SortEntry) {
        try! _default.InsertAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.removeat)
    fileprivate func removeAt(_ index: UInt32) {
        try! _default.RemoveAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.append)
    fileprivate func append(_ value: UWP.SortEntry) {
        try! _default.Append(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.removeatend)
    fileprivate func removeAtEnd() {
        try! _default.RemoveAtEnd()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.clear)
    fileprivate func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [UWP.SortEntry]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.replaceall)
    fileprivate func replaceAll(_ items: [UWP.SortEntry]) {
        try! _default.ReplaceAll(items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableSortEntry! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.SortEntry>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop: WindowsFoundation.IID {
    .init(Data1: 0xbf2e107e, Data2: 0xf3db, Data3: 0x56cd, Data4: ( 0x91,0xed,0xc1,0x12,0x94,0x06,0xd5,0x52 ))// bf2e107e-f3db-56cd-91ed-c1129406d552
}

internal var __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopVTable: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVector`1<Windows.UI.Composition.CompositionColorGradientStop>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.CompositionColorGradientStop? = __IMPL_Windows_UI_Composition.CompositionColorGradientStopBridge.from(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    SetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: UWP.CompositionColorGradientStop? = __IMPL_Windows_UI_Composition.CompositionColorGradientStopBridge.from(abi: ComPtr($2))
        __unwrapped__instance.setAt(index, value)
        return S_OK
    },

    InsertAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: UWP.CompositionColorGradientStop? = __IMPL_Windows_UI_Composition.CompositionColorGradientStopBridge.from(abi: ComPtr($2))
        __unwrapped__instance.insertAt(index, value)
        return S_OK
    },

    RemoveAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        __unwrapped__instance.removeAt(index)
        return S_OK
    },

    Append: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.CompositionColorGradientStop? = __IMPL_Windows_UI_Composition.CompositionColorGradientStopBridge.from(abi: ComPtr($1))
        __unwrapped__instance.append(value)
        return S_OK
    },

    RemoveAtEnd: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.removeAtEnd()
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [UWP.CompositionColorGradientStop?] = .from(abiBridge: __IMPL_Windows_UI_Composition.CompositionColorGradientStopBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: __IMPL_Windows_UI_Composition.CompositionColorGradientStopBridge.self)
        $4?.initialize(to: result)
        return S_OK
    },

    ReplaceAll: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let items: [UWP.CompositionColorGradientStop?] = .from(abiBridge: __IMPL_Windows_UI_Composition.CompositionColorGradientStopBridge.self, abi: (count: $1, start: $2))
        __unwrapped__instance.replaceAll(items)
        return S_OK
    }
)
typealias __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopBridge>
public class IVectorCompositionColorGradientStop: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop }

    open func GetAt(_ index: UInt32) throws -> UWP.CompositionColorGradientStop? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return __IMPL_Windows_UI_Composition.CompositionColorGradientStopBridge.from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func GetView() throws -> WindowsFoundation.AnyIVectorView<UWP.CompositionColorGradientStop?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopWrapper.unwrapFrom(abi: result)
    }

    open func IndexOf(_ value: UWP.CompositionColorGradientStop?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, RawPointer(value), &index, &result))
        }
        return .init(from: result)
    }

    open func SetAt(_ index: UInt32, _ value: UWP.CompositionColorGradientStop?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, RawPointer(value)))
        }
    }

    open func InsertAt(_ index: UInt32, _ value: UWP.CompositionColorGradientStop?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, RawPointer(value)))
        }
    }

    open func RemoveAt(_ index: UInt32) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }

    open func Append(_ value: UWP.CompositionColorGradientStop?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, RawPointer(value)))
        }
    }

    open func RemoveAtEnd() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }

    open func Clear() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [UWP.CompositionColorGradientStop?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_UI_Composition.CompositionColorGradientStopBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_UI_Composition.CompositionColorGradientStopBridge.self, abi: _items)
        }
        return result
    }

    open func ReplaceAll(_ items: [UWP.CompositionColorGradientStop?]) throws {
        try items.toABI(abiBridge: __IMPL_Windows_UI_Composition.CompositionColorGradientStopBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, _items.count, _items.start))
            }
        }
    }

}

internal enum __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStop
    internal typealias SwiftABI = IVectorCompositionColorGradientStop
    internal typealias SwiftProjection = WindowsFoundation.AnyIVector<UWP.CompositionColorGradientStop?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopImpl : IVector, AbiInterfaceImpl {
    typealias T = UWP.CompositionColorGradientStop?
    typealias Bridge = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionColorGradientStopBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }


    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getat)
    fileprivate func getAt(_ index: UInt32) -> UWP.CompositionColorGradientStop? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getview)
    fileprivate func getView() -> WindowsFoundation.AnyIVectorView<UWP.CompositionColorGradientStop?>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.indexof)
    fileprivate func indexOf(_ value: UWP.CompositionColorGradientStop?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.setat)
    fileprivate func setAt(_ index: UInt32, _ value: UWP.CompositionColorGradientStop?) {
        try! _default.SetAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.insertat)
    fileprivate func insertAt(_ index: UInt32, _ value: UWP.CompositionColorGradientStop?) {
        try! _default.InsertAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.removeat)
    fileprivate func removeAt(_ index: UInt32) {
        try! _default.RemoveAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.append)
    fileprivate func append(_ value: UWP.CompositionColorGradientStop?) {
        try! _default.Append(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.removeatend)
    fileprivate func removeAtEnd() {
        try! _default.RemoveAtEnd()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.clear)
    fileprivate func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [UWP.CompositionColorGradientStop?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.replaceall)
    fileprivate func replaceAll(_ items: [UWP.CompositionColorGradientStop?]) {
        try! _default.ReplaceAll(items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableCompositionColorGradientStop! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.CompositionColorGradientStop?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape: WindowsFoundation.IID {
    .init(Data1: 0x42d4219a, Data2: 0xbe1b, Data3: 0x5091, Data4: ( 0x8f,0x1e,0x90,0x27,0x08,0x40,0xfc,0x2d ))// 42d4219a-be1b-5091-8f1e-90270840fc2d
}

internal var __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeVTable: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVector`1<Windows.UI.Composition.CompositionShape>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.CompositionShape? = __IMPL_Windows_UI_Composition.CompositionShapeBridge.from(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    SetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: UWP.CompositionShape? = __IMPL_Windows_UI_Composition.CompositionShapeBridge.from(abi: ComPtr($2))
        __unwrapped__instance.setAt(index, value)
        return S_OK
    },

    InsertAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: UWP.CompositionShape? = __IMPL_Windows_UI_Composition.CompositionShapeBridge.from(abi: ComPtr($2))
        __unwrapped__instance.insertAt(index, value)
        return S_OK
    },

    RemoveAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        __unwrapped__instance.removeAt(index)
        return S_OK
    },

    Append: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.CompositionShape? = __IMPL_Windows_UI_Composition.CompositionShapeBridge.from(abi: ComPtr($1))
        __unwrapped__instance.append(value)
        return S_OK
    },

    RemoveAtEnd: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.removeAtEnd()
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [UWP.CompositionShape?] = .from(abiBridge: __IMPL_Windows_UI_Composition.CompositionShapeBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: __IMPL_Windows_UI_Composition.CompositionShapeBridge.self)
        $4?.initialize(to: result)
        return S_OK
    },

    ReplaceAll: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let items: [UWP.CompositionShape?] = .from(abiBridge: __IMPL_Windows_UI_Composition.CompositionShapeBridge.self, abi: (count: $1, start: $2))
        __unwrapped__instance.replaceAll(items)
        return S_OK
    }
)
typealias __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeBridge>
public class IVectorCompositionShape: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape }

    open func GetAt(_ index: UInt32) throws -> UWP.CompositionShape? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return __IMPL_Windows_UI_Composition.CompositionShapeBridge.from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func GetView() throws -> WindowsFoundation.AnyIVectorView<UWP.CompositionShape?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeWrapper.unwrapFrom(abi: result)
    }

    open func IndexOf(_ value: UWP.CompositionShape?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, RawPointer(value), &index, &result))
        }
        return .init(from: result)
    }

    open func SetAt(_ index: UInt32, _ value: UWP.CompositionShape?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, RawPointer(value)))
        }
    }

    open func InsertAt(_ index: UInt32, _ value: UWP.CompositionShape?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, RawPointer(value)))
        }
    }

    open func RemoveAt(_ index: UInt32) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }

    open func Append(_ value: UWP.CompositionShape?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, RawPointer(value)))
        }
    }

    open func RemoveAtEnd() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }

    open func Clear() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [UWP.CompositionShape?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_UI_Composition.CompositionShapeBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_UI_Composition.CompositionShapeBridge.self, abi: _items)
        }
        return result
    }

    open func ReplaceAll(_ items: [UWP.CompositionShape?]) throws {
        try items.toABI(abiBridge: __IMPL_Windows_UI_Composition.CompositionShapeBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, _items.count, _items.start))
            }
        }
    }

}

internal enum __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShape
    internal typealias SwiftABI = IVectorCompositionShape
    internal typealias SwiftProjection = WindowsFoundation.AnyIVector<UWP.CompositionShape?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeImpl : IVector, AbiInterfaceImpl {
    typealias T = UWP.CompositionShape?
    typealias Bridge = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CComposition__CCompositionShapeBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }


    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getat)
    fileprivate func getAt(_ index: UInt32) -> UWP.CompositionShape? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getview)
    fileprivate func getView() -> WindowsFoundation.AnyIVectorView<UWP.CompositionShape?>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.indexof)
    fileprivate func indexOf(_ value: UWP.CompositionShape?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.setat)
    fileprivate func setAt(_ index: UInt32, _ value: UWP.CompositionShape?) {
        try! _default.SetAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.insertat)
    fileprivate func insertAt(_ index: UInt32, _ value: UWP.CompositionShape?) {
        try! _default.InsertAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.removeat)
    fileprivate func removeAt(_ index: UInt32) {
        try! _default.RemoveAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.append)
    fileprivate func append(_ value: UWP.CompositionShape?) {
        try! _default.Append(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.removeatend)
    fileprivate func removeAtEnd() {
        try! _default.RemoveAtEnd()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.clear)
    fileprivate func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [UWP.CompositionShape?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.replaceall)
    fileprivate func replaceAll(_ items: [UWP.CompositionShape?]) {
        try! _default.ReplaceAll(items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterableCompositionShape! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.CompositionShape?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint: WindowsFoundation.IID {
    .init(Data1: 0xdfa655cf, Data2: 0xfde7, Data3: 0x5048, Data4: ( 0xb4,0xbf,0xc9,0x09,0x23,0x1b,0x7e,0xdb ))// dfa655cf-fde7-5048-b4bf-c909231b7edb
}

internal var __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointVTable: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointVtbl = .init(
    QueryInterface: { __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.addRef($0) },
    Release: { __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.IID
        iids[3] = UWP.__x_ABI_C__FIIterable_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.Collections.IVector`1<Windows.UI.Input.PointerPoint>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    GetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let result = __unwrapped__instance.getAt(index)
        result?.copyTo($2)
        return S_OK
    },

    get_Size: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.size
        $1?.initialize(to: result)
        return S_OK
    },

    GetView: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.getView()
        let resultWrapper = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    IndexOf: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.PointerPoint? = __IMPL_Windows_UI_Input.PointerPointBridge.from(abi: ComPtr($1))
        var index: UInt32 = 0
        let result = __unwrapped__instance.indexOf(value, &index)
        $2?.initialize(to: index)
        $3?.initialize(to: .init(from: result))
        return S_OK
    },

    SetAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: UWP.PointerPoint? = __IMPL_Windows_UI_Input.PointerPointBridge.from(abi: ComPtr($2))
        __unwrapped__instance.setAt(index, value)
        return S_OK
    },

    InsertAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        let value: UWP.PointerPoint? = __IMPL_Windows_UI_Input.PointerPointBridge.from(abi: ComPtr($2))
        __unwrapped__instance.insertAt(index, value)
        return S_OK
    },

    RemoveAt: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let index: UInt32 = $1
        __unwrapped__instance.removeAt(index)
        return S_OK
    },

    Append: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let value: UWP.PointerPoint? = __IMPL_Windows_UI_Input.PointerPointBridge.from(abi: ComPtr($1))
        __unwrapped__instance.append(value)
        return S_OK
    },

    RemoveAtEnd: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.removeAtEnd()
        return S_OK
    },

    Clear: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        __unwrapped__instance.clear()
        return S_OK
    },

    GetMany: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let startIndex: UInt32 = $1
        var items: [UWP.PointerPoint?] = .from(abiBridge: __IMPL_Windows_UI_Input.PointerPointBridge.self, abi: (count: $2, start: $3))
        let result = __unwrapped__instance.getMany(startIndex, &items)
        items.fill(abi: $3, abiBridge: __IMPL_Windows_UI_Input.PointerPointBridge.self)
        $4?.initialize(to: result)
        return S_OK
    },

    ReplaceAll: {
        guard let __unwrapped__instance = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let items: [UWP.PointerPoint?] = .from(abiBridge: __IMPL_Windows_UI_Input.PointerPointBridge.self, abi: (count: $1, start: $2))
        __unwrapped__instance.replaceAll(items)
        return S_OK
    }
)
typealias __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointBridge>
public class IVectorPointerPoint: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint }

    open func GetAt(_ index: UInt32) throws -> UWP.PointerPoint? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetAt(pThis, index, &resultAbi))
            }
        }
        return __IMPL_Windows_UI_Input.PointerPointBridge.from(abi: result)
    }

    open func get_Size() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.get_Size(pThis, &result))
        }
        return result
    }

    open func GetView() throws -> WindowsFoundation.AnyIVectorView<UWP.PointerPoint?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetView(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CUI__CInput__CPointerPointWrapper.unwrapFrom(abi: result)
    }

    open func IndexOf(_ value: UWP.PointerPoint?, _ index: inout UInt32) throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.IndexOf(pThis, RawPointer(value), &index, &result))
        }
        return .init(from: result)
    }

    open func SetAt(_ index: UInt32, _ value: UWP.PointerPoint?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.SetAt(pThis, index, RawPointer(value)))
        }
    }

    open func InsertAt(_ index: UInt32, _ value: UWP.PointerPoint?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.InsertAt(pThis, index, RawPointer(value)))
        }
    }

    open func RemoveAt(_ index: UInt32) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAt(pThis, index))
        }
    }

    open func Append(_ value: UWP.PointerPoint?) throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Append(pThis, RawPointer(value)))
        }
    }

    open func RemoveAtEnd() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.RemoveAtEnd(pThis))
        }
    }

    open func Clear() throws {
        _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Clear(pThis))
        }
    }

    open func GetMany(_ startIndex: UInt32, _ items: inout [UWP.PointerPoint?]) throws -> UInt32 {
        var result: UINT32 = 0
        try items.toABI(abiBridge: __IMPL_Windows_UI_Input.PointerPointBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetMany(pThis, startIndex, _items.count, _items.start, &result))
            }
        items = .from(abiBridge: __IMPL_Windows_UI_Input.PointerPointBridge.self, abi: _items)
        }
        return result
    }

    open func ReplaceAll(_ items: [UWP.PointerPoint?]) throws {
        try items.toABI(abiBridge: __IMPL_Windows_UI_Input.PointerPointBridge.self) { _items in
            _ = try perform(as: __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.ReplaceAll(pThis, _items.count, _items.start))
            }
        }
    }

}

internal enum __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPoint
    internal typealias SwiftABI = IVectorPointerPoint
    internal typealias SwiftProjection = WindowsFoundation.AnyIVector<UWP.PointerPoint?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointImpl : IVector, AbiInterfaceImpl {
    typealias T = UWP.PointerPoint?
    typealias Bridge = __x_ABI_C__FIVector_1___x_ABI_CWindows__CUI__CInput__CPointerPointBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: Collection
    typealias Element = T
    var startIndex: Int { 0 }
    var endIndex: Int { Int(size) }
    func index(after i: Int) -> Int {
        i+1
    }

    func index(of: Element) -> Int? {
        var index: UInt32 = 0
        let result = indexOf(of, &index)
        guard result else { return nil }
        return Int(index)
    }
    var count: Int { Int(size) }


    subscript(position: Int) -> Element {
        get {
            getAt(UInt32(position))
        }
        set(newValue) {
            setAt(UInt32(position), newValue)
        }
    }

    func removeLast() {
        removeAtEnd()
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getat)
    fileprivate func getAt(_ index: UInt32) -> UWP.PointerPoint? {
        try! _default.GetAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getview)
    fileprivate func getView() -> WindowsFoundation.AnyIVectorView<UWP.PointerPoint?>? {
        try! _default.GetView()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.indexof)
    fileprivate func indexOf(_ value: UWP.PointerPoint?, _ index: inout UInt32) -> Bool {
        try! _default.IndexOf(value, &index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.setat)
    fileprivate func setAt(_ index: UInt32, _ value: UWP.PointerPoint?) {
        try! _default.SetAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.insertat)
    fileprivate func insertAt(_ index: UInt32, _ value: UWP.PointerPoint?) {
        try! _default.InsertAt(index, value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.removeat)
    fileprivate func removeAt(_ index: UInt32) {
        try! _default.RemoveAt(index)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.append)
    fileprivate func append(_ value: UWP.PointerPoint?) {
        try! _default.Append(value)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.removeatend)
    fileprivate func removeAtEnd() {
        try! _default.RemoveAtEnd()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.clear)
    fileprivate func clear() {
        try! _default.Clear()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.getmany)
    fileprivate func getMany(_ startIndex: UInt32, _ items: inout [UWP.PointerPoint?]) -> UInt32 {
        try! _default.GetMany(startIndex, &items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.replaceall)
    fileprivate func replaceAll(_ items: [UWP.PointerPoint?]) {
        try! _default.ReplaceAll(items)
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.size)
    fileprivate var size : UInt32 {
        get { try! _default.get_Size() }
    }

    private lazy var _IIterable: IIterablePointerPoint! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.collections.ivector-1.first)
    fileprivate func first() -> WindowsFoundation.AnyIIterator<UWP.PointerPoint?>? {
        try! _IIterable.First()
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0x24f981e5, Data2: 0xddca, Data3: 0x538d, Data4: ( 0xaa,0xda,0xa5,0x99,0x06,0x08,0x4c,0xf1 ))// 24f981e5-ddca-538d-aada-a59906084cf1
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectable {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectableVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectableVTable: __x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectableWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: WindowsFoundation.AnyIObservableMap<String, Any?>? = UWP.__x_ABI_C__FIObservableMap_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: ComPtr($1))
            let event: WindowsFoundation.AnyIMapChangedEventArgs<String>? = UWP.__x_ABI_C__FIMapChangedEventArgs_1_HSTRINGWrapper.unwrapFrom(abi: ComPtr($2))
            try __unwrapped__instance(sender, event)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectableWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectableBridge>
public class MapChangedEventHandlerString_Any: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectable }

    open func Invoke(_ sender: WindowsFoundation.AnyIObservableMap<String, Any?>?, _ event: WindowsFoundation.AnyIMapChangedEventArgs<String>?) throws {
        let senderWrapper = UWP.__x_ABI_C__FIObservableMap_2_HSTRING_IInspectableWrapper(sender)
        let _sender = try! senderWrapper?.toABI { $0 }
        let eventWrapper = UWP.__x_ABI_C__FIMapChangedEventArgs_1_HSTRINGWrapper(event)
        let _event = try! eventWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, _event))
        }
    }

}

internal class __x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectableBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.MapChangedEventHandler<String, Any?>
    internal typealias CABI = __x_ABI_C__FMapChangedEventHandler_2_HSTRING_IInspectable
    internal typealias SwiftABI = UWP.MapChangedEventHandlerString_Any

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, event) in
            try _default.Invoke(sender, event)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIEventHandler_1_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0xc50898f6, Data2: 0xc536, Data3: 0x5f47, Data4: ( 0x85,0x83,0x8b,0x2c,0x24,0x38,0xa1,0x3b ))// c50898f6-c536-5f47-8583-8b2c2438a13b
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIEventHandler_1_IInspectable {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIEventHandler_1_IInspectableVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIEventHandler_1_IInspectableVTable: __x_ABI_C__FIEventHandler_1_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FIEventHandler_1_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIEventHandler_1_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FIEventHandler_1_IInspectableWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIEventHandler_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let args: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIEventHandler_1_IInspectableWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIEventHandler_1_IInspectableBridge>
public class EventHandlerAny: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIEventHandler_1_IInspectable }

    open func Invoke(_ sender: Any?, _ args: Any?) throws {
        let senderWrapper = __ABI_.AnyWrapper(sender)
        let _sender = try! senderWrapper?.toABI { $0 }
        let argsWrapper = __ABI_.AnyWrapper(args)
        let _args = try! argsWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIEventHandler_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, _args))
        }
    }

}

internal class __x_ABI_C__FIEventHandler_1_IInspectableBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.EventHandler<Any?>
    internal typealias CABI = __x_ABI_C__FIEventHandler_1_IInspectable
    internal typealias SwiftABI = UWP.EventHandlerAny

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x49a07732, Data2: 0xe7b8, Data3: 0x5c5b, Data4: ( 0x9d,0xe7,0x22,0xe3,0x3c,0xb9,0x70,0x04 ))// 49a07732-e7b8-5c5b-9de7-22e33cb97004
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgsVTable: __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let args: UWP.BackgroundActivatedEventArgs? = __IMPL_Windows_ApplicationModel_Activation.BackgroundActivatedEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgsBridge>
public class EventHandlerBackgroundActivatedEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgs }

    open func Invoke(_ sender: Any?, _ args: UWP.BackgroundActivatedEventArgs?) throws {
        let senderWrapper = __ABI_.AnyWrapper(sender)
        let _sender = try! senderWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.EventHandler<UWP.BackgroundActivatedEventArgs?>
    internal typealias CABI = __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgs
    internal typealias SwiftABI = UWP.EventHandlerBackgroundActivatedEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CUnhandledErrorDetectedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xf68bc421, Data2: 0x6b54, Data3: 0x559b, Data4: ( 0x9c,0xdd,0x48,0x9a,0xad,0x0b,0xd4,0x1d ))// f68bc421-6b54-559b-9cdd-489aad0bd41d
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CUnhandledErrorDetectedEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CUnhandledErrorDetectedEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CUnhandledErrorDetectedEventArgsVTable: __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CUnhandledErrorDetectedEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CUnhandledErrorDetectedEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CUnhandledErrorDetectedEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CUnhandledErrorDetectedEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CUnhandledErrorDetectedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let args: UWP.UnhandledErrorDetectedEventArgs? = __IMPL_Windows_ApplicationModel_Core.UnhandledErrorDetectedEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CUnhandledErrorDetectedEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CUnhandledErrorDetectedEventArgsBridge>
public class EventHandlerUnhandledErrorDetectedEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CUnhandledErrorDetectedEventArgs }

    open func Invoke(_ sender: Any?, _ args: UWP.UnhandledErrorDetectedEventArgs?) throws {
        let senderWrapper = __ABI_.AnyWrapper(sender)
        let _sender = try! senderWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CUnhandledErrorDetectedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CUnhandledErrorDetectedEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.EventHandler<UWP.UnhandledErrorDetectedEventArgs?>
    internal typealias CABI = __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CUnhandledErrorDetectedEventArgs
    internal typealias SwiftABI = UWP.EventHandlerUnhandledErrorDetectedEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xdf4aac23, Data2: 0x4002, Data3: 0x5d4c, Data4: ( 0xa2,0x37,0x25,0x26,0xe3,0x44,0x97,0x8d ))// df4aac23-4002-5d4c-a237-2526e344978d
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryChangedEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryChangedEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryChangedEventArgsVTable: __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryChangedEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryChangedEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryChangedEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryChangedEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryChangedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let args: UWP.ClipboardHistoryChangedEventArgs? = __IMPL_Windows_ApplicationModel_DataTransfer.ClipboardHistoryChangedEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryChangedEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryChangedEventArgsBridge>
public class EventHandlerClipboardHistoryChangedEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryChangedEventArgs }

    open func Invoke(_ sender: Any?, _ args: UWP.ClipboardHistoryChangedEventArgs?) throws {
        let senderWrapper = __ABI_.AnyWrapper(sender)
        let _sender = try! senderWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryChangedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryChangedEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.EventHandler<UWP.ClipboardHistoryChangedEventArgs?>
    internal typealias CABI = __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryChangedEventArgs
    internal typealias SwiftABI = UWP.EventHandlerClipboardHistoryChangedEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CEnteredBackgroundEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xe0739c32, Data2: 0xfc14, Data3: 0x5361, Data4: ( 0xa8,0xb3,0x08,0x09,0x69,0x9f,0xbc,0xbd ))// e0739c32-fc14-5361-a8b3-0809699fbcbd
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CEnteredBackgroundEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CEnteredBackgroundEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CEnteredBackgroundEventArgsVTable: __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CEnteredBackgroundEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CEnteredBackgroundEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CEnteredBackgroundEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CEnteredBackgroundEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CEnteredBackgroundEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let args: UWP.EnteredBackgroundEventArgs? = __IMPL_Windows_ApplicationModel.EnteredBackgroundEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CEnteredBackgroundEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CEnteredBackgroundEventArgsBridge>
public class EventHandlerEnteredBackgroundEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CEnteredBackgroundEventArgs }

    open func Invoke(_ sender: Any?, _ args: UWP.EnteredBackgroundEventArgs?) throws {
        let senderWrapper = __ABI_.AnyWrapper(sender)
        let _sender = try! senderWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CEnteredBackgroundEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CEnteredBackgroundEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.EventHandler<UWP.EnteredBackgroundEventArgs?>
    internal typealias CABI = __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CEnteredBackgroundEventArgs
    internal typealias SwiftABI = UWP.EventHandlerEnteredBackgroundEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CLeavingBackgroundEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x9b6171c2, Data2: 0xabb2, Data3: 0x5194, Data4: ( 0xaf,0xc0,0xce,0xf1,0x67,0xc4,0x24,0xeb ))// 9b6171c2-abb2-5194-afc0-cef167c424eb
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CLeavingBackgroundEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CLeavingBackgroundEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CLeavingBackgroundEventArgsVTable: __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CLeavingBackgroundEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CLeavingBackgroundEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CLeavingBackgroundEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CLeavingBackgroundEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CLeavingBackgroundEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let args: UWP.LeavingBackgroundEventArgs? = __IMPL_Windows_ApplicationModel.LeavingBackgroundEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CLeavingBackgroundEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CLeavingBackgroundEventArgsBridge>
public class EventHandlerLeavingBackgroundEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CLeavingBackgroundEventArgs }

    open func Invoke(_ sender: Any?, _ args: UWP.LeavingBackgroundEventArgs?) throws {
        let senderWrapper = __ABI_.AnyWrapper(sender)
        let _sender = try! senderWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CLeavingBackgroundEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CLeavingBackgroundEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.EventHandler<UWP.LeavingBackgroundEventArgs?>
    internal typealias CABI = __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CLeavingBackgroundEventArgs
    internal typealias SwiftABI = UWP.EventHandlerLeavingBackgroundEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CSuspendingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x338579bf, Data2: 0x1a35, Data3: 0x5cc4, Data4: ( 0xa6,0x22,0xa6,0xf3,0x84,0xfd,0x89,0x2c ))// 338579bf-1a35-5cc4-a622-a6f384fd892c
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CSuspendingEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CSuspendingEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CSuspendingEventArgsVTable: __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CSuspendingEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CSuspendingEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CSuspendingEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CSuspendingEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CSuspendingEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let args: UWP.SuspendingEventArgs? = __IMPL_Windows_ApplicationModel.SuspendingEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CSuspendingEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CSuspendingEventArgsBridge>
public class EventHandlerSuspendingEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CSuspendingEventArgs }

    open func Invoke(_ sender: Any?, _ args: UWP.SuspendingEventArgs?) throws {
        let senderWrapper = __ABI_.AnyWrapper(sender)
        let _sender = try! senderWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CSuspendingEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CSuspendingEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.EventHandler<UWP.SuspendingEventArgs?>
    internal typealias CABI = __x_ABI_C__FIEventHandler_1___x_ABI_CWindows__CApplicationModel__CSuspendingEventArgs
    internal typealias SwiftABI = UWP.EventHandlerSuspendingEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32: WindowsFoundation.IID {
    .init(Data1: 0xeccb574a, Data2: 0xc684, Data3: 0x5572, Data4: ( 0xa6,0x79,0x6b,0x08,0x42,0xcf,0xb5,0x7f ))// eccb574a-c684-5572-a679-6b0842cfb57f
}

internal var __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32VTable: __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32Vtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32Wrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32Wrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32Wrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32Wrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperationWithProgress`2<UInt32, UInt32>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Progress: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32Wrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.progress = handler
        return S_OK
    },

    get_Progress: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.progress
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32Wrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32Wrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32Wrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            $1?.initialize(to: result)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32Wrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32Bridge>
public class IAsyncOperationWithProgressUInt32_UInt32: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32 }

    open func put_Progress(_ handler: AsyncOperationProgressHandler<UInt32, UInt32>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32Wrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Progress(pThis, _handler))
        }
    }

    open func get_Progress() throws -> AsyncOperationProgressHandler<UInt32, UInt32>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Progress(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationProgressHandler_2_UINT32_UINT32Wrapper.unwrapFrom(abi: result)
    }

    open func put_Completed(_ handler: AsyncOperationWithProgressCompletedHandler<UInt32, UInt32>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32Wrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationWithProgressCompletedHandler<UInt32, UInt32>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT32_UINT32Wrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &result))
        }
        return result
    }

}

internal enum __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32Bridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32
    internal typealias SwiftABI = IAsyncOperationWithProgressUInt32_UInt32
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperationWithProgress<UInt32, UInt32>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32Impl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32VTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32Impl : IAsyncOperationWithProgress, AbiInterfaceImpl {
    typealias TResult = UInt32
    typealias TProgress = UInt32
    typealias Bridge = __x_ABI_C__FIAsyncOperationWithProgress_2_UINT32_UINT32Bridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.getresults)
    fileprivate func getResults() throws -> UInt32 {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.progress)
    fileprivate var progress : AsyncOperationProgressHandler<UInt32, UInt32>? {
        get { try! _default.get_Progress() }
        set { try! _default.put_Progress(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.completed)
    fileprivate var completed : AsyncOperationWithProgressCompletedHandler<UInt32, UInt32>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64: WindowsFoundation.IID {
    .init(Data1: 0x8f1db6e3, Data2: 0x6556, Data3: 0x5516, Data4: ( 0x82,0x5c,0x10,0x21,0xee,0x27,0xcd,0x0c ))// 8f1db6e3-6556-5516-825c-1021ee27cd0c
}

internal var __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64VTable: __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64Vtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64Wrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64Wrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64Wrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64Wrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperationWithProgress`2<UInt64, UInt64>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Progress: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64Wrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.progress = handler
        return S_OK
    },

    get_Progress: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.progress
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64Wrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64Wrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64Wrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            $1?.initialize(to: result)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64Wrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64Bridge>
public class IAsyncOperationWithProgressUInt64_UInt64: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64 }

    open func put_Progress(_ handler: AsyncOperationProgressHandler<UInt64, UInt64>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64Wrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Progress(pThis, _handler))
        }
    }

    open func get_Progress() throws -> AsyncOperationProgressHandler<UInt64, UInt64>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Progress(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationProgressHandler_2_UINT64_UINT64Wrapper.unwrapFrom(abi: result)
    }

    open func put_Completed(_ handler: AsyncOperationWithProgressCompletedHandler<UInt64, UInt64>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64Wrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationWithProgressCompletedHandler<UInt64, UInt64>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2_UINT64_UINT64Wrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UInt64 {
        var result: UINT64 = 0
        _ = try perform(as: __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &result))
        }
        return result
    }

}

internal enum __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64Bridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64
    internal typealias SwiftABI = IAsyncOperationWithProgressUInt64_UInt64
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperationWithProgress<UInt64, UInt64>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64Impl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64VTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64Impl : IAsyncOperationWithProgress, AbiInterfaceImpl {
    typealias TResult = UInt64
    typealias TProgress = UInt64
    typealias Bridge = __x_ABI_C__FIAsyncOperationWithProgress_2_UINT64_UINT64Bridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.getresults)
    fileprivate func getResults() throws -> UInt64 {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.progress)
    fileprivate var progress : AsyncOperationProgressHandler<UInt64, UInt64>? {
        get { try! _default.get_Progress() }
        set { try! _default.put_Progress(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.completed)
    fileprivate var completed : AsyncOperationWithProgressCompletedHandler<UInt64, UInt64>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32: WindowsFoundation.IID {
    .init(Data1: 0xd26b2819, Data2: 0x897f, Data3: 0x5c7d, Data4: ( 0x84,0xd6,0x56,0xd7,0x96,0x56,0x14,0x31 ))// d26b2819-897f-5c7d-84d6-56d796561431
}

internal var __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32VTable: __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Vtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperationWithProgress`2<Windows.Storage.Streams.IBuffer, UInt32>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Progress: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.progress = handler
        return S_OK
    },

    get_Progress: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.progress
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            let resultWrapper = __ABI_Windows_Storage_Streams.IBufferWrapper(result)
            resultWrapper?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Bridge>
public class IAsyncOperationWithProgressIBuffer_UInt32: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32 }

    open func put_Progress(_ handler: AsyncOperationProgressHandler<UWP.AnyIBuffer?, UInt32>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Progress(pThis, _handler))
        }
    }

    open func get_Progress() throws -> AsyncOperationProgressHandler<UWP.AnyIBuffer?, UInt32>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Progress(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationProgressHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper.unwrapFrom(abi: result)
    }

    open func put_Completed(_ handler: AsyncOperationWithProgressCompletedHandler<UWP.AnyIBuffer?, UInt32>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationWithProgressCompletedHandler<UWP.AnyIBuffer?, UInt32>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationWithProgressCompletedHandler_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Wrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.AnyIBuffer? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __ABI_Windows_Storage_Streams.IBufferWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Bridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32
    internal typealias SwiftABI = IAsyncOperationWithProgressIBuffer_UInt32
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperationWithProgress<UWP.AnyIBuffer?, UInt32>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Impl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32VTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Impl : IAsyncOperationWithProgress, AbiInterfaceImpl {
    typealias TResult = UWP.AnyIBuffer?
    typealias TProgress = UInt32
    typealias Bridge = __x_ABI_C__FIAsyncOperationWithProgress_2___x_ABI_CWindows__CStorage__CStreams__CIBuffer_UINT32Bridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.getresults)
    fileprivate func getResults() throws -> UWP.AnyIBuffer? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.progress)
    fileprivate var progress : AsyncOperationProgressHandler<UWP.AnyIBuffer?, UInt32>? {
        get { try! _default.get_Progress() }
        set { try! _default.put_Progress(newValue) }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.completed)
    fileprivate var completed : AsyncOperationWithProgressCompletedHandler<UWP.AnyIBuffer?, UInt32>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperationwithprogress-2.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0xabf53c57, Data2: 0xee50, Data3: 0x5342, Data4: ( 0xb5,0x2a,0x26,0xe3,0xb8,0xcc,0x02,0x4f ))// abf53c57-ee50-5342-b52a-26e3b8cc024f
}

internal var __x_ABI_C__FIAsyncOperation_1_IInspectableVTable: __x_ABI_C__FIAsyncOperation_1_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1_IInspectableWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1_IInspectableWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Any>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectableWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectableWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            let resultWrapper = __ABI_.AnyWrapper(result)
            resultWrapper?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1_IInspectableWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1_IInspectableBridge>
public class IAsyncOperationAny: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1_IInspectable }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<Any?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectableWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<Any?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1_IInspectable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1_IInspectableWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> Any? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1_IInspectable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __ABI_.AnyWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1_IInspectableBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1_IInspectable
    internal typealias SwiftABI = IAsyncOperationAny
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<Any?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1_IInspectableImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1_IInspectableVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1_IInspectableImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = Any?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1_IInspectableBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> Any? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<Any?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1_boolean: WindowsFoundation.IID {
    .init(Data1: 0xcdb5efb3, Data2: 0x5788, Data3: 0x509d, Data4: ( 0x9b,0xe1,0x71,0xcc,0xb8,0xa3,0x36,0x2a ))// cdb5efb3-5788-509d-9be1-71ccb8a3362a
}

internal var __x_ABI_C__FIAsyncOperation_1_booleanVTable: __x_ABI_C__FIAsyncOperation_1_booleanVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1_booleanWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1_booleanWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1_booleanWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1_booleanWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Bool>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1_booleanWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1_booleanWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1_booleanWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            $1?.initialize(to: .init(from: result))
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1_booleanWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1_booleanBridge>
public class IAsyncOperationBool: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1_boolean }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<Bool>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1_boolean.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<Bool>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1_boolean.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> Bool {
        var result: boolean = 0
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1_boolean.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &result))
        }
        return .init(from: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1_booleanBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1_boolean
    internal typealias SwiftABI = IAsyncOperationBool
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<Bool>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1_booleanImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1_booleanVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1_booleanImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = Bool
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1_booleanBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> Bool {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<Bool>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1_HSTRING: WindowsFoundation.IID {
    .init(Data1: 0x3e1fe603, Data2: 0xf897, Data3: 0x5263, Data4: ( 0xb3,0x28,0x08,0x06,0x42,0x6b,0x8a,0x79 ))// 3e1fe603-f897-5263-b328-0806426b8a79
}

internal var __x_ABI_C__FIAsyncOperation_1_HSTRINGVTable: __x_ABI_C__FIAsyncOperation_1_HSTRINGVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1_HSTRINGWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1_HSTRINGWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1_HSTRINGWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1_HSTRINGWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<String>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRINGWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRINGWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1_HSTRINGWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            $1?.initialize(to: try! HString(result).detach())
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1_HSTRINGWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1_HSTRINGBridge>
public class IAsyncOperationString: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1_HSTRING }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<String>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRINGWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<String>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1_HSTRING.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1_HSTRINGWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> String {
        var result: HSTRING?
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1_HSTRING.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &result))
        }
        return .init(from: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1_HSTRINGBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1_HSTRING
    internal typealias SwiftABI = IAsyncOperationString
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<String>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1_HSTRINGImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1_HSTRINGVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1_HSTRINGImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = String
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1_HSTRINGBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> String {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<String>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1_UINT32: WindowsFoundation.IID {
    .init(Data1: 0xef60385f, Data2: 0xbe78, Data3: 0x584b, Data4: ( 0xaa,0xef,0x78,0x29,0xad,0xa2,0xb0,0xde ))// ef60385f-be78-584b-aaef-7829ada2b0de
}

internal var __x_ABI_C__FIAsyncOperation_1_UINT32VTable: __x_ABI_C__FIAsyncOperation_1_UINT32Vtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1_UINT32Wrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1_UINT32Wrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1_UINT32Wrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1_UINT32Wrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<UInt32>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1_UINT32Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1_UINT32Wrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1_UINT32Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1_UINT32Wrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1_UINT32Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            $1?.initialize(to: result)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1_UINT32Wrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1_UINT32Bridge>
public class IAsyncOperationUInt32: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1_UINT32 }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UInt32>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1_UINT32Wrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1_UINT32.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UInt32>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1_UINT32.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1_UINT32Wrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UInt32 {
        var result: UINT32 = 0
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1_UINT32.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &result))
        }
        return result
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1_UINT32Bridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1_UINT32
    internal typealias SwiftABI = IAsyncOperationUInt32
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UInt32>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1_UINT32Impl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1_UINT32VTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1_UINT32Impl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UInt32
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1_UINT32Bridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UInt32 {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UInt32>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReason: WindowsFoundation.IID {
    .init(Data1: 0x0938905d, Data2: 0x54c0, Data3: 0x572f, Data4: ( 0x84,0x51,0x4b,0xfd,0x2b,0x52,0xed,0xda ))// 0938905d-54c0-572f-8451-4bfd2b52edda
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.Core.AppRestartFailureReason>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            $1?.initialize(to: result)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonBridge>
public class IAsyncOperationAppRestartFailureReason: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReason }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.AppRestartFailureReason>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReason.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.AppRestartFailureReason>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReason.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.AppRestartFailureReason {
        var result: __x_ABI_CWindows_CApplicationModel_CCore_CAppRestartFailureReason = .init(0)
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReason.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &result))
        }
        return result
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReason
    internal typealias SwiftABI = IAsyncOperationAppRestartFailureReason
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.AppRestartFailureReason>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.AppRestartFailureReason
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CCore__CAppRestartFailureReasonBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.AppRestartFailureReason {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.AppRestartFailureReason>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResult: WindowsFoundation.IID {
    .init(Data1: 0x677b06b8, Data2: 0x0134, Data3: 0x5692, Data4: ( 0xb4,0x87,0x4c,0x8e,0x24,0x08,0xca,0x01 ))// 677b06b8-0134-5692-b487-4c8e2408ca01
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.ApplicationModel.DataTransfer.ClipboardHistoryItemsResult>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            result?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultBridge>
public class IAsyncOperationClipboardHistoryItemsResult: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResult }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.ClipboardHistoryItemsResult?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.ClipboardHistoryItemsResult?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResult.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.ClipboardHistoryItemsResult? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResult.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_ApplicationModel_DataTransfer.ClipboardHistoryItemsResultBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResult
    internal typealias SwiftABI = IAsyncOperationClipboardHistoryItemsResult
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.ClipboardHistoryItemsResult?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.ClipboardHistoryItemsResult?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CApplicationModel__CDataTransfer__CClipboardHistoryItemsResultBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.ClipboardHistoryItemsResult? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.ClipboardHistoryItemsResult?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference: WindowsFoundation.IID {
    .init(Data1: 0xfc012d44, Data2: 0x2dcf, Data3: 0x5162, Data4: ( 0xbe,0x9a,0x76,0x68,0x67,0x5a,0xa5,0x90 ))// fc012d44-2dcf-5162-be9a-7668675aa590
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IMapView`2<String, Windows.Storage.Streams.RandomAccessStreamReference>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            let resultWrapper = UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper(result)
            resultWrapper?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge>
public class IAsyncOperationIMapViewString_RandomAccessStreamReference: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<WindowsFoundation.AnyIMapView<String, UWP.RandomAccessStreamReference?>?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<WindowsFoundation.AnyIMapView<String, UWP.RandomAccessStreamReference?>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> WindowsFoundation.AnyIMapView<String, UWP.RandomAccessStreamReference?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference
    internal typealias SwiftABI = IAsyncOperationIMapViewString_RandomAccessStreamReference
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIMapView<String, UWP.RandomAccessStreamReference?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = WindowsFoundation.AnyIMapView<String, UWP.RandomAccessStreamReference?>?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> WindowsFoundation.AnyIMapView<String, UWP.RandomAccessStreamReference?>? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<WindowsFoundation.AnyIMapView<String, UWP.RandomAccessStreamReference?>?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMap_2_HSTRING_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0x127e39c7, Data2: 0x07c1, Data3: 0x58e5, Data4: ( 0xb4,0x8e,0x3a,0x47,0x29,0x83,0x9f,0xec ))// 127e39c7-07c1-58e5-b48e-3a4729839fec
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMap_2_HSTRING_IInspectableVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMap_2_HSTRING_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IMap`2<String, Any>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            let resultWrapper = UWP.__x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper(result)
            resultWrapper?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMap_2_HSTRING_IInspectableBridge>
public class IAsyncOperationIMapString_Any: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMap_2_HSTRING_IInspectable }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<WindowsFoundation.AnyIMap<String, Any?>?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMap_2_HSTRING_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<WindowsFoundation.AnyIMap<String, Any?>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMap_2_HSTRING_IInspectable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> WindowsFoundation.AnyIMap<String, Any?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMap_2_HSTRING_IInspectable.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIMap_2_HSTRING_IInspectableWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMap_2_HSTRING_IInspectableBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMap_2_HSTRING_IInspectable
    internal typealias SwiftABI = IAsyncOperationIMapString_Any
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIMap<String, Any?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMap_2_HSTRING_IInspectableImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMap_2_HSTRING_IInspectableVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMap_2_HSTRING_IInspectableImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = WindowsFoundation.AnyIMap<String, Any?>?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIMap_2_HSTRING_IInspectableBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> WindowsFoundation.AnyIMap<String, Any?>? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<WindowsFoundation.AnyIMap<String, Any?>?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySet: WindowsFoundation.IID {
    .init(Data1: 0x490b0686, Data2: 0xafd7, Data3: 0x5037, Data4: ( 0x96,0x47,0xd8,0xfe,0x24,0x8f,0x18,0x2c ))// 490b0686-afd7-5037-9647-d8fe248f182c
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySetVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySetVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySetWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySetWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySetWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySetWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IPropertySet>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySetWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySetWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySetWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySetWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySetWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            let resultWrapper = __ABI_Windows_Foundation_Collections.IPropertySetWrapper(result)
            resultWrapper?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySetWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySetBridge>
public class IAsyncOperationIPropertySet: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySet }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<WindowsFoundation.AnyIPropertySet?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySetWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySet.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<WindowsFoundation.AnyIPropertySet?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySet.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__F__CIPropertySetWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> WindowsFoundation.AnyIPropertySet? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySet.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __ABI_Windows_Foundation_Collections.IPropertySetWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySetBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySet
    internal typealias SwiftABI = IAsyncOperationIPropertySet
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIPropertySet?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySetImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySetVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySetImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = WindowsFoundation.AnyIPropertySet?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__F__CIPropertySetBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> WindowsFoundation.AnyIPropertySet? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<WindowsFoundation.AnyIPropertySet?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo: WindowsFoundation.IID {
    .init(Data1: 0x07543d91, Data2: 0x8610, Data3: 0x5152, Data4: ( 0xb0,0xe4,0x43,0xd6,0xe4,0xcd,0xd0,0xcb ))// 07543d91-8610-5152-b0e4-43d6e4cdd0cb
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.ApplicationModel.AppInfo>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            let resultWrapper = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper(result)
            resultWrapper?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoBridge>
public class IAsyncOperationIVectorViewAppInfo: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<WindowsFoundation.AnyIVectorView<UWP.AppInfo?>?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<WindowsFoundation.AnyIVectorView<UWP.AppInfo?>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> WindowsFoundation.AnyIVectorView<UWP.AppInfo?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfo
    internal typealias SwiftABI = IAsyncOperationIVectorViewAppInfo
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.AppInfo?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = WindowsFoundation.AnyIVectorView<UWP.AppInfo?>?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CApplicationModel__CAppInfoBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> WindowsFoundation.AnyIVectorView<UWP.AppInfo?>? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<WindowsFoundation.AnyIVectorView<UWP.AppInfo?>?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem: WindowsFoundation.IID {
    .init(Data1: 0x4b1c0fd7, Data2: 0x7a01, Data3: 0x5e7a, Data4: ( 0xa6,0xfe,0xbe,0x45,0x00,0x28,0x3f,0x23 ))// 4b1c0fd7-7a01-5e7a-a6fe-be4500283f23
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Storage.IStorageItem>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            let resultWrapper = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper(result)
            resultWrapper?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemBridge>
public class IAsyncOperationIVectorViewIStorageItem: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<WindowsFoundation.AnyIVectorView<UWP.AnyIStorageItem?>?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<WindowsFoundation.AnyIVectorView<UWP.AnyIStorageItem?>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> WindowsFoundation.AnyIVectorView<UWP.AnyIStorageItem?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItem
    internal typealias SwiftABI = IAsyncOperationIVectorViewIStorageItem
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.AnyIStorageItem?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = WindowsFoundation.AnyIVectorView<UWP.AnyIStorageItem?>?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CIStorageItemBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> WindowsFoundation.AnyIVectorView<UWP.AnyIStorageItem?>? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<WindowsFoundation.AnyIVectorView<UWP.AnyIStorageItem?>?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFile: WindowsFoundation.IID {
    .init(Data1: 0x03362e33, Data2: 0xe413, Data3: 0x5f29, Data4: ( 0x97,0xd0,0x48,0xa4,0x78,0x09,0x35,0xf9 ))// 03362e33-e413-5f29-97d0-48a4780935f9
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Storage.StorageFile>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            let resultWrapper = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper(result)
            resultWrapper?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileBridge>
public class IAsyncOperationIVectorViewStorageFile: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFile }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<WindowsFoundation.AnyIVectorView<UWP.StorageFile?>?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<WindowsFoundation.AnyIVectorView<UWP.StorageFile?>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFile.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> WindowsFoundation.AnyIVectorView<UWP.StorageFile?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFile.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFile
    internal typealias SwiftABI = IAsyncOperationIVectorViewStorageFile
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.StorageFile?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = WindowsFoundation.AnyIVectorView<UWP.StorageFile?>?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFileBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> WindowsFoundation.AnyIVectorView<UWP.StorageFile?>? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<WindowsFoundation.AnyIVectorView<UWP.StorageFile?>?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolder: WindowsFoundation.IID {
    .init(Data1: 0xca40b21b, Data2: 0xaeb1, Data3: 0x5a61, Data4: ( 0x9e,0x08,0x3b,0xd5,0xd9,0x59,0x40,0x23 ))// ca40b21b-aeb1-5a61-9e08-3bd5d9594023
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Storage.StorageFolder>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            let resultWrapper = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper(result)
            resultWrapper?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderBridge>
public class IAsyncOperationIVectorViewStorageFolder: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolder }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<WindowsFoundation.AnyIVectorView<UWP.StorageFolder?>?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolder.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<WindowsFoundation.AnyIVectorView<UWP.StorageFolder?>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> WindowsFoundation.AnyIVectorView<UWP.StorageFolder?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolder
    internal typealias SwiftABI = IAsyncOperationIVectorViewStorageFolder
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.StorageFolder?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = WindowsFoundation.AnyIVectorView<UWP.StorageFolder?>?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFolderBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> WindowsFoundation.AnyIVectorView<UWP.StorageFolder?>? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<WindowsFoundation.AnyIVectorView<UWP.StorageFolder?>?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChange: WindowsFoundation.IID {
    .init(Data1: 0x66e11b8a, Data2: 0x9003, Data3: 0x52c9, Data4: ( 0x84,0xa8,0xae,0x5c,0xce,0xbe,0x8c,0xf9 ))// 66e11b8a-9003-52c9-84a8-ae5ccebe8cf9
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.Storage.StorageLibraryChange>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            let resultWrapper = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper(result)
            resultWrapper?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeBridge>
public class IAsyncOperationIVectorViewStorageLibraryChange: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChange }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<WindowsFoundation.AnyIVectorView<UWP.StorageLibraryChange?>?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChange.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<WindowsFoundation.AnyIVectorView<UWP.StorageLibraryChange?>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> WindowsFoundation.AnyIVectorView<UWP.StorageLibraryChange?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChange.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChange
    internal typealias SwiftABI = IAsyncOperationIVectorViewStorageLibraryChange
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.StorageLibraryChange?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = WindowsFoundation.AnyIVectorView<UWP.StorageLibraryChange?>?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageLibraryChangeBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> WindowsFoundation.AnyIVectorView<UWP.StorageLibraryChange?>? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<WindowsFoundation.AnyIVectorView<UWP.StorageLibraryChange?>?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser: WindowsFoundation.IID {
    .init(Data1: 0xe44ea1df, Data2: 0xbb85, Data3: 0x5a8c, Data4: ( 0xbd,0xdc,0xc8,0xe9,0x60,0xc3,0x55,0xc9 ))// e44ea1df-bb85-5a8c-bddc-c8e960c355c9
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Collections.IVectorView`1<Windows.System.User>>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            let resultWrapper = UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper(result)
            resultWrapper?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserBridge>
public class IAsyncOperationIVectorViewUser: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<WindowsFoundation.AnyIVectorView<UWP.User?>?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<WindowsFoundation.AnyIVectorView<UWP.User?>?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> WindowsFoundation.AnyIVectorView<UWP.User?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUser
    internal typealias SwiftABI = IAsyncOperationIVectorViewUser
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.AnyIVectorView<UWP.User?>?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = WindowsFoundation.AnyIVectorView<UWP.User?>?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CSystem__CUserBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> WindowsFoundation.AnyIVectorView<UWP.User?>? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<WindowsFoundation.AnyIVectorView<UWP.User?>?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CFoundation__CUri: WindowsFoundation.IID {
    .init(Data1: 0x641cb9dd, Data2: 0xa28d, Data3: 0x59e2, Data4: ( 0xb8,0xdb,0xa2,0x27,0xed,0xa6,0xcf,0x2e ))// 641cb9dd-a28d-59e2-b8db-a227eda6cf2e
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CFoundation__CUriVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CFoundation__CUriVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CFoundation__CUriWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CFoundation__CUriWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CFoundation__CUriWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CFoundation__CUriWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Foundation.Uri>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CFoundation__CUriWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CFoundation__CUriWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CFoundation__CUriWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CFoundation__CUriWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CFoundation__CUriWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            result?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CFoundation__CUriWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CFoundation__CUriBridge>
public class IAsyncOperationUri: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CFoundation__CUri }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<WindowsFoundation.Uri?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CFoundation__CUriWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CFoundation__CUri.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<WindowsFoundation.Uri?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CFoundation__CUri.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CFoundation__CUriWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> WindowsFoundation.Uri? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CFoundation__CUri.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_Foundation.UriBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CFoundation__CUriBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CFoundation__CUri
    internal typealias SwiftABI = IAsyncOperationUri
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<WindowsFoundation.Uri?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CFoundation__CUriImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CFoundation__CUriVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CFoundation__CUriImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = WindowsFoundation.Uri?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CFoundation__CUriBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> WindowsFoundation.Uri? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<WindowsFoundation.Uri?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder: WindowsFoundation.IID {
    .init(Data1: 0xaa94d8e9, Data2: 0xcaef, Data3: 0x53f6, Data4: ( 0x82,0x3d,0x91,0xb6,0xe8,0x34,0x05,0x10 ))// aa94d8e9-caef-53f6-823d-91b6e8340510
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Graphics.Imaging.BitmapDecoder>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            result?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderBridge>
public class IAsyncOperationBitmapDecoder: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.BitmapDecoder?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.BitmapDecoder?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.BitmapDecoder? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_Graphics_Imaging.BitmapDecoderBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoder
    internal typealias SwiftABI = IAsyncOperationBitmapDecoder
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.BitmapDecoder?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.BitmapDecoder?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapDecoderBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.BitmapDecoder? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.BitmapDecoder?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder: WindowsFoundation.IID {
    .init(Data1: 0x151bd1c5, Data2: 0x4675, Data3: 0x5af5, Data4: ( 0xa2,0x89,0x00,0x1e,0xdc,0x66,0xb8,0x6a ))// 151bd1c5-4675-5af5-a289-001edc66b86a
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Graphics.Imaging.BitmapEncoder>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            result?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderBridge>
public class IAsyncOperationBitmapEncoder: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.BitmapEncoder?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.BitmapEncoder?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.BitmapEncoder? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_Graphics_Imaging.BitmapEncoderBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoder
    internal typealias SwiftABI = IAsyncOperationBitmapEncoder
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.BitmapEncoder?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.BitmapEncoder?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapEncoderBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.BitmapEncoder? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.BitmapEncoder?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame: WindowsFoundation.IID {
    .init(Data1: 0xcb1483d1, Data2: 0x1464, Data3: 0x5bf9, Data4: ( 0x93,0x46,0xd5,0x37,0x73,0x5d,0xfb,0xd6 ))// cb1483d1-1464-5bf9-9346-d537735dfbd6
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Graphics.Imaging.BitmapFrame>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            result?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameBridge>
public class IAsyncOperationBitmapFrame: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.BitmapFrame?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.BitmapFrame?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.BitmapFrame? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_Graphics_Imaging.BitmapFrameBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrame
    internal typealias SwiftABI = IAsyncOperationBitmapFrame
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.BitmapFrame?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.BitmapFrame?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapFrameBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.BitmapFrame? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.BitmapFrame?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet: WindowsFoundation.IID {
    .init(Data1: 0x464ac000, Data2: 0xb1f1, Data3: 0x5246, Data4: ( 0x82,0x68,0x91,0x2a,0x25,0x93,0xd8,0x89 ))// 464ac000-b1f1-5246-8268-912a2593d889
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Graphics.Imaging.BitmapPropertySet>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            result?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetBridge>
public class IAsyncOperationBitmapPropertySet: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.BitmapPropertySet?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.BitmapPropertySet?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.BitmapPropertySet? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_Graphics_Imaging.BitmapPropertySetBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySet
    internal typealias SwiftABI = IAsyncOperationBitmapPropertySet
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.BitmapPropertySet?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.BitmapPropertySet?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CBitmapPropertySetBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.BitmapPropertySet? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.BitmapPropertySet?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream: WindowsFoundation.IID {
    .init(Data1: 0x684165be, Data2: 0x0011, Data3: 0x56d6, Data4: ( 0xbe,0xbf,0x43,0x00,0x16,0xd5,0x1b,0x7a ))// 684165be-0011-56d6-bebf-430016d51b7a
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Graphics.Imaging.ImageStream>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            result?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamBridge>
public class IAsyncOperationImageStream: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.ImageStream?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.ImageStream?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.ImageStream? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_Graphics_Imaging.ImageStreamBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStream
    internal typealias SwiftABI = IAsyncOperationImageStream
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.ImageStream?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.ImageStream?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CImageStreamBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.ImageStream? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.ImageStream?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider: WindowsFoundation.IID {
    .init(Data1: 0x8c2dfeb0, Data2: 0x6c22, Data3: 0x5863, Data4: ( 0x88,0xd8,0x85,0xc1,0xfb,0xc7,0x56,0x97 ))// 8c2dfeb0-6c22-5863-88d8-85c1fbc75697
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Graphics.Imaging.PixelDataProvider>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            result?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderBridge>
public class IAsyncOperationPixelDataProvider: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.PixelDataProvider?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.PixelDataProvider?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.PixelDataProvider? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_Graphics_Imaging.PixelDataProviderBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProvider
    internal typealias SwiftABI = IAsyncOperationPixelDataProvider
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.PixelDataProvider?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.PixelDataProvider?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CPixelDataProviderBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.PixelDataProvider? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.PixelDataProvider?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap: WindowsFoundation.IID {
    .init(Data1: 0xc4a10980, Data2: 0x714b, Data3: 0x5501, Data4: ( 0x8d,0xa2,0xdb,0xda,0xcc,0xe7,0x0f,0x73 ))// c4a10980-714b-5501-8da2-dbdacce70f73
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Graphics.Imaging.SoftwareBitmap>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            result?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapBridge>
public class IAsyncOperationSoftwareBitmap: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.SoftwareBitmap?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.SoftwareBitmap?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.SoftwareBitmap? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_Graphics_Imaging.SoftwareBitmapBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmap
    internal typealias SwiftABI = IAsyncOperationSoftwareBitmap
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.SoftwareBitmap?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.SoftwareBitmap?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CGraphics__CImaging__CSoftwareBitmapBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.SoftwareBitmap? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.SoftwareBitmap?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResult: WindowsFoundation.IID {
    .init(Data1: 0xe8d81715, Data2: 0xc56c, Data3: 0x5a6b, Data4: ( 0xb7,0x38,0x5d,0xf6,0xc2,0x77,0x5b,0x7b ))// e8d81715-c56c-5a6b-b738-5df6c2775b7b
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Security.EnterpriseData.ProtectionPolicyEvaluationResult>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            $1?.initialize(to: result)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultBridge>
public class IAsyncOperationProtectionPolicyEvaluationResult: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResult }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.ProtectionPolicyEvaluationResult>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.ProtectionPolicyEvaluationResult>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResult.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.ProtectionPolicyEvaluationResult {
        var result: __x_ABI_CWindows_CSecurity_CEnterpriseData_CProtectionPolicyEvaluationResult = .init(0)
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &result))
        }
        return result
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResult
    internal typealias SwiftABI = IAsyncOperationProtectionPolicyEvaluationResult
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.ProtectionPolicyEvaluationResult>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.ProtectionPolicyEvaluationResult
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSecurity__CEnterpriseData__CProtectionPolicyEvaluationResultBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.ProtectionPolicyEvaluationResult {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.ProtectionPolicyEvaluationResult>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CApplicationData: WindowsFoundation.IID {
    .init(Data1: 0x31456b58, Data2: 0xa5cb, Data3: 0x5c5b, Data4: ( 0xbd,0x6e,0xcc,0xce,0x3a,0x7b,0xf4,0xb4 ))// 31456b58-a5cb-5c5b-bd6e-ccce3a7bf4b4
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CApplicationDataVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CApplicationDataVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CApplicationDataWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CApplicationDataWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CApplicationDataWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CApplicationDataWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Storage.ApplicationData>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CApplicationDataWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CApplicationDataWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CApplicationDataWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CApplicationDataWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CApplicationDataWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            result?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CApplicationDataWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CApplicationDataBridge>
public class IAsyncOperationApplicationData: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CApplicationData }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.ApplicationData?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CApplicationDataWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CApplicationData.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.ApplicationData?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CApplicationData.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CApplicationDataWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.ApplicationData? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CApplicationData.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_Storage.ApplicationDataBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CApplicationDataBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CApplicationData
    internal typealias SwiftABI = IAsyncOperationApplicationData
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.ApplicationData?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CApplicationDataImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CApplicationDataVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CApplicationDataImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.ApplicationData?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CApplicationDataBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.ApplicationData? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.ApplicationData?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicProperties: WindowsFoundation.IID {
    .init(Data1: 0x5186131a, Data2: 0x4467, Data3: 0x504b, Data4: ( 0x97,0x7a,0x07,0x85,0xa8,0x23,0x04,0x85 ))// 5186131a-4467-504b-977a-0785a8230485
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Storage.FileProperties.BasicProperties>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            result?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesBridge>
public class IAsyncOperationBasicProperties: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicProperties }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.BasicProperties?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicProperties.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.BasicProperties?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.BasicProperties? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_Storage_FileProperties.BasicPropertiesBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicProperties
    internal typealias SwiftABI = IAsyncOperationBasicProperties
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.BasicProperties?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.BasicProperties?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CBasicPropertiesBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.BasicProperties? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.BasicProperties?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentProperties: WindowsFoundation.IID {
    .init(Data1: 0x6c86e97c, Data2: 0x5699, Data3: 0x5700, Data4: ( 0x8d,0x35,0xd3,0x50,0xad,0x3e,0x4d,0xf2 ))// 6c86e97c-5699-5700-8d35-d350ad3e4df2
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Storage.FileProperties.DocumentProperties>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            result?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesBridge>
public class IAsyncOperationDocumentProperties: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentProperties }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.DocumentProperties?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentProperties.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.DocumentProperties?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.DocumentProperties? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_Storage_FileProperties.DocumentPropertiesBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentProperties
    internal typealias SwiftABI = IAsyncOperationDocumentProperties
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.DocumentProperties?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.DocumentProperties?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CDocumentPropertiesBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.DocumentProperties? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.DocumentProperties?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CImageProperties: WindowsFoundation.IID {
    .init(Data1: 0xfcd07511, Data2: 0xe7f8, Data3: 0x5bda, Data4: ( 0x8c,0x04,0x79,0x5a,0x63,0x9d,0xae,0x8f ))// fcd07511-e7f8-5bda-8c04-795a639dae8f
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Storage.FileProperties.ImageProperties>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            result?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesBridge>
public class IAsyncOperationImageProperties: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CImageProperties }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.ImageProperties?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CImageProperties.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.ImageProperties?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CImageProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.ImageProperties? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CImageProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_Storage_FileProperties.ImagePropertiesBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CImageProperties
    internal typealias SwiftABI = IAsyncOperationImageProperties
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.ImageProperties?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.ImageProperties?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CImagePropertiesBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.ImageProperties? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.ImageProperties?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicProperties: WindowsFoundation.IID {
    .init(Data1: 0x0d023b76, Data2: 0x20a7, Data3: 0x56f3, Data4: ( 0x84,0xab,0xce,0x31,0xe6,0x54,0x4b,0x71 ))// 0d023b76-20a7-56f3-84ab-ce31e6544b71
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Storage.FileProperties.MusicProperties>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            result?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesBridge>
public class IAsyncOperationMusicProperties: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicProperties }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.MusicProperties?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicProperties.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.MusicProperties?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.MusicProperties? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_Storage_FileProperties.MusicPropertiesBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicProperties
    internal typealias SwiftABI = IAsyncOperationMusicProperties
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.MusicProperties?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.MusicProperties?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CMusicPropertiesBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.MusicProperties? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.MusicProperties?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnail: WindowsFoundation.IID {
    .init(Data1: 0x11c7cc5e, Data2: 0xc04e, Data3: 0x50e7, Data4: ( 0xa6,0x5e,0x6f,0x69,0x03,0x69,0x0c,0x16 ))// 11c7cc5e-c04e-50e7-a65e-6f6903690c16
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Storage.FileProperties.StorageItemThumbnail>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            result?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailBridge>
public class IAsyncOperationStorageItemThumbnail: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnail }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.StorageItemThumbnail?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnail.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.StorageItemThumbnail?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnail.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.StorageItemThumbnail? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnail.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_Storage_FileProperties.StorageItemThumbnailBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnail
    internal typealias SwiftABI = IAsyncOperationStorageItemThumbnail
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.StorageItemThumbnail?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.StorageItemThumbnail?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CStorageItemThumbnailBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.StorageItemThumbnail? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.StorageItemThumbnail?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoProperties: WindowsFoundation.IID {
    .init(Data1: 0x447d4590, Data2: 0xd3f9, Data3: 0x58bf, Data4: ( 0xac,0x58,0x6f,0x9a,0x50,0x83,0x9e,0xfe ))// 447d4590-d3f9-58bf-ac58-6f9a50839efe
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Storage.FileProperties.VideoProperties>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            result?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesBridge>
public class IAsyncOperationVideoProperties: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoProperties }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.VideoProperties?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoProperties.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.VideoProperties?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.VideoProperties? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoProperties.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_Storage_FileProperties.VideoPropertiesBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoProperties
    internal typealias SwiftABI = IAsyncOperationVideoProperties
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.VideoProperties?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.VideoProperties?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CFileProperties__CVideoPropertiesBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.VideoProperties? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.VideoProperties?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CIStorageItem: WindowsFoundation.IID {
    .init(Data1: 0x5fc9c137, Data2: 0xebb7, Data3: 0x5e6c, Data4: ( 0x9c,0xba,0x68,0x6f,0x2e,0xc2,0xb0,0xbb ))// 5fc9c137-ebb7-5e6c-9cba-686f2ec2b0bb
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CIStorageItemVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CIStorageItemVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Storage.IStorageItem>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            let resultWrapper = __ABI_Windows_Storage.IStorageItemWrapper(result)
            resultWrapper?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CIStorageItemBridge>
public class IAsyncOperationIStorageItem: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CIStorageItem }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.AnyIStorageItem?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.AnyIStorageItem?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CIStorageItemWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.AnyIStorageItem? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CIStorageItem.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __ABI_Windows_Storage.IStorageItemWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CIStorageItemBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CIStorageItem
    internal typealias SwiftABI = IAsyncOperationIStorageItem
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.AnyIStorageItem?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CIStorageItemImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CIStorageItemVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CIStorageItemImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.AnyIStorageItem?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CIStorageItemBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.AnyIStorageItem? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.AnyIStorageItem?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CSearch__CIndexedState: WindowsFoundation.IID {
    .init(Data1: 0x88694b1f, Data2: 0xf380, Data3: 0x574d, Data4: ( 0x8a,0x05,0x4f,0x67,0xbd,0x52,0xcd,0x11 ))// 88694b1f-f380-574d-8a05-4f67bd52cd11
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Storage.Search.IndexedState>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            $1?.initialize(to: result)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateBridge>
public class IAsyncOperationIndexedState: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CSearch__CIndexedState }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.IndexedState>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CSearch__CIndexedState.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.IndexedState>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CSearch__CIndexedState.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.IndexedState {
        var result: __x_ABI_CWindows_CStorage_CSearch_CIndexedState = .init(0)
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CSearch__CIndexedState.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &result))
        }
        return result
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CSearch__CIndexedState
    internal typealias SwiftABI = IAsyncOperationIndexedState
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.IndexedState>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.IndexedState
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CSearch__CIndexedStateBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.IndexedState {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.IndexedState>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFile: WindowsFoundation.IID {
    .init(Data1: 0x5e52f8ce, Data2: 0xaced, Data3: 0x5a42, Data4: ( 0x95,0xb4,0xf6,0x74,0xdd,0x84,0x88,0x5e ))// 5e52f8ce-aced-5a42-95b4-f674dd84885e
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Storage.StorageFile>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFileWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            result?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileBridge>
public class IAsyncOperationStorageFile: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFile }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.StorageFile?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFileWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFile.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.StorageFile?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFile.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFileWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.StorageFile? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFile.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_Storage.StorageFileBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFile
    internal typealias SwiftABI = IAsyncOperationStorageFile
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.StorageFile?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.StorageFile?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFileBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.StorageFile? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.StorageFile?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolder: WindowsFoundation.IID {
    .init(Data1: 0x6be9e7d7, Data2: 0xe83a, Data3: 0x5cbc, Data4: ( 0x80,0x2c,0x17,0x68,0x96,0x0b,0x52,0xc3 ))// 6be9e7d7-e83a-5cbc-802c-1768960b52c3
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Storage.StorageFolder>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            result?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderBridge>
public class IAsyncOperationStorageFolder: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolder }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.StorageFolder?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolder.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.StorageFolder?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageFolderWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.StorageFolder? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolder.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_Storage.StorageFolderBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolder
    internal typealias SwiftABI = IAsyncOperationStorageFolder
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.StorageFolder?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.StorageFolder?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageFolderBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.StorageFolder? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.StorageFolder?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageStreamTransaction: WindowsFoundation.IID {
    .init(Data1: 0x0d81405a, Data2: 0x9bd3, Data3: 0x5e87, Data4: ( 0x82,0xf4,0x9b,0x41,0x28,0xa8,0x87,0xeb ))// 0d81405a-9bd3-5e87-82f4-9b4128a887eb
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Storage.StorageStreamTransaction>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            result?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionBridge>
public class IAsyncOperationStorageStreamTransaction: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageStreamTransaction }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.StorageStreamTransaction?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageStreamTransaction.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.StorageStreamTransaction?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageStreamTransaction.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.StorageStreamTransaction? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageStreamTransaction.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_Storage.StorageStreamTransactionBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageStreamTransaction
    internal typealias SwiftABI = IAsyncOperationStorageStreamTransaction
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.StorageStreamTransaction?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.StorageStreamTransaction?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStorageStreamTransactionBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.StorageStreamTransaction? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.StorageStreamTransaction?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIInputStream: WindowsFoundation.IID {
    .init(Data1: 0xa8fe0732, Data2: 0x556d, Data3: 0x5841, Data4: ( 0xb7,0xee,0xb3,0x45,0x0f,0xb5,0x26,0x66 ))// a8fe0732-556d-5841-b7ee-b3450fb52666
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IInputStream>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            let resultWrapper = __ABI_Windows_Storage_Streams.IInputStreamWrapper(result)
            resultWrapper?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamBridge>
public class IAsyncOperationIInputStream: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIInputStream }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.AnyIInputStream?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIInputStream.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.AnyIInputStream?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIInputStream.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.AnyIInputStream? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIInputStream.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __ABI_Windows_Storage_Streams.IInputStreamWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIInputStream
    internal typealias SwiftABI = IAsyncOperationIInputStream
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.AnyIInputStream?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.AnyIInputStream?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIInputStreamBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.AnyIInputStream? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.AnyIInputStream?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStream: WindowsFoundation.IID {
    .init(Data1: 0x430ecece, Data2: 0x1418, Data3: 0x5d19, Data4: ( 0x81,0xb2,0x5d,0xdb,0x38,0x16,0x03,0xcc ))// 430ecece-1418-5d19-81b2-5ddb381603cc
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IRandomAccessStream>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            let resultWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper(result)
            resultWrapper?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamBridge>
public class IAsyncOperationIRandomAccessStream: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStream }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.AnyIRandomAccessStream?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStream.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.AnyIRandomAccessStream?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStream.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.AnyIRandomAccessStream? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStream.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __ABI_Windows_Storage_Streams.IRandomAccessStreamWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStream
    internal typealias SwiftABI = IAsyncOperationIRandomAccessStream
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.AnyIRandomAccessStream?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.AnyIRandomAccessStream?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.AnyIRandomAccessStream? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.AnyIRandomAccessStream?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference: WindowsFoundation.IID {
    .init(Data1: 0x65178d50, Data2: 0xe6a2, Data3: 0x5d16, Data4: ( 0xb2,0x44,0x65,0xe9,0x72,0x5e,0x5a,0x0c ))// 65178d50-e6a2-5d16-b244-65e9725e5a0c
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IRandomAccessStreamReference>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            let resultWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamReferenceWrapper(result)
            resultWrapper?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceBridge>
public class IAsyncOperationIRandomAccessStreamReference: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.AnyIRandomAccessStreamReference?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.AnyIRandomAccessStreamReference?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.AnyIRandomAccessStreamReference? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __ABI_Windows_Storage_Streams.IRandomAccessStreamReferenceWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReference
    internal typealias SwiftABI = IAsyncOperationIRandomAccessStreamReference
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.AnyIRandomAccessStreamReference?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.AnyIRandomAccessStreamReference?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamReferenceBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.AnyIRandomAccessStreamReference? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.AnyIRandomAccessStreamReference?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType: WindowsFoundation.IID {
    .init(Data1: 0xc4a57c5e, Data2: 0x32b0, Data3: 0x55b3, Data4: ( 0xad,0x13,0xce,0x1c,0x23,0x04,0x1e,0xd6 ))// c4a57c5e-32b0-55b3-ad13-ce1c23041ed6
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.IRandomAccessStreamWithContentType>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            let resultWrapper = __ABI_Windows_Storage_Streams.IRandomAccessStreamWithContentTypeWrapper(result)
            resultWrapper?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeBridge>
public class IAsyncOperationIRandomAccessStreamWithContentType: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.AnyIRandomAccessStreamWithContentType?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.AnyIRandomAccessStreamWithContentType?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.AnyIRandomAccessStreamWithContentType? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __ABI_Windows_Storage_Streams.IRandomAccessStreamWithContentTypeWrapper.unwrapFrom(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType
    internal typealias SwiftABI = IAsyncOperationIRandomAccessStreamWithContentType
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.AnyIRandomAccessStreamWithContentType?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.AnyIRandomAccessStreamWithContentType?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.AnyIRandomAccessStreamWithContentType? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.AnyIRandomAccessStreamWithContentType?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference: WindowsFoundation.IID {
    .init(Data1: 0xd90442ca, Data2: 0x543c, Data3: 0x504b, Data4: ( 0x9e,0xb9,0x29,0x4b,0xca,0xd8,0xa2,0x83 ))// d90442ca-543c-504b-9eb9-294bcad8a283
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.Storage.Streams.RandomAccessStreamReference>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            result?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge>
public class IAsyncOperationRandomAccessStreamReference: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.RandomAccessStreamReference?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.RandomAccessStreamReference?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.RandomAccessStreamReference? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_Storage_Streams.RandomAccessStreamReferenceBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReference
    internal typealias SwiftABI = IAsyncOperationRandomAccessStreamReference
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.RandomAccessStreamReference?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.RandomAccessStreamReference?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CRandomAccessStreamReferenceBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.RandomAccessStreamReference? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.RandomAccessStreamReference?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus: WindowsFoundation.IID {
    .init(Data1: 0xe7539992, Data2: 0x2220, Data3: 0x5d2d, Data4: ( 0x82,0xc4,0x3d,0x44,0xf8,0x75,0x0d,0x91 ))// e7539992-2220-5d2d-82c4-3d44f8750d91
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.System.LaunchQuerySupportStatus>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            $1?.initialize(to: result)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusBridge>
public class IAsyncOperationLaunchQuerySupportStatus: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.LaunchQuerySupportStatus>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.LaunchQuerySupportStatus>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.LaunchQuerySupportStatus {
        var result: __x_ABI_CWindows_CSystem_CLaunchQuerySupportStatus = .init(0)
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &result))
        }
        return result
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatus
    internal typealias SwiftABI = IAsyncOperationLaunchQuerySupportStatus
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.LaunchQuerySupportStatus>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.LaunchQuerySupportStatus
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchQuerySupportStatusBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.LaunchQuerySupportStatus {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.LaunchQuerySupportStatus>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResult: WindowsFoundation.IID {
    .init(Data1: 0x7f97fc15, Data2: 0x1cd6, Data3: 0x54b7, Data4: ( 0xa2,0x90,0xac,0xb6,0x0d,0xba,0x81,0xa1 ))// 7f97fc15-1cd6-54b7-a290-acb60dba81a1
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResultVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResultVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResultWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResultWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResultWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResultWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.System.LaunchUriResult>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResultWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResultWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResultWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResultWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResultWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            result?.copyTo($1)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResultWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResultBridge>
public class IAsyncOperationLaunchUriResult: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResult }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.LaunchUriResult?>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResultWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResult.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.LaunchUriResult?>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResult.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriResultWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.LaunchUriResult? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResult.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &resultAbi))
            }
        }
        return __IMPL_Windows_System.LaunchUriResultBridge.from(abi: result)
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResultBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResult
    internal typealias SwiftABI = IAsyncOperationLaunchUriResult
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.LaunchUriResult?>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResultImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResultVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResultImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.LaunchUriResult?
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriResultBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.LaunchUriResult? {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.LaunchUriResult?>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatus: WindowsFoundation.IID {
    .init(Data1: 0xab3d721b, Data2: 0xa4f3, Data3: 0x5861, Data4: ( 0xb0,0x34,0x03,0x0b,0x15,0x23,0x3c,0x52 ))// ab3d721b-a4f3-5861-b034-030b15233c52
}

internal var __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatusVTable: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatusVtbl = .init(
    QueryInterface: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatusWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatusWrapper.addRef($0) },
    Release: { __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatusWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatusWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IAsyncInfoWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IAsyncOperation`1<Windows.System.LaunchUriStatus>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    put_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatusWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        guard let handler = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatusWrapper.unwrapFrom(abi: ComPtr($1)) else { return E_INVALIDARG }
        __unwrapped__instance.completed = handler
        return S_OK
    },

    get_Completed: {
        guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatusWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance.completed
        let resultWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatusWrapper(result)
        resultWrapper?.copyTo($1)
        return S_OK
    },

    GetResults: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatusWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let result = try __unwrapped__instance.getResults()
            $1?.initialize(to: result)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatusWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatusBridge>
public class IAsyncOperationLaunchUriStatus: WindowsFoundation.IInspectable {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatus }

    open func put_Completed(_ handler: AsyncOperationCompletedHandler<UWP.LaunchUriStatus>?) throws {
        let handlerWrapper = UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatusWrapper(handler)
        let _handler = try! handlerWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatus.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.put_Completed(pThis, _handler))
        }
    }

    open func get_Completed() throws -> AsyncOperationCompletedHandler<UWP.LaunchUriStatus>? {
        let (result) = try ComPtrs.initialize { resultAbi in
            _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatus.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Completed(pThis, &resultAbi))
            }
        }
        return UWP.__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CSystem__CLaunchUriStatusWrapper.unwrapFrom(abi: result)
    }

    open func GetResults() throws -> UWP.LaunchUriStatus {
        var result: __x_ABI_CWindows_CSystem_CLaunchUriStatus = .init(0)
        _ = try perform(as: __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatus.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.GetResults(pThis, &result))
        }
        return result
    }

}

internal enum __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatusBridge : AbiInterfaceBridge {
    internal typealias CABI = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatus
    internal typealias SwiftABI = IAsyncOperationLaunchUriStatus
    internal typealias SwiftProjection = WindowsFoundation.AnyIAsyncOperation<UWP.LaunchUriStatus>
    internal static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let abi = abi else { return nil }
        return __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatusImpl(abi)
    }

    internal static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatusVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}

fileprivate class __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatusImpl : IAsyncOperation, AbiInterfaceImpl {
    typealias TResult = UWP.LaunchUriStatus
    typealias Bridge = __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CSystem__CLaunchUriStatusBridge
    let _default: Bridge.SwiftABI
    init(_ fromAbi: ComPtr<Bridge.CABI>) {
        _default = Bridge.SwiftABI(fromAbi)
    }

    // MARK: WinRT
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.getresults)
    fileprivate func getResults() throws -> UWP.LaunchUriStatus {
        try _default.GetResults()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.completed)
    fileprivate var completed : AsyncOperationCompletedHandler<UWP.LaunchUriStatus>? {
        get { try! _default.get_Completed() }
        set { try! _default.put_Completed(newValue) }
    }

    private lazy var _IAsyncInfo: __ABI_Windows_Foundation.IAsyncInfo! = getInterfaceForCaching()
    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.cancel)
    fileprivate func cancel() throws {
        try _IAsyncInfo.Cancel()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.close)
    fileprivate func close() throws {
        try _IAsyncInfo.Close()
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.errorcode)
    fileprivate var errorCode : HRESULT {
        get { try! _IAsyncInfo.get_ErrorCode() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.id)
    fileprivate var id : UInt32 {
        get { try! _IAsyncInfo.get_Id() }
    }

    /// [Open Microsoft documentation](https://learn.microsoft.com/uwp/api/windows.foundation.iasyncoperation-1.status)
    fileprivate var status : WindowsFoundation.AsyncStatus {
        get { try! _IAsyncInfo.get_Status() }
    }

    public func queryInterface(_ iid: WindowsFoundation.IID) -> IUnknownRef? { nil }
}

private var IID___x_ABI_C__FIReference_1_double: WindowsFoundation.IID {
    .init(Data1: 0x2f2d6c29, Data2: 0x5473, Data3: 0x5f3e, Data4: ( 0x92,0xe7,0x96,0x57,0x2b,0xb9,0x90,0xe2 ))// 2f2d6c29-5473-5f3e-92e7-96572bb990e2
}

internal enum __x_ABI_C__FIReference_1_doubleBridge: ReferenceBridge {
    typealias CABI = __x_ABI_C__FIReference_1_double
    typealias SwiftProjection = Double
    static var IID: WindowsFoundation.IID { IID___x_ABI_C__FIReference_1_double }

    static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let val = abi else { return nil }
        var result: DOUBLE = 0.0
        try! CHECKED(val.get().pointee.lpVtbl.pointee.get_Value(val.get(), &result))
        return result
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIReference_1_doubleVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
internal var __x_ABI_C__FIReference_1_doubleVTable: __x_ABI_C__FIReference_1_doubleVtbl = .init(
    QueryInterface: { __x_ABI_C__FIReference_1_doubleWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIReference_1_doubleWrapper.addRef($0) },
    Release: { __x_ABI_C__FIReference_1_doubleWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIReference_1_doubleWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IPropertyValueWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IReference`1<Double>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIReference_1_doubleWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance
        $1?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIReference_1_doubleWrapper = ReferenceWrapperBase<UWP.__x_ABI_C__FIReference_1_doubleBridge>
private var IID___x_ABI_C__FIReference_1_float: WindowsFoundation.IID {
    .init(Data1: 0x719cc2ba, Data2: 0x3e76, Data3: 0x5def, Data4: ( 0x9f,0x1a,0x38,0xd8,0x5a,0x14,0x5e,0xa8 ))// 719cc2ba-3e76-5def-9f1a-38d85a145ea8
}

internal enum __x_ABI_C__FIReference_1_floatBridge: ReferenceBridge {
    typealias CABI = __x_ABI_C__FIReference_1_float
    typealias SwiftProjection = Float
    static var IID: WindowsFoundation.IID { IID___x_ABI_C__FIReference_1_float }

    static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let val = abi else { return nil }
        var result: FLOAT = 0.0
        try! CHECKED(val.get().pointee.lpVtbl.pointee.get_Value(val.get(), &result))
        return result
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIReference_1_floatVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
internal var __x_ABI_C__FIReference_1_floatVTable: __x_ABI_C__FIReference_1_floatVtbl = .init(
    QueryInterface: { __x_ABI_C__FIReference_1_floatWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIReference_1_floatWrapper.addRef($0) },
    Release: { __x_ABI_C__FIReference_1_floatWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIReference_1_floatWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IPropertyValueWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IReference`1<Float>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIReference_1_floatWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance
        $1?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIReference_1_floatWrapper = ReferenceWrapperBase<UWP.__x_ABI_C__FIReference_1_floatBridge>
private var IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2: WindowsFoundation.IID {
    .init(Data1: 0x48f6a69e, Data2: 0x8465, Data3: 0x57ae, Data4: ( 0x94,0x00,0x97,0x64,0x08,0x7f,0x65,0xad ))// 48f6a69e-8465-57ae-9400-9764087f65ad
}

internal enum __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2Bridge: ReferenceBridge {
    typealias CABI = __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2
    typealias SwiftProjection = WindowsFoundation.Vector2
    static var IID: WindowsFoundation.IID { IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2 }

    static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let val = abi else { return nil }
        var result: __x_ABI_CWindows_CFoundation_CNumerics_CVector2 = .init()
        try! CHECKED(val.get().pointee.lpVtbl.pointee.get_Value(val.get(), &result))
        return .from(abi: result)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2VTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
internal var __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2VTable: __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2Vtbl = .init(
    QueryInterface: { __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2Wrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2Wrapper.addRef($0) },
    Release: { __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2Wrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2Wrapper.IID
        iids[3] = __ABI_Windows_Foundation.IPropertyValueWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IReference`1<Windows.Foundation.Numerics.Vector2>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance
        $1?.initialize(to: .from(swift: result))
        return S_OK
    }
)
typealias __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2Wrapper = ReferenceWrapperBase<UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector2Bridge>
private var IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector3: WindowsFoundation.IID {
    .init(Data1: 0x1ee770ff, Data2: 0xc954, Data3: 0x59ca, Data4: ( 0xa7,0x54,0x61,0x99,0xa9,0xbe,0x28,0x2c ))// 1ee770ff-c954-59ca-a754-6199a9be282c
}

internal enum __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector3Bridge: ReferenceBridge {
    typealias CABI = __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector3
    typealias SwiftProjection = WindowsFoundation.Vector3
    static var IID: WindowsFoundation.IID { IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector3 }

    static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let val = abi else { return nil }
        var result: __x_ABI_CWindows_CFoundation_CNumerics_CVector3 = .init()
        try! CHECKED(val.get().pointee.lpVtbl.pointee.get_Value(val.get(), &result))
        return .from(abi: result)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector3VTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
internal var __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector3VTable: __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector3Vtbl = .init(
    QueryInterface: { __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector3Wrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector3Wrapper.addRef($0) },
    Release: { __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector3Wrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector3Wrapper.IID
        iids[3] = __ABI_Windows_Foundation.IPropertyValueWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IReference`1<Windows.Foundation.Numerics.Vector3>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector3Wrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance
        $1?.initialize(to: .from(swift: result))
        return S_OK
    }
)
typealias __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector3Wrapper = ReferenceWrapperBase<UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CNumerics__CVector3Bridge>
private var IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPoint: WindowsFoundation.IID {
    .init(Data1: 0x84f14c22, Data2: 0xa00a, Data3: 0x5272, Data4: ( 0x8d,0x3d,0x82,0x11,0x2e,0x66,0xdf,0x00 ))// 84f14c22-a00a-5272-8d3d-82112e66df00
}

internal enum __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPointBridge: ReferenceBridge {
    typealias CABI = __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPoint
    typealias SwiftProjection = WindowsFoundation.Point
    static var IID: WindowsFoundation.IID { IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPoint }

    static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let val = abi else { return nil }
        var result: __x_ABI_CWindows_CFoundation_CPoint = .init()
        try! CHECKED(val.get().pointee.lpVtbl.pointee.get_Value(val.get(), &result))
        return .from(abi: result)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPointVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
internal var __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPointVTable: __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPointVtbl = .init(
    QueryInterface: { __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPointWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPointWrapper.addRef($0) },
    Release: { __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPointWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPointWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IPropertyValueWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IReference`1<Windows.Foundation.Point>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPointWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance
        $1?.initialize(to: .from(swift: result))
        return S_OK
    }
)
typealias __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPointWrapper = ReferenceWrapperBase<UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CPointBridge>
private var IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect: WindowsFoundation.IID {
    .init(Data1: 0x80423f11, Data2: 0x054f, Data3: 0x5eac, Data4: ( 0xaf,0xd3,0x63,0xb6,0xce,0x15,0xe7,0x7b ))// 80423f11-054f-5eac-afd3-63b6ce15e77b
}

internal enum __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectBridge: ReferenceBridge {
    typealias CABI = __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect
    typealias SwiftProjection = WindowsFoundation.Rect
    static var IID: WindowsFoundation.IID { IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRect }

    static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let val = abi else { return nil }
        var result: __x_ABI_CWindows_CFoundation_CRect = .init()
        try! CHECKED(val.get().pointee.lpVtbl.pointee.get_Value(val.get(), &result))
        return .from(abi: result)
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
internal var __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectVTable: __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectVtbl = .init(
    QueryInterface: { __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectWrapper.addRef($0) },
    Release: { __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IPropertyValueWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IReference`1<Windows.Foundation.Rect>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance
        $1?.initialize(to: .from(swift: result))
        return S_OK
    }
)
typealias __x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectWrapper = ReferenceWrapperBase<UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CFoundation__CRectBridge>
private var IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CText__CUnderlineType: WindowsFoundation.IID {
    .init(Data1: 0x1b63ec17, Data2: 0x7b2b, Data3: 0x59fe, Data4: ( 0xab,0x9d,0xb6,0x0e,0xa4,0xf9,0xc9,0xb8 ))// 1b63ec17-7b2b-59fe-ab9d-b60ea4f9c9b8
}

internal enum __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CText__CUnderlineTypeBridge: ReferenceBridge {
    typealias CABI = __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CText__CUnderlineType
    typealias SwiftProjection = UWP.UnderlineType
    static var IID: WindowsFoundation.IID { IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CText__CUnderlineType }

    static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let val = abi else { return nil }
        var result: __x_ABI_CWindows_CUI_CText_CUnderlineType = .init(0)
        try! CHECKED(val.get().pointee.lpVtbl.pointee.get_Value(val.get(), &result))
        return result
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CText__CUnderlineTypeVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
internal var __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CText__CUnderlineTypeVTable: __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CText__CUnderlineTypeVtbl = .init(
    QueryInterface: { __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CText__CUnderlineTypeWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CText__CUnderlineTypeWrapper.addRef($0) },
    Release: { __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CText__CUnderlineTypeWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CText__CUnderlineTypeWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IPropertyValueWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IReference`1<Windows.UI.Text.UnderlineType>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CText__CUnderlineTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance
        $1?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CText__CUnderlineTypeWrapper = ReferenceWrapperBase<UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CText__CUnderlineTypeBridge>
private var IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CViewManagement__CUIElementType: WindowsFoundation.IID {
    .init(Data1: 0xe17e08c9, Data2: 0x7deb, Data3: 0x51d1, Data4: ( 0x84,0x87,0x33,0x4e,0xb3,0xfe,0x46,0x91 ))// e17e08c9-7deb-51d1-8487-334eb3fe4691
}

internal enum __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CViewManagement__CUIElementTypeBridge: ReferenceBridge {
    typealias CABI = __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CViewManagement__CUIElementType
    typealias SwiftProjection = UWP.UIElementType
    static var IID: WindowsFoundation.IID { IID___x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CViewManagement__CUIElementType }

    static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
        guard let val = abi else { return nil }
        var result: __x_ABI_CWindows_CUI_CViewManagement_CUIElementType = .init(0)
        try! CHECKED(val.get().pointee.lpVtbl.pointee.get_Value(val.get(), &result))
        return result
    }

    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CViewManagement__CUIElementTypeVTable) { $0 }
        return .init(lpVtbl: vtblPtr)
    }
}
internal var __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CViewManagement__CUIElementTypeVTable: __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CViewManagement__CUIElementTypeVtbl = .init(
    QueryInterface: { __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CViewManagement__CUIElementTypeWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CViewManagement__CUIElementTypeWrapper.addRef($0) },
    Release: { __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CViewManagement__CUIElementTypeWrapper.release($0) },
    GetIids: {
        let size = MemoryLayout<WindowsFoundation.IID>.size
        let iids = CoTaskMemAlloc(UInt64(size) * 4).assumingMemoryBound(to: WindowsFoundation.IID.self)
        iids[0] = IUnknown.IID
        iids[1] = IInspectable.IID
        iids[2] = UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CViewManagement__CUIElementTypeWrapper.IID
        iids[3] = __ABI_Windows_Foundation.IPropertyValueWrapper.IID
        $1!.pointee = 4
        $2!.pointee = iids
        return S_OK
    },

    GetRuntimeClassName: {
        _ = $0
        let hstring = try! HString("Windows.Foundation.IReference`1<Windows.UI.ViewManagement.UIElementType>").detach()
        $1!.pointee = hstring
        return S_OK
    },

    GetTrustLevel: {
        _ = $0
        $1!.pointee = TrustLevel(rawValue: 0)
        return S_OK
    },

    get_Value: {
        guard let __unwrapped__instance = __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CViewManagement__CUIElementTypeWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
        let result = __unwrapped__instance
        $1?.initialize(to: result)
        return S_OK
    }
)
typealias __x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CViewManagement__CUIElementTypeWrapper = ReferenceWrapperBase<UWP.__x_ABI_C__FIReference_1___x_ABI_CWindows__CUI__CViewManagement__CUIElementTypeBridge>
private var IID___x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CComposition__CCompositionBatchCompletedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x9df03456, Data2: 0x3383, Data3: 0x508b, Data4: ( 0x9c,0x75,0xee,0x84,0x0a,0x7e,0x1a,0x39 ))// 9df03456-3383-508b-9c75-ee840a7e1a39
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CComposition__CCompositionBatchCompletedEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CComposition__CCompositionBatchCompletedEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CComposition__CCompositionBatchCompletedEventArgsVTable: __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CComposition__CCompositionBatchCompletedEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CComposition__CCompositionBatchCompletedEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CComposition__CCompositionBatchCompletedEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CComposition__CCompositionBatchCompletedEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CComposition__CCompositionBatchCompletedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($1))
            let args: UWP.CompositionBatchCompletedEventArgs? = __IMPL_Windows_UI_Composition.CompositionBatchCompletedEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CComposition__CCompositionBatchCompletedEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CComposition__CCompositionBatchCompletedEventArgsBridge>
public class TypedEventHandlerAny_CompositionBatchCompletedEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CComposition__CCompositionBatchCompletedEventArgs }

    open func Invoke(_ sender: Any?, _ args: UWP.CompositionBatchCompletedEventArgs?) throws {
        let senderWrapper = __ABI_.AnyWrapper(sender)
        let _sender = try! senderWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CComposition__CCompositionBatchCompletedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CComposition__CCompositionBatchCompletedEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<Any?, UWP.CompositionBatchCompletedEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2_IInspectable___x_ABI_CWindows__CUI__CComposition__CCompositionBatchCompletedEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerAny_CompositionBatchCompletedEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CActivation__CSplashScreen_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0x7725b2a5, Data2: 0x287d, Data3: 0x5ed2, Data4: ( 0xa7,0x89,0x2a,0x6a,0x26,0x73,0xc7,0xfe ))// 7725b2a5-287d-5ed2-a789-2a6a2673c7fe
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CActivation__CSplashScreen_IInspectable {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CActivation__CSplashScreen_IInspectableVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CActivation__CSplashScreen_IInspectableVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CActivation__CSplashScreen_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CActivation__CSplashScreen_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CActivation__CSplashScreen_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CActivation__CSplashScreen_IInspectableWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CActivation__CSplashScreen_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.SplashScreen? = __IMPL_Windows_ApplicationModel_Activation.SplashScreenBridge.from(abi: ComPtr($1))
            let args: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CActivation__CSplashScreen_IInspectableWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CActivation__CSplashScreen_IInspectableBridge>
public class TypedEventHandlerSplashScreen_Any: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CActivation__CSplashScreen_IInspectable }

    open func Invoke(_ sender: UWP.SplashScreen?, _ args: Any?) throws {
        let argsWrapper = __ABI_.AnyWrapper(args)
        let _args = try! argsWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CActivation__CSplashScreen_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), _args))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CActivation__CSplashScreen_IInspectableBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.SplashScreen?, Any?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CActivation__CSplashScreen_IInspectable
    internal typealias SwiftABI = UWP.TypedEventHandlerSplashScreen_Any

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xd4f89768, Data2: 0x688f, Data3: 0x59ec, Data4: ( 0xbf,0x24,0xc2,0xaf,0x6a,0x31,0x0f,0xa4 ))// d4f89768-688f-59ec-bf24-c2af6a310fa4
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.BackgroundTaskRegistrationGroup? = __IMPL_Windows_ApplicationModel_Background.BackgroundTaskRegistrationGroupBridge.from(abi: ComPtr($1))
            let args: UWP.BackgroundActivatedEventArgs? = __IMPL_Windows_ApplicationModel_Activation.BackgroundActivatedEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgsBridge>
public class TypedEventHandlerBackgroundTaskRegistrationGroup_BackgroundActivatedEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgs }

    open func Invoke(_ sender: UWP.BackgroundTaskRegistrationGroup?, _ args: UWP.BackgroundActivatedEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.BackgroundTaskRegistrationGroup?, UWP.BackgroundActivatedEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CBackground__CBackgroundTaskRegistrationGroup___x_ABI_CWindows__CApplicationModel__CActivation__CBackgroundActivatedEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerBackgroundTaskRegistrationGroup_BackgroundActivatedEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CActivation__CIActivatedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xcf193a96, Data2: 0xeb13, Data3: 0x5e3b, Data4: ( 0x8b,0xdf,0x87,0xb6,0xef,0xae,0x83,0x39 ))// cf193a96-eb13-5e3b-8bdf-87b6efae8339
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CActivation__CIActivatedEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CActivation__CIActivatedEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CActivation__CIActivatedEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CActivation__CIActivatedEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CActivation__CIActivatedEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CActivation__CIActivatedEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CActivation__CIActivatedEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CActivation__CIActivatedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CoreApplicationView? = __IMPL_Windows_ApplicationModel_Core.CoreApplicationViewBridge.from(abi: ComPtr($1))
            let args: UWP.AnyIActivatedEventArgs? = __ABI_Windows_ApplicationModel_Activation.IActivatedEventArgsWrapper.unwrapFrom(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CActivation__CIActivatedEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CActivation__CIActivatedEventArgsBridge>
public class TypedEventHandlerCoreApplicationView_IActivatedEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CActivation__CIActivatedEventArgs }

    open func Invoke(_ sender: UWP.CoreApplicationView?, _ args: UWP.AnyIActivatedEventArgs?) throws {
        let argsWrapper = __ABI_Windows_ApplicationModel_Activation.IActivatedEventArgsWrapper(args)
        let _args = try! argsWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CActivation__CIActivatedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), _args))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CActivation__CIActivatedEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CoreApplicationView?, UWP.AnyIActivatedEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CActivation__CIActivatedEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerCoreApplicationView_IActivatedEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CCore__CHostedViewClosingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xd9a3f433, Data2: 0x9bcc, Data3: 0x54d6, Data4: ( 0xb3,0xcf,0x7b,0x01,0xf0,0x26,0xd4,0xcd ))// d9a3f433-9bcc-54d6-b3cf-7b01f026d4cd
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CCore__CHostedViewClosingEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CCore__CHostedViewClosingEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CCore__CHostedViewClosingEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CCore__CHostedViewClosingEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CCore__CHostedViewClosingEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CCore__CHostedViewClosingEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CCore__CHostedViewClosingEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CCore__CHostedViewClosingEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CoreApplicationView? = __IMPL_Windows_ApplicationModel_Core.CoreApplicationViewBridge.from(abi: ComPtr($1))
            let args: UWP.HostedViewClosingEventArgs? = __IMPL_Windows_ApplicationModel_Core.HostedViewClosingEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CCore__CHostedViewClosingEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CCore__CHostedViewClosingEventArgsBridge>
public class TypedEventHandlerCoreApplicationView_HostedViewClosingEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CCore__CHostedViewClosingEventArgs }

    open func Invoke(_ sender: UWP.CoreApplicationView?, _ args: UWP.HostedViewClosingEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CCore__CHostedViewClosingEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CCore__CHostedViewClosingEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CoreApplicationView?, UWP.HostedViewClosingEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationView___x_ABI_CWindows__CApplicationModel__CCore__CHostedViewClosingEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerCoreApplicationView_HostedViewClosingEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewTitleBar_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0x28342e21, Data2: 0xdad3, Data3: 0x5e32, Data4: ( 0xba,0xe1,0xaf,0xe7,0xb2,0x6c,0x66,0xfb ))// 28342e21-dad3-5e32-bae1-afe7b26c66fb
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewTitleBar_IInspectable {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewTitleBar_IInspectableVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewTitleBar_IInspectableVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewTitleBar_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewTitleBar_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewTitleBar_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewTitleBar_IInspectableWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewTitleBar_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CoreApplicationViewTitleBar? = __IMPL_Windows_ApplicationModel_Core.CoreApplicationViewTitleBarBridge.from(abi: ComPtr($1))
            let args: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewTitleBar_IInspectableWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewTitleBar_IInspectableBridge>
public class TypedEventHandlerCoreApplicationViewTitleBar_Any: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewTitleBar_IInspectable }

    open func Invoke(_ sender: UWP.CoreApplicationViewTitleBar?, _ args: Any?) throws {
        let argsWrapper = __ABI_.AnyWrapper(args)
        let _args = try! argsWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewTitleBar_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), _args))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewTitleBar_IInspectableBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CoreApplicationViewTitleBar?, Any?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CCore__CCoreApplicationViewTitleBar_IInspectable
    internal typealias SwiftABI = UWP.TypedEventHandlerCoreApplicationViewTitleBar_Any

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0xc156b0c3, Data2: 0x1cbc, Data3: 0x5ca4, Data4: ( 0x90,0x1c,0x62,0xc5,0xa8,0xca,0x5c,0xb5 ))// c156b0c3-1cbc-5ca4-901c-62c5a8ca5cb5
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage_IInspectable {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage_IInspectableVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage_IInspectableVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage_IInspectableWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.DataPackage? = __IMPL_Windows_ApplicationModel_DataTransfer.DataPackageBridge.from(abi: ComPtr($1))
            let args: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage_IInspectableWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage_IInspectableBridge>
public class TypedEventHandlerDataPackage_Any: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage_IInspectable }

    open func Invoke(_ sender: UWP.DataPackage?, _ args: Any?) throws {
        let argsWrapper = __ABI_.AnyWrapper(args)
        let _args = try! argsWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), _args))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage_IInspectableBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.DataPackage?, Any?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage_IInspectable
    internal typealias SwiftABI = UWP.TypedEventHandlerDataPackage_Any

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__COperationCompletedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xdd48af6c, Data2: 0xef9a, Data3: 0x59cb, Data4: ( 0xb3,0x26,0x57,0xd9,0xe2,0x41,0x1f,0x21 ))// dd48af6c-ef9a-59cb-b326-57d9e2411f21
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__COperationCompletedEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__COperationCompletedEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__COperationCompletedEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__COperationCompletedEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__COperationCompletedEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__COperationCompletedEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__COperationCompletedEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__COperationCompletedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.DataPackage? = __IMPL_Windows_ApplicationModel_DataTransfer.DataPackageBridge.from(abi: ComPtr($1))
            let args: UWP.OperationCompletedEventArgs? = __IMPL_Windows_ApplicationModel_DataTransfer.OperationCompletedEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__COperationCompletedEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__COperationCompletedEventArgsBridge>
public class TypedEventHandlerDataPackage_OperationCompletedEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__COperationCompletedEventArgs }

    open func Invoke(_ sender: UWP.DataPackage?, _ args: UWP.OperationCompletedEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__COperationCompletedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__COperationCompletedEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.DataPackage?, UWP.OperationCompletedEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__COperationCompletedEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerDataPackage_OperationCompletedEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareCompletedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xf8f7e24a, Data2: 0x56fe, Data3: 0x58df, Data4: ( 0xbc,0x15,0x23,0x65,0xae,0xc0,0x39,0x66 ))// f8f7e24a-56fe-58df-bc15-2365aec03966
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareCompletedEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareCompletedEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareCompletedEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareCompletedEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareCompletedEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareCompletedEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareCompletedEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareCompletedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.DataPackage? = __IMPL_Windows_ApplicationModel_DataTransfer.DataPackageBridge.from(abi: ComPtr($1))
            let args: UWP.ShareCompletedEventArgs? = __IMPL_Windows_ApplicationModel_DataTransfer.ShareCompletedEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareCompletedEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareCompletedEventArgsBridge>
public class TypedEventHandlerDataPackage_ShareCompletedEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareCompletedEventArgs }

    open func Invoke(_ sender: UWP.DataPackage?, _ args: UWP.ShareCompletedEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareCompletedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareCompletedEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.DataPackage?, UWP.ShareCompletedEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataPackage___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareCompletedEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerDataPackage_ShareCompletedEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xec6f9cc8, Data2: 0x46d0, Data3: 0x5e0e, Data4: ( 0xb4,0xd2,0x7d,0x77,0x73,0xae,0x37,0xa0 ))// ec6f9cc8-46d0-5e0e-b4d2-7d7773ae37a0
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataRequestedEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataRequestedEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataRequestedEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataRequestedEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataRequestedEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataRequestedEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataRequestedEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataRequestedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.DataTransferManager? = __IMPL_Windows_ApplicationModel_DataTransfer.DataTransferManagerBridge.from(abi: ComPtr($1))
            let args: UWP.DataRequestedEventArgs? = __IMPL_Windows_ApplicationModel_DataTransfer.DataRequestedEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataRequestedEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataRequestedEventArgsBridge>
public class TypedEventHandlerDataTransferManager_DataRequestedEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataRequestedEventArgs }

    open func Invoke(_ sender: UWP.DataTransferManager?, _ args: UWP.DataRequestedEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataRequestedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataRequestedEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.DataTransferManager?, UWP.DataRequestedEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataRequestedEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerDataTransferManager_DataRequestedEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvidersRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x147e2860, Data2: 0x7397, Data3: 0x582f, Data4: ( 0x80,0xdb,0xb8,0x68,0x53,0x83,0xa9,0x37 ))// 147e2860-7397-582f-80db-b8685383a937
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvidersRequestedEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvidersRequestedEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvidersRequestedEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvidersRequestedEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvidersRequestedEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvidersRequestedEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvidersRequestedEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvidersRequestedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.DataTransferManager? = __IMPL_Windows_ApplicationModel_DataTransfer.DataTransferManagerBridge.from(abi: ComPtr($1))
            let args: UWP.ShareProvidersRequestedEventArgs? = __IMPL_Windows_ApplicationModel_DataTransfer.ShareProvidersRequestedEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvidersRequestedEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvidersRequestedEventArgsBridge>
public class TypedEventHandlerDataTransferManager_ShareProvidersRequestedEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvidersRequestedEventArgs }

    open func Invoke(_ sender: UWP.DataTransferManager?, _ args: UWP.ShareProvidersRequestedEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvidersRequestedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvidersRequestedEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.DataTransferManager?, UWP.ShareProvidersRequestedEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CShareProvidersRequestedEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerDataTransferManager_ShareProvidersRequestedEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CTargetApplicationChosenEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xc4ac1ba2, Data2: 0x7851, Data3: 0x5a44, Data4: ( 0xbc,0x8d,0x3d,0x7c,0x71,0x3f,0x1f,0x41 ))// c4ac1ba2-7851-5a44-bc8d-3d7c713f1f41
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CTargetApplicationChosenEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CTargetApplicationChosenEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CTargetApplicationChosenEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CTargetApplicationChosenEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CTargetApplicationChosenEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CTargetApplicationChosenEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CTargetApplicationChosenEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CTargetApplicationChosenEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.DataTransferManager? = __IMPL_Windows_ApplicationModel_DataTransfer.DataTransferManagerBridge.from(abi: ComPtr($1))
            let args: UWP.TargetApplicationChosenEventArgs? = __IMPL_Windows_ApplicationModel_DataTransfer.TargetApplicationChosenEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CTargetApplicationChosenEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CTargetApplicationChosenEventArgsBridge>
public class TypedEventHandlerDataTransferManager_TargetApplicationChosenEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CTargetApplicationChosenEventArgs }

    open func Invoke(_ sender: UWP.DataTransferManager?, _ args: UWP.TargetApplicationChosenEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CTargetApplicationChosenEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CTargetApplicationChosenEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.DataTransferManager?, UWP.TargetApplicationChosenEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CApplicationModel__CDataTransfer__CDataTransferManager___x_ABI_CWindows__CApplicationModel__CDataTransfer__CTargetApplicationChosenEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerDataTransferManager_TargetApplicationChosenEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CInput__CMouseDevice___x_ABI_CWindows__CDevices__CInput__CMouseEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x5d72e594, Data2: 0x28e4, Data3: 0x5895, Data4: ( 0xa3,0x4b,0xea,0x91,0x0f,0x70,0xfd,0xbb ))// 5d72e594-28e4-5895-a34b-ea910f70fdbb
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CInput__CMouseDevice___x_ABI_CWindows__CDevices__CInput__CMouseEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CInput__CMouseDevice___x_ABI_CWindows__CDevices__CInput__CMouseEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CInput__CMouseDevice___x_ABI_CWindows__CDevices__CInput__CMouseEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CInput__CMouseDevice___x_ABI_CWindows__CDevices__CInput__CMouseEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CInput__CMouseDevice___x_ABI_CWindows__CDevices__CInput__CMouseEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CInput__CMouseDevice___x_ABI_CWindows__CDevices__CInput__CMouseEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CInput__CMouseDevice___x_ABI_CWindows__CDevices__CInput__CMouseEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CInput__CMouseDevice___x_ABI_CWindows__CDevices__CInput__CMouseEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.MouseDevice? = __IMPL_Windows_Devices_Input.MouseDeviceBridge.from(abi: ComPtr($1))
            let args: UWP.MouseEventArgs? = __IMPL_Windows_Devices_Input.MouseEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CInput__CMouseDevice___x_ABI_CWindows__CDevices__CInput__CMouseEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CInput__CMouseDevice___x_ABI_CWindows__CDevices__CInput__CMouseEventArgsBridge>
public class TypedEventHandlerMouseDevice_MouseEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CInput__CMouseDevice___x_ABI_CWindows__CDevices__CInput__CMouseEventArgs }

    open func Invoke(_ sender: UWP.MouseDevice?, _ args: UWP.MouseEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CInput__CMouseDevice___x_ABI_CWindows__CDevices__CInput__CMouseEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CInput__CMouseDevice___x_ABI_CWindows__CDevices__CInput__CMouseEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.MouseDevice?, UWP.MouseEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CDevices__CInput__CMouseDevice___x_ABI_CWindows__CDevices__CInput__CMouseEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerMouseDevice_MouseEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CApplicationData_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0xb5348b3b, Data2: 0x5081, Data3: 0x5ae9, Data4: ( 0x8f,0xa3,0x4d,0x22,0xd6,0x8f,0xb0,0xea ))// b5348b3b-5081-5ae9-8fa3-4d22d68fb0ea
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CApplicationData_IInspectable {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CApplicationData_IInspectableVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CApplicationData_IInspectableVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CApplicationData_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CApplicationData_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CApplicationData_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CApplicationData_IInspectableWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CApplicationData_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.ApplicationData? = __IMPL_Windows_Storage.ApplicationDataBridge.from(abi: ComPtr($1))
            let args: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CApplicationData_IInspectableWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CApplicationData_IInspectableBridge>
public class TypedEventHandlerApplicationData_Any: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CApplicationData_IInspectable }

    open func Invoke(_ sender: UWP.ApplicationData?, _ args: Any?) throws {
        let argsWrapper = __ABI_.AnyWrapper(args)
        let _args = try! argsWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CApplicationData_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), _args))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CApplicationData_IInspectableBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.ApplicationData?, Any?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CApplicationData_IInspectable
    internal typealias SwiftABI = UWP.TypedEventHandlerApplicationData_Any

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CSearch__CIStorageQueryResultBase_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0x4ba22861, Data2: 0x00c4, Data3: 0x597f, Data4: ( 0xb6,0xbf,0x3a,0xf5,0x16,0xf3,0xb8,0x70 ))// 4ba22861-00c4-597f-b6bf-3af516f3b870
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CSearch__CIStorageQueryResultBase_IInspectable {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CSearch__CIStorageQueryResultBase_IInspectableVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CSearch__CIStorageQueryResultBase_IInspectableVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CSearch__CIStorageQueryResultBase_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CSearch__CIStorageQueryResultBase_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CSearch__CIStorageQueryResultBase_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CSearch__CIStorageQueryResultBase_IInspectableWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CSearch__CIStorageQueryResultBase_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.AnyIStorageQueryResultBase? = __ABI_Windows_Storage_Search.IStorageQueryResultBaseWrapper.unwrapFrom(abi: ComPtr($1))
            let args: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CSearch__CIStorageQueryResultBase_IInspectableWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CSearch__CIStorageQueryResultBase_IInspectableBridge>
public class TypedEventHandlerIStorageQueryResultBase_Any: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CSearch__CIStorageQueryResultBase_IInspectable }

    open func Invoke(_ sender: UWP.AnyIStorageQueryResultBase?, _ args: Any?) throws {
        let senderWrapper = __ABI_Windows_Storage_Search.IStorageQueryResultBaseWrapper(sender)
        let _sender = try! senderWrapper?.toABI { $0 }
        let argsWrapper = __ABI_.AnyWrapper(args)
        let _args = try! argsWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CSearch__CIStorageQueryResultBase_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, _args))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CSearch__CIStorageQueryResultBase_IInspectableBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.AnyIStorageQueryResultBase?, Any?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CStorage__CSearch__CIStorageQueryResultBase_IInspectable
    internal typealias SwiftABI = UWP.TypedEventHandlerIStorageQueryResultBase_Any

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0xfe79f855, Data2: 0x2f40, Data3: 0x5b88, Data4: ( 0xa0,0xc3,0x4c,0x04,0x2a,0x05,0xdd,0x05 ))// fe79f855-2f40-5b88-a0c3-4c042a05dd05
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectable {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectableVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectableVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectableWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.DispatcherQueue? = __IMPL_Windows_System.DispatcherQueueBridge.from(abi: ComPtr($1))
            let args: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectableWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectableBridge>
public class TypedEventHandlerDispatcherQueue_Any: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectable }

    open func Invoke(_ sender: UWP.DispatcherQueue?, _ args: Any?) throws {
        let argsWrapper = __ABI_.AnyWrapper(args)
        let _args = try! argsWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), _args))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectableBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.DispatcherQueue?, Any?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue_IInspectable
    internal typealias SwiftABI = UWP.TypedEventHandlerDispatcherQueue_Any

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xb58b5e24, Data2: 0xe1c6, Data3: 0x528e, Data4: ( 0x9d,0x99,0x07,0xec,0x88,0x29,0xde,0xa5 ))// b58b5e24-e1c6-528e-9d99-07ec8829dea5
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.DispatcherQueue? = __IMPL_Windows_System.DispatcherQueueBridge.from(abi: ComPtr($1))
            let args: UWP.DispatcherQueueShutdownStartingEventArgs? = __IMPL_Windows_System.DispatcherQueueShutdownStartingEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgsBridge>
public class TypedEventHandlerDispatcherQueue_DispatcherQueueShutdownStartingEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgs }

    open func Invoke(_ sender: UWP.DispatcherQueue?, _ args: UWP.DispatcherQueueShutdownStartingEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.DispatcherQueue?, UWP.DispatcherQueueShutdownStartingEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueue___x_ABI_CWindows__CSystem__CDispatcherQueueShutdownStartingEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerDispatcherQueue_DispatcherQueueShutdownStartingEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0x8b5644c8, Data2: 0x8b57, Data3: 0x50ce, Data4: ( 0x89,0x33,0x7a,0xb2,0xcc,0x5a,0x14,0xef ))// 8b5644c8-8b57-50ce-8933-7ab2cc5a14ef
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectable {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectableVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectableVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectableWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.DispatcherQueueTimer? = __IMPL_Windows_System.DispatcherQueueTimerBridge.from(abi: ComPtr($1))
            let args: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectableWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectableBridge>
public class TypedEventHandlerDispatcherQueueTimer_Any: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectable }

    open func Invoke(_ sender: UWP.DispatcherQueueTimer?, _ args: Any?) throws {
        let argsWrapper = __ABI_.AnyWrapper(args)
        let _args = try! argsWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), _args))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectableBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.DispatcherQueueTimer?, Any?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CDispatcherQueueTimer_IInspectable
    internal typealias SwiftABI = UWP.TypedEventHandlerDispatcherQueueTimer_Any

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0xf155e0ff, Data2: 0xdbb5, Data3: 0x5c34, Data4: ( 0xac,0x0c,0x7e,0x29,0x1e,0x33,0x00,0xab ))// f155e0ff-dbb5-5c34-ac0c-7e291e3300ab
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectable {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectableVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectableVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectableWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.UserWatcher? = __IMPL_Windows_System.UserWatcherBridge.from(abi: ComPtr($1))
            let args: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectableWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectableBridge>
public class TypedEventHandlerUserWatcher_Any: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectable }

    open func Invoke(_ sender: UWP.UserWatcher?, _ args: Any?) throws {
        let argsWrapper = __ABI_.AnyWrapper(args)
        let _args = try! argsWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), _args))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectableBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.UserWatcher?, Any?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher_IInspectable
    internal typealias SwiftABI = UWP.TypedEventHandlerUserWatcher_Any

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x9ec3d9d5, Data2: 0xb413, Data3: 0x51df, Data4: ( 0x8c,0x64,0x64,0x0e,0x33,0x56,0xe3,0x51 ))// 9ec3d9d5-b413-51df-8c64-640e3356e351
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.UserWatcher? = __IMPL_Windows_System.UserWatcherBridge.from(abi: ComPtr($1))
            let args: UWP.UserAuthenticationStatusChangingEventArgs? = __IMPL_Windows_System.UserAuthenticationStatusChangingEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgsBridge>
public class TypedEventHandlerUserWatcher_UserAuthenticationStatusChangingEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgs }

    open func Invoke(_ sender: UWP.UserWatcher?, _ args: UWP.UserAuthenticationStatusChangingEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.UserWatcher?, UWP.UserAuthenticationStatusChangingEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserAuthenticationStatusChangingEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerUserWatcher_UserAuthenticationStatusChangingEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xeb9d0454, Data2: 0x25db, Data3: 0x5620, Data4: ( 0x98,0xb8,0xbe,0x4c,0x5d,0x0d,0xbc,0x67 ))// eb9d0454-25db-5620-98b8-be4c5d0dbc67
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.UserWatcher? = __IMPL_Windows_System.UserWatcherBridge.from(abi: ComPtr($1))
            let args: UWP.UserChangedEventArgs? = __IMPL_Windows_System.UserChangedEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgsBridge>
public class TypedEventHandlerUserWatcher_UserChangedEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgs }

    open func Invoke(_ sender: UWP.UserWatcher?, _ args: UWP.UserChangedEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.UserWatcher?, UWP.UserChangedEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CSystem__CUserWatcher___x_ABI_CWindows__CSystem__CUserChangedEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerUserWatcher_UserChangedEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionCapabilities_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0x6e8cc6f4, Data2: 0x6cf5, Data3: 0x5994, Data4: ( 0x94,0x47,0x72,0x61,0x71,0x23,0x6e,0xa8 ))// 6e8cc6f4-6cf5-5994-9447-726171236ea8
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionCapabilities_IInspectable {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionCapabilities_IInspectableVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionCapabilities_IInspectableVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionCapabilities_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionCapabilities_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionCapabilities_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionCapabilities_IInspectableWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionCapabilities_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CompositionCapabilities? = __IMPL_Windows_UI_Composition.CompositionCapabilitiesBridge.from(abi: ComPtr($1))
            let args: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionCapabilities_IInspectableWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionCapabilities_IInspectableBridge>
public class TypedEventHandlerCompositionCapabilities_Any: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionCapabilities_IInspectable }

    open func Invoke(_ sender: UWP.CompositionCapabilities?, _ args: Any?) throws {
        let argsWrapper = __ABI_.AnyWrapper(args)
        let _args = try! argsWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionCapabilities_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), _args))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionCapabilities_IInspectableBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CompositionCapabilities?, Any?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionCapabilities_IInspectable
    internal typealias SwiftABI = UWP.TypedEventHandlerCompositionCapabilities_Any

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionGraphicsDevice___x_ABI_CWindows__CUI__CComposition__CRenderingDeviceReplacedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x259b32be, Data2: 0xbd06, Data3: 0x53c2, Data4: ( 0xbd,0x51,0x89,0xe8,0xe0,0xf9,0xe2,0x39 ))// 259b32be-bd06-53c2-bd51-89e8e0f9e239
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionGraphicsDevice___x_ABI_CWindows__CUI__CComposition__CRenderingDeviceReplacedEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionGraphicsDevice___x_ABI_CWindows__CUI__CComposition__CRenderingDeviceReplacedEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionGraphicsDevice___x_ABI_CWindows__CUI__CComposition__CRenderingDeviceReplacedEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionGraphicsDevice___x_ABI_CWindows__CUI__CComposition__CRenderingDeviceReplacedEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionGraphicsDevice___x_ABI_CWindows__CUI__CComposition__CRenderingDeviceReplacedEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionGraphicsDevice___x_ABI_CWindows__CUI__CComposition__CRenderingDeviceReplacedEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionGraphicsDevice___x_ABI_CWindows__CUI__CComposition__CRenderingDeviceReplacedEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionGraphicsDevice___x_ABI_CWindows__CUI__CComposition__CRenderingDeviceReplacedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CompositionGraphicsDevice? = __IMPL_Windows_UI_Composition.CompositionGraphicsDeviceBridge.from(abi: ComPtr($1))
            let args: UWP.RenderingDeviceReplacedEventArgs? = __IMPL_Windows_UI_Composition.RenderingDeviceReplacedEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionGraphicsDevice___x_ABI_CWindows__CUI__CComposition__CRenderingDeviceReplacedEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionGraphicsDevice___x_ABI_CWindows__CUI__CComposition__CRenderingDeviceReplacedEventArgsBridge>
public class TypedEventHandlerCompositionGraphicsDevice_RenderingDeviceReplacedEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionGraphicsDevice___x_ABI_CWindows__CUI__CComposition__CRenderingDeviceReplacedEventArgs }

    open func Invoke(_ sender: UWP.CompositionGraphicsDevice?, _ args: UWP.RenderingDeviceReplacedEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionGraphicsDevice___x_ABI_CWindows__CUI__CComposition__CRenderingDeviceReplacedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionGraphicsDevice___x_ABI_CWindows__CUI__CComposition__CRenderingDeviceReplacedEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CompositionGraphicsDevice?, UWP.RenderingDeviceReplacedEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CComposition__CCompositionGraphicsDevice___x_ABI_CWindows__CUI__CComposition__CRenderingDeviceReplacedEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerCompositionGraphicsDevice_RenderingDeviceReplacedEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x136dff0d, Data2: 0xf7e8, Data3: 0x5153, Data4: ( 0xb3,0x1c,0x86,0x39,0x0c,0x70,0x18,0x80 ))// 136dff0d-f7e8-5153-b31c-86390c701880
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CoreDispatcher? = __IMPL_Windows_UI_Core.CoreDispatcherBridge.from(abi: ComPtr($1))
            let args: UWP.AcceleratorKeyEventArgs? = __IMPL_Windows_UI_Core.AcceleratorKeyEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgsBridge>
public class TypedEventHandlerCoreDispatcher_AcceleratorKeyEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgs }

    open func Invoke(_ sender: UWP.CoreDispatcher?, _ args: UWP.AcceleratorKeyEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CoreDispatcher?, UWP.AcceleratorKeyEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreDispatcher___x_ABI_CWindows__CUI__CCore__CAcceleratorKeyEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerCoreDispatcher_AcceleratorKeyEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0x6368ae3d, Data2: 0x52d4, Data3: 0x5290, Data4: ( 0xb9,0x36,0x71,0x7a,0x9a,0xcf,0x5b,0xea ))// 6368ae3d-52d4-5290-b936-717a9acf5bea
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectable {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectableVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectableVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectableWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CoreWindow? = __IMPL_Windows_UI_Core.CoreWindowBridge.from(abi: ComPtr($1))
            let args: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectableWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectableBridge>
public class TypedEventHandlerCoreWindow_Any: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectable }

    open func Invoke(_ sender: UWP.CoreWindow?, _ args: Any?) throws {
        let argsWrapper = __ABI_.AnyWrapper(args)
        let _args = try! argsWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), _args))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectableBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CoreWindow?, Any?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow_IInspectable
    internal typealias SwiftABI = UWP.TypedEventHandlerCoreWindow_Any

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x54db5c04, Data2: 0x81f7, Data3: 0x5f46, Data4: ( 0x9f,0xb8,0xe4,0x9b,0xee,0xc7,0x0a,0x24 ))// 54db5c04-81f7-5f46-9fb8-e49beec70a24
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CoreWindow? = __IMPL_Windows_UI_Core.CoreWindowBridge.from(abi: ComPtr($1))
            let args: UWP.AutomationProviderRequestedEventArgs? = __IMPL_Windows_UI_Core.AutomationProviderRequestedEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgsBridge>
public class TypedEventHandlerCoreWindow_AutomationProviderRequestedEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgs }

    open func Invoke(_ sender: UWP.CoreWindow?, _ args: UWP.AutomationProviderRequestedEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CoreWindow?, UWP.AutomationProviderRequestedEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CAutomationProviderRequestedEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerCoreWindow_AutomationProviderRequestedEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x73f846a8, Data2: 0x0af6, Data3: 0x5872, Data4: ( 0x8f,0xb8,0xae,0x2f,0x56,0xd8,0x55,0x3e ))// 73f846a8-0af6-5872-8fb8-ae2f56d8553e
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CoreWindow? = __IMPL_Windows_UI_Core.CoreWindowBridge.from(abi: ComPtr($1))
            let args: UWP.CharacterReceivedEventArgs? = __IMPL_Windows_UI_Core.CharacterReceivedEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgsBridge>
public class TypedEventHandlerCoreWindow_CharacterReceivedEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs }

    open func Invoke(_ sender: UWP.CoreWindow?, _ args: UWP.CharacterReceivedEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CoreWindow?, UWP.CharacterReceivedEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCharacterReceivedEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerCoreWindow_CharacterReceivedEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x21a652d2, Data2: 0xbfe2, Data3: 0x5b2e, Data4: ( 0xa2,0xab,0xca,0x45,0x25,0x3b,0xe8,0xb0 ))// 21a652d2-bfe2-5b2e-a2ab-ca45253be8b0
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CoreWindow? = __IMPL_Windows_UI_Core.CoreWindowBridge.from(abi: ComPtr($1))
            let args: UWP.ClosestInteractiveBoundsRequestedEventArgs? = __IMPL_Windows_UI_Core.ClosestInteractiveBoundsRequestedEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgsBridge>
public class TypedEventHandlerCoreWindow_ClosestInteractiveBoundsRequestedEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs }

    open func Invoke(_ sender: UWP.CoreWindow?, _ args: UWP.ClosestInteractiveBoundsRequestedEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CoreWindow?, UWP.ClosestInteractiveBoundsRequestedEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CClosestInteractiveBoundsRequestedEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerCoreWindow_ClosestInteractiveBoundsRequestedEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xd08e4f66, Data2: 0x3457, Data3: 0x57f2, Data4: ( 0xba,0x0c,0xcb,0x34,0x71,0x33,0xbd,0x15 ))// d08e4f66-3457-57f2-ba0c-cb347133bd15
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CoreWindow? = __IMPL_Windows_UI_Core.CoreWindowBridge.from(abi: ComPtr($1))
            let args: UWP.CoreWindowEventArgs? = __IMPL_Windows_UI_Core.CoreWindowEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgsBridge>
public class TypedEventHandlerCoreWindow_CoreWindowEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs }

    open func Invoke(_ sender: UWP.CoreWindow?, _ args: UWP.CoreWindowEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CoreWindow?, UWP.CoreWindowEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CCoreWindowEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerCoreWindow_CoreWindowEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xe230a64a, Data2: 0x506a, Data3: 0x59c3, Data4: ( 0xbb,0x61,0x55,0x59,0xff,0x99,0x56,0x63 ))// e230a64a-506a-59c3-bb61-5559ff995663
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CoreWindow? = __IMPL_Windows_UI_Core.CoreWindowBridge.from(abi: ComPtr($1))
            let args: UWP.InputEnabledEventArgs? = __IMPL_Windows_UI_Core.InputEnabledEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgsBridge>
public class TypedEventHandlerCoreWindow_InputEnabledEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs }

    open func Invoke(_ sender: UWP.CoreWindow?, _ args: UWP.InputEnabledEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CoreWindow?, UWP.InputEnabledEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CInputEnabledEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerCoreWindow_InputEnabledEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xa3ec0774, Data2: 0x55ac, Data3: 0x5d61, Data4: ( 0x82,0x32,0xb3,0x5c,0x5d,0x35,0xc9,0x3c ))// a3ec0774-55ac-5d61-8232-b35c5d35c93c
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CoreWindow? = __IMPL_Windows_UI_Core.CoreWindowBridge.from(abi: ComPtr($1))
            let args: UWP.KeyEventArgs? = __IMPL_Windows_UI_Core.KeyEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgsBridge>
public class TypedEventHandlerCoreWindow_KeyEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgs }

    open func Invoke(_ sender: UWP.CoreWindow?, _ args: UWP.KeyEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CoreWindow?, UWP.KeyEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CKeyEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerCoreWindow_KeyEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x420e1bb6, Data2: 0xe99d, Data3: 0x5e64, Data4: ( 0x8e,0x25,0x07,0x46,0x7e,0x3c,0xae,0x9e ))// 420e1bb6-e99d-5e64-8e25-07467e3cae9e
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CoreWindow? = __IMPL_Windows_UI_Core.CoreWindowBridge.from(abi: ComPtr($1))
            let args: UWP.PointerEventArgs? = __IMPL_Windows_UI_Core.PointerEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgsBridge>
public class TypedEventHandlerCoreWindow_PointerEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgs }

    open func Invoke(_ sender: UWP.CoreWindow?, _ args: UWP.PointerEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CoreWindow?, UWP.PointerEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CPointerEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerCoreWindow_PointerEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x197654c9, Data2: 0x0c47, Data3: 0x502b, Data4: ( 0x9a,0xa1,0x0d,0xeb,0x03,0xed,0x97,0x02 ))// 197654c9-0c47-502b-9aa1-0deb03ed9702
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CoreWindow? = __IMPL_Windows_UI_Core.CoreWindowBridge.from(abi: ComPtr($1))
            let args: UWP.TouchHitTestingEventArgs? = __IMPL_Windows_UI_Core.TouchHitTestingEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgsBridge>
public class TypedEventHandlerCoreWindow_TouchHitTestingEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs }

    open func Invoke(_ sender: UWP.CoreWindow?, _ args: UWP.TouchHitTestingEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CoreWindow?, UWP.TouchHitTestingEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CTouchHitTestingEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerCoreWindow_TouchHitTestingEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x14b7f692, Data2: 0x5583, Data3: 0x52a1, Data4: ( 0xaa,0x42,0xfc,0x18,0x43,0xc0,0xf7,0x48 ))// 14b7f692-5583-52a1-aa42-fc1843c0f748
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CoreWindow? = __IMPL_Windows_UI_Core.CoreWindowBridge.from(abi: ComPtr($1))
            let args: UWP.VisibilityChangedEventArgs? = __IMPL_Windows_UI_Core.VisibilityChangedEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgsBridge>
public class TypedEventHandlerCoreWindow_VisibilityChangedEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgs }

    open func Invoke(_ sender: UWP.CoreWindow?, _ args: UWP.VisibilityChangedEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CoreWindow?, UWP.VisibilityChangedEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CVisibilityChangedEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerCoreWindow_VisibilityChangedEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x26a73b35, Data2: 0xa7f9, Data3: 0x52db, Data4: ( 0x88,0xd6,0x15,0x72,0x6d,0xeb,0x25,0x23 ))// 26a73b35-a7f9-52db-88d6-15726deb2523
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CoreWindow? = __IMPL_Windows_UI_Core.CoreWindowBridge.from(abi: ComPtr($1))
            let args: UWP.WindowActivatedEventArgs? = __IMPL_Windows_UI_Core.WindowActivatedEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgsBridge>
public class TypedEventHandlerCoreWindow_WindowActivatedEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgs }

    open func Invoke(_ sender: UWP.CoreWindow?, _ args: UWP.WindowActivatedEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CoreWindow?, UWP.WindowActivatedEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowActivatedEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerCoreWindow_WindowActivatedEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x318dbb67, Data2: 0x4089, Data3: 0x5690, Data4: ( 0x90,0x40,0x1d,0x45,0x4f,0xb2,0xf6,0x86 ))// 318dbb67-4089-5690-9040-1d454fb2f686
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CoreWindow? = __IMPL_Windows_UI_Core.CoreWindowBridge.from(abi: ComPtr($1))
            let args: UWP.WindowSizeChangedEventArgs? = __IMPL_Windows_UI_Core.WindowSizeChangedEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgsBridge>
public class TypedEventHandlerCoreWindow_WindowSizeChangedEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgs }

    open func Invoke(_ sender: UWP.CoreWindow?, _ args: UWP.WindowSizeChangedEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CoreWindow?, UWP.WindowSizeChangedEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CCoreWindow___x_ABI_CWindows__CUI__CCore__CWindowSizeChangedEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerCoreWindow_WindowSizeChangedEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x29742d27, Data2: 0x177d, Data3: 0x54c3, Data4: ( 0xb9,0x74,0x61,0x6f,0xc4,0x5a,0x2b,0x0c ))// 29742d27-177d-54c3-b974-616fc45a2b0c
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.AnyICorePointerRedirector? = __ABI_Windows_UI_Core.ICorePointerRedirectorWrapper.unwrapFrom(abi: ComPtr($1))
            let args: UWP.PointerEventArgs? = __IMPL_Windows_UI_Core.PointerEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgsBridge>
public class TypedEventHandlerICorePointerRedirector_PointerEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgs }

    open func Invoke(_ sender: UWP.AnyICorePointerRedirector?, _ args: UWP.PointerEventArgs?) throws {
        let senderWrapper = __ABI_Windows_UI_Core.ICorePointerRedirectorWrapper(sender)
        let _sender = try! senderWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, _sender, RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.AnyICorePointerRedirector?, UWP.PointerEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CCore__CICorePointerRedirector___x_ABI_CWindows__CUI__CCore__CPointerEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerICorePointerRedirector_PointerEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0xef53b467, Data2: 0xc472, Data3: 0x5b59, Data4: ( 0xa8,0x27,0x38,0xad,0xc3,0xa9,0xd3,0x26 ))// ef53b467-c472-5b59-a827-38adc3a9d326
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext_IInspectable {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext_IInspectableVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext_IInspectableVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext_IInspectableWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CoreTextEditContext? = __IMPL_Windows_UI_Text_Core.CoreTextEditContextBridge.from(abi: ComPtr($1))
            let args: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext_IInspectableWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext_IInspectableBridge>
public class TypedEventHandlerCoreTextEditContext_Any: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext_IInspectable }

    open func Invoke(_ sender: UWP.CoreTextEditContext?, _ args: Any?) throws {
        let argsWrapper = __ABI_.AnyWrapper(args)
        let _args = try! argsWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), _args))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext_IInspectableBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CoreTextEditContext?, Any?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext_IInspectable
    internal typealias SwiftABI = UWP.TypedEventHandlerCoreTextEditContext_Any

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionCompletedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xa2d7059e, Data2: 0x68ed, Data3: 0x5260, Data4: ( 0x8d,0x8e,0x1d,0xcf,0x3d,0x25,0xd6,0x63 ))// a2d7059e-68ed-5260-8d8e-1dcf3d25d663
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionCompletedEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionCompletedEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionCompletedEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionCompletedEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionCompletedEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionCompletedEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionCompletedEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionCompletedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CoreTextEditContext? = __IMPL_Windows_UI_Text_Core.CoreTextEditContextBridge.from(abi: ComPtr($1))
            let args: UWP.CoreTextCompositionCompletedEventArgs? = __IMPL_Windows_UI_Text_Core.CoreTextCompositionCompletedEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionCompletedEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionCompletedEventArgsBridge>
public class TypedEventHandlerCoreTextEditContext_CoreTextCompositionCompletedEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionCompletedEventArgs }

    open func Invoke(_ sender: UWP.CoreTextEditContext?, _ args: UWP.CoreTextCompositionCompletedEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionCompletedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionCompletedEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CoreTextEditContext?, UWP.CoreTextCompositionCompletedEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionCompletedEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerCoreTextEditContext_CoreTextCompositionCompletedEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionStartedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xe671d625, Data2: 0x5b59, Data3: 0x57e6, Data4: ( 0xa9,0x2e,0x40,0x00,0x95,0x07,0x85,0x3a ))// e671d625-5b59-57e6-a92e-40009507853a
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionStartedEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionStartedEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionStartedEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionStartedEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionStartedEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionStartedEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionStartedEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionStartedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CoreTextEditContext? = __IMPL_Windows_UI_Text_Core.CoreTextEditContextBridge.from(abi: ComPtr($1))
            let args: UWP.CoreTextCompositionStartedEventArgs? = __IMPL_Windows_UI_Text_Core.CoreTextCompositionStartedEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionStartedEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionStartedEventArgsBridge>
public class TypedEventHandlerCoreTextEditContext_CoreTextCompositionStartedEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionStartedEventArgs }

    open func Invoke(_ sender: UWP.CoreTextEditContext?, _ args: UWP.CoreTextCompositionStartedEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionStartedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionStartedEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CoreTextEditContext?, UWP.CoreTextCompositionStartedEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextCompositionStartedEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerCoreTextEditContext_CoreTextCompositionStartedEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextFormatUpdatingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x3e4ef599, Data2: 0x4cc2, Data3: 0x5248, Data4: ( 0xbf,0x2d,0x13,0xf1,0x76,0x13,0xb0,0xa6 ))// 3e4ef599-4cc2-5248-bf2d-13f17613b0a6
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextFormatUpdatingEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextFormatUpdatingEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextFormatUpdatingEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextFormatUpdatingEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextFormatUpdatingEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextFormatUpdatingEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextFormatUpdatingEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextFormatUpdatingEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CoreTextEditContext? = __IMPL_Windows_UI_Text_Core.CoreTextEditContextBridge.from(abi: ComPtr($1))
            let args: UWP.CoreTextFormatUpdatingEventArgs? = __IMPL_Windows_UI_Text_Core.CoreTextFormatUpdatingEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextFormatUpdatingEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextFormatUpdatingEventArgsBridge>
public class TypedEventHandlerCoreTextEditContext_CoreTextFormatUpdatingEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextFormatUpdatingEventArgs }

    open func Invoke(_ sender: UWP.CoreTextEditContext?, _ args: UWP.CoreTextFormatUpdatingEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextFormatUpdatingEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextFormatUpdatingEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CoreTextEditContext?, UWP.CoreTextFormatUpdatingEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextFormatUpdatingEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerCoreTextEditContext_CoreTextFormatUpdatingEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextLayoutRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x1a5f5596, Data2: 0x561c, Data3: 0x57f6, Data4: ( 0xa4,0xff,0xcb,0x85,0x01,0x3c,0x65,0x44 ))// 1a5f5596-561c-57f6-a4ff-cb85013c6544
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextLayoutRequestedEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextLayoutRequestedEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextLayoutRequestedEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextLayoutRequestedEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextLayoutRequestedEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextLayoutRequestedEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextLayoutRequestedEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextLayoutRequestedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CoreTextEditContext? = __IMPL_Windows_UI_Text_Core.CoreTextEditContextBridge.from(abi: ComPtr($1))
            let args: UWP.CoreTextLayoutRequestedEventArgs? = __IMPL_Windows_UI_Text_Core.CoreTextLayoutRequestedEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextLayoutRequestedEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextLayoutRequestedEventArgsBridge>
public class TypedEventHandlerCoreTextEditContext_CoreTextLayoutRequestedEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextLayoutRequestedEventArgs }

    open func Invoke(_ sender: UWP.CoreTextEditContext?, _ args: UWP.CoreTextLayoutRequestedEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextLayoutRequestedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextLayoutRequestedEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CoreTextEditContext?, UWP.CoreTextLayoutRequestedEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextLayoutRequestedEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerCoreTextEditContext_CoreTextLayoutRequestedEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x882e51e1, Data2: 0xf4a3, Data3: 0x57e5, Data4: ( 0x93,0x92,0x6a,0x8c,0x38,0x57,0x91,0x81 ))// 882e51e1-f4a3-57e5-9392-6a8c38579181
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionRequestedEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionRequestedEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionRequestedEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionRequestedEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionRequestedEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionRequestedEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionRequestedEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionRequestedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CoreTextEditContext? = __IMPL_Windows_UI_Text_Core.CoreTextEditContextBridge.from(abi: ComPtr($1))
            let args: UWP.CoreTextSelectionRequestedEventArgs? = __IMPL_Windows_UI_Text_Core.CoreTextSelectionRequestedEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionRequestedEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionRequestedEventArgsBridge>
public class TypedEventHandlerCoreTextEditContext_CoreTextSelectionRequestedEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionRequestedEventArgs }

    open func Invoke(_ sender: UWP.CoreTextEditContext?, _ args: UWP.CoreTextSelectionRequestedEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionRequestedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionRequestedEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CoreTextEditContext?, UWP.CoreTextSelectionRequestedEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionRequestedEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerCoreTextEditContext_CoreTextSelectionRequestedEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionUpdatingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x6b140a40, Data2: 0xd461, Data3: 0x555a, Data4: ( 0xb6,0xeb,0x5d,0xbb,0x8e,0x21,0x01,0xe5 ))// 6b140a40-d461-555a-b6eb-5dbb8e2101e5
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionUpdatingEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionUpdatingEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionUpdatingEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionUpdatingEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionUpdatingEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionUpdatingEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionUpdatingEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionUpdatingEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CoreTextEditContext? = __IMPL_Windows_UI_Text_Core.CoreTextEditContextBridge.from(abi: ComPtr($1))
            let args: UWP.CoreTextSelectionUpdatingEventArgs? = __IMPL_Windows_UI_Text_Core.CoreTextSelectionUpdatingEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionUpdatingEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionUpdatingEventArgsBridge>
public class TypedEventHandlerCoreTextEditContext_CoreTextSelectionUpdatingEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionUpdatingEventArgs }

    open func Invoke(_ sender: UWP.CoreTextEditContext?, _ args: UWP.CoreTextSelectionUpdatingEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionUpdatingEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionUpdatingEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CoreTextEditContext?, UWP.CoreTextSelectionUpdatingEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextSelectionUpdatingEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerCoreTextEditContext_CoreTextSelectionUpdatingEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextRequestedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xc7e08176, Data2: 0x4134, Data3: 0x50b7, Data4: ( 0xbc,0x73,0x72,0x9e,0x9f,0x9a,0xd2,0x2a ))// c7e08176-4134-50b7-bc73-729e9f9ad22a
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextRequestedEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextRequestedEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextRequestedEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextRequestedEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextRequestedEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextRequestedEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextRequestedEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextRequestedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CoreTextEditContext? = __IMPL_Windows_UI_Text_Core.CoreTextEditContextBridge.from(abi: ComPtr($1))
            let args: UWP.CoreTextTextRequestedEventArgs? = __IMPL_Windows_UI_Text_Core.CoreTextTextRequestedEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextRequestedEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextRequestedEventArgsBridge>
public class TypedEventHandlerCoreTextEditContext_CoreTextTextRequestedEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextRequestedEventArgs }

    open func Invoke(_ sender: UWP.CoreTextEditContext?, _ args: UWP.CoreTextTextRequestedEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextRequestedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextRequestedEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CoreTextEditContext?, UWP.CoreTextTextRequestedEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextRequestedEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerCoreTextEditContext_CoreTextTextRequestedEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextUpdatingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xfd896a84, Data2: 0xdf7c, Data3: 0x50d5, Data4: ( 0x91,0x67,0x58,0xf6,0x16,0xbd,0xdb,0x6e ))// fd896a84-df7c-50d5-9167-58f616bddb6e
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextUpdatingEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextUpdatingEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextUpdatingEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextUpdatingEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextUpdatingEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextUpdatingEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextUpdatingEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextUpdatingEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CoreTextEditContext? = __IMPL_Windows_UI_Text_Core.CoreTextEditContextBridge.from(abi: ComPtr($1))
            let args: UWP.CoreTextTextUpdatingEventArgs? = __IMPL_Windows_UI_Text_Core.CoreTextTextUpdatingEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextUpdatingEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextUpdatingEventArgsBridge>
public class TypedEventHandlerCoreTextEditContext_CoreTextTextUpdatingEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextUpdatingEventArgs }

    open func Invoke(_ sender: UWP.CoreTextEditContext?, _ args: UWP.CoreTextTextUpdatingEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextUpdatingEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextUpdatingEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CoreTextEditContext?, UWP.CoreTextTextUpdatingEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextEditContext___x_ABI_CWindows__CUI__CText__CCore__CCoreTextTextUpdatingEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerCoreTextEditContext_CoreTextTextUpdatingEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextServicesManager_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0x112fb01d, Data2: 0x260a, Data3: 0x51c6, Data4: ( 0x91,0x98,0x5d,0xb3,0xe6,0xe9,0xef,0x3d ))// 112fb01d-260a-51c6-9198-5db3e6e9ef3d
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextServicesManager_IInspectable {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextServicesManager_IInspectableVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextServicesManager_IInspectableVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextServicesManager_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextServicesManager_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextServicesManager_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextServicesManager_IInspectableWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextServicesManager_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.CoreTextServicesManager? = __IMPL_Windows_UI_Text_Core.CoreTextServicesManagerBridge.from(abi: ComPtr($1))
            let args: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextServicesManager_IInspectableWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextServicesManager_IInspectableBridge>
public class TypedEventHandlerCoreTextServicesManager_Any: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextServicesManager_IInspectable }

    open func Invoke(_ sender: UWP.CoreTextServicesManager?, _ args: Any?) throws {
        let argsWrapper = __ABI_.AnyWrapper(args)
        let _args = try! argsWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextServicesManager_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), _args))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextServicesManager_IInspectableBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.CoreTextServicesManager?, Any?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CText__CCore__CCoreTextServicesManager_IInspectable
    internal typealias SwiftABI = UWP.TypedEventHandlerCoreTextServicesManager_Any

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings_IInspectable: WindowsFoundation.IID {
    .init(Data1: 0x2dbdba9d, Data2: 0x20da, Data3: 0x519d, Data4: ( 0x90,0x78,0x09,0xf8,0x35,0xbc,0x5b,0xc7 ))// 2dbdba9d-20da-519d-9078-09f835bc5bc7
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings_IInspectable {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings_IInspectableVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings_IInspectableVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings_IInspectableVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings_IInspectableWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings_IInspectableWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings_IInspectableWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings_IInspectableWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.UISettings? = __IMPL_Windows_UI_ViewManagement.UISettingsBridge.from(abi: ComPtr($1))
            let args: Any? = __ABI_.AnyWrapper.unwrapFrom(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings_IInspectableWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings_IInspectableBridge>
public class TypedEventHandlerUISettings_Any: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings_IInspectable }

    open func Invoke(_ sender: UWP.UISettings?, _ args: Any?) throws {
        let argsWrapper = __ABI_.AnyWrapper(args)
        let _args = try! argsWrapper?.toABI { $0 }
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings_IInspectable.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), _args))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings_IInspectableBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.UISettings?, Any?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings_IInspectable
    internal typealias SwiftABI = UWP.TypedEventHandlerUISettings_Any

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
private var IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings___x_ABI_CWindows__CUI__CViewManagement__CUISettingsAutoHideScrollBarsChangedEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x808aef30, Data2: 0x2660, Data3: 0x51b0, Data4: ( 0x9c,0x11,0xf7,0x5d,0xd4,0x20,0x06,0xb4 ))// 808aef30-2660-51b0-9c11-f75dd42006b4
}

internal extension WinRTDelegateBridge where CABI == __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings___x_ABI_CWindows__CUI__CViewManagement__CUISettingsAutoHideScrollBarsChangedEventArgs {
    static func makeAbi() -> CABI {
        let vtblPtr = withUnsafeMutablePointer(to: &UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings___x_ABI_CWindows__CUI__CViewManagement__CUISettingsAutoHideScrollBarsChangedEventArgsVTable) { $0 }
        return .init(lpVtbl:vtblPtr)
    }
}

internal var __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings___x_ABI_CWindows__CUI__CViewManagement__CUISettingsAutoHideScrollBarsChangedEventArgsVTable: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings___x_ABI_CWindows__CUI__CViewManagement__CUISettingsAutoHideScrollBarsChangedEventArgsVtbl = .init(
    QueryInterface: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings___x_ABI_CWindows__CUI__CViewManagement__CUISettingsAutoHideScrollBarsChangedEventArgsWrapper.queryInterface($0, $1, $2) },
    AddRef: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings___x_ABI_CWindows__CUI__CViewManagement__CUISettingsAutoHideScrollBarsChangedEventArgsWrapper.addRef($0) },
    Release: { __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings___x_ABI_CWindows__CUI__CViewManagement__CUISettingsAutoHideScrollBarsChangedEventArgsWrapper.release($0) },
    Invoke: {
        do {
            guard let __unwrapped__instance = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings___x_ABI_CWindows__CUI__CViewManagement__CUISettingsAutoHideScrollBarsChangedEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let sender: UWP.UISettings? = __IMPL_Windows_UI_ViewManagement.UISettingsBridge.from(abi: ComPtr($1))
            let args: UWP.UISettingsAutoHideScrollBarsChangedEventArgs? = __IMPL_Windows_UI_ViewManagement.UISettingsAutoHideScrollBarsChangedEventArgsBridge.from(abi: ComPtr($2))
            try __unwrapped__instance(sender, args)
            return S_OK
        } catch { return failWith(error: error) }
    }
)
typealias __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings___x_ABI_CWindows__CUI__CViewManagement__CUISettingsAutoHideScrollBarsChangedEventArgsWrapper = InterfaceWrapperBase<UWP.__x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings___x_ABI_CWindows__CUI__CViewManagement__CUISettingsAutoHideScrollBarsChangedEventArgsBridge>
public class TypedEventHandlerUISettings_UISettingsAutoHideScrollBarsChangedEventArgs: WindowsFoundation.IUnknown {
    override public class var IID: WindowsFoundation.IID { IID___x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings___x_ABI_CWindows__CUI__CViewManagement__CUISettingsAutoHideScrollBarsChangedEventArgs }

    open func Invoke(_ sender: UWP.UISettings?, _ args: UWP.UISettingsAutoHideScrollBarsChangedEventArgs?) throws {
        _ = try perform(as: __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings___x_ABI_CWindows__CUI__CViewManagement__CUISettingsAutoHideScrollBarsChangedEventArgs.self) { pThis in
            try CHECKED(pThis.pointee.lpVtbl.pointee.Invoke(pThis, RawPointer(sender), RawPointer(args)))
        }
    }

}

internal class __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings___x_ABI_CWindows__CUI__CViewManagement__CUISettingsAutoHideScrollBarsChangedEventArgsBridge : WinRTDelegateBridge {
    internal typealias Handler = WindowsFoundation.TypedEventHandler<UWP.UISettings?, UWP.UISettingsAutoHideScrollBarsChangedEventArgs?>
    internal typealias CABI = __x_ABI_C__FITypedEventHandler_2___x_ABI_CWindows__CUI__CViewManagement__CUISettings___x_ABI_CWindows__CUI__CViewManagement__CUISettingsAutoHideScrollBarsChangedEventArgs
    internal typealias SwiftABI = UWP.TypedEventHandlerUISettings_UISettingsAutoHideScrollBarsChangedEventArgs

    internal static func from(abi: ComPtr<CABI>?) -> Handler? {
        guard let abi = abi else { return nil }
        let _default = SwiftABI(abi)
        let handler: Handler = { (sender, args) in
            try _default.Invoke(sender, args)
        }
        return handler
    }
}
public extension EventSource where Handler == EventHandler<UnhandledErrorDetectedEventArgs?> {
    func invoke(_ sender: Any!, _ args: UWP.UnhandledErrorDetectedEventArgs!) throws {
        for handler in getInvocationList() {
            try handler(sender, args)
        }
    }
}

public extension EventSource where Handler == TypedEventHandler<IStorageQueryResultBase?, Any?> {
    func invoke(_ sender: UWP.AnyIStorageQueryResultBase!, _ args: Any!) throws {
        for handler in getInvocationList() {
            try handler(sender, args)
        }
    }
}

public extension EventSource where Handler == TypedEventHandler<CoreDispatcher?, AcceleratorKeyEventArgs?> {
    func invoke(_ sender: UWP.CoreDispatcher!, _ args: UWP.AcceleratorKeyEventArgs!) throws {
        for handler in getInvocationList() {
            try handler(sender, args)
        }
    }
}

public extension EventSource where Handler == TypedEventHandler<CoreWindow?, AutomationProviderRequestedEventArgs?> {
    func invoke(_ sender: UWP.CoreWindow!, _ args: UWP.AutomationProviderRequestedEventArgs!) throws {
        for handler in getInvocationList() {
            try handler(sender, args)
        }
    }
}

public extension EventSource where Handler == TypedEventHandler<CoreWindow?, CharacterReceivedEventArgs?> {
    func invoke(_ sender: UWP.CoreWindow!, _ args: UWP.CharacterReceivedEventArgs!) throws {
        for handler in getInvocationList() {
            try handler(sender, args)
        }
    }
}

public extension EventSource where Handler == TypedEventHandler<CoreWindow?, CoreWindowEventArgs?> {
    func invoke(_ sender: UWP.CoreWindow!, _ args: UWP.CoreWindowEventArgs!) throws {
        for handler in getInvocationList() {
            try handler(sender, args)
        }
    }
}

public extension EventSource where Handler == TypedEventHandler<CoreWindow?, InputEnabledEventArgs?> {
    func invoke(_ sender: UWP.CoreWindow!, _ args: UWP.InputEnabledEventArgs!) throws {
        for handler in getInvocationList() {
            try handler(sender, args)
        }
    }
}

public extension EventSource where Handler == TypedEventHandler<CoreWindow?, KeyEventArgs?> {
    func invoke(_ sender: UWP.CoreWindow!, _ args: UWP.KeyEventArgs!) throws {
        for handler in getInvocationList() {
            try handler(sender, args)
        }
    }
}

public extension EventSource where Handler == TypedEventHandler<CoreWindow?, PointerEventArgs?> {
    func invoke(_ sender: UWP.CoreWindow!, _ args: UWP.PointerEventArgs!) throws {
        for handler in getInvocationList() {
            try handler(sender, args)
        }
    }
}

public extension EventSource where Handler == TypedEventHandler<CoreWindow?, TouchHitTestingEventArgs?> {
    func invoke(_ sender: UWP.CoreWindow!, _ args: UWP.TouchHitTestingEventArgs!) throws {
        for handler in getInvocationList() {
            try handler(sender, args)
        }
    }
}

public extension EventSource where Handler == TypedEventHandler<CoreWindow?, VisibilityChangedEventArgs?> {
    func invoke(_ sender: UWP.CoreWindow!, _ args: UWP.VisibilityChangedEventArgs!) throws {
        for handler in getInvocationList() {
            try handler(sender, args)
        }
    }
}

public extension EventSource where Handler == TypedEventHandler<CoreWindow?, WindowActivatedEventArgs?> {
    func invoke(_ sender: UWP.CoreWindow!, _ args: UWP.WindowActivatedEventArgs!) throws {
        for handler in getInvocationList() {
            try handler(sender, args)
        }
    }
}

public extension EventSource where Handler == TypedEventHandler<CoreWindow?, WindowSizeChangedEventArgs?> {
    func invoke(_ sender: UWP.CoreWindow!, _ args: UWP.WindowSizeChangedEventArgs!) throws {
        for handler in getInvocationList() {
            try handler(sender, args)
        }
    }
}

public extension EventSource where Handler == TypedEventHandler<ICorePointerRedirector?, PointerEventArgs?> {
    func invoke(_ sender: UWP.AnyICorePointerRedirector!, _ args: UWP.PointerEventArgs!) throws {
        for handler in getInvocationList() {
            try handler(sender, args)
        }
    }
}

