// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

@_spi(WinRTInternal)
public enum __IMPL_Windows_Storage_Pickers {
    public enum FileExtensionVectorBridge: AbiBridge {
        public typealias SwiftProjection = FileExtensionVector
        public typealias CABI = __x_ABI_C__FIVector_1_HSTRING
        public static func from(abi: ComPtr<__x_ABI_C__FIVector_1_HSTRING>?) -> FileExtensionVector? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum FileOpenPickerBridge: AbiBridge {
        public typealias SwiftProjection = FileOpenPicker
        public typealias CABI = __x_ABI_CWindows_CStorage_CPickers_CIFileOpenPicker
        public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CPickers_CIFileOpenPicker>?) -> FileOpenPicker? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum FilePickerFileTypesOrderedMapBridge: AbiBridge {
        public typealias SwiftProjection = FilePickerFileTypesOrderedMap
        public typealias CABI = __x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRING
        public static func from(abi: ComPtr<__x_ABI_C__FIMap_2_HSTRING___x_ABI_C__FIVector_1_HSTRING>?) -> FilePickerFileTypesOrderedMap? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum FilePickerSelectedFilesArrayBridge: AbiBridge {
        public typealias SwiftProjection = FilePickerSelectedFilesArray
        public typealias CABI = __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFile
        public static func from(abi: ComPtr<__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStorageFile>?) -> FilePickerSelectedFilesArray? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum FileSavePickerBridge: AbiBridge {
        public typealias SwiftProjection = FileSavePicker
        public typealias CABI = __x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker
        public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CPickers_CIFileSavePicker>?) -> FileSavePicker? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

    public enum FolderPickerBridge: AbiBridge {
        public typealias SwiftProjection = FolderPicker
        public typealias CABI = __x_ABI_CWindows_CStorage_CPickers_CIFolderPicker
        public static func from(abi: ComPtr<__x_ABI_CWindows_CStorage_CPickers_CIFolderPicker>?) -> FolderPicker? {
            guard let abi = abi else { return nil }
            return .init(fromAbi: WindowsFoundation.IInspectable(abi))
        }
    }

}
@_spi(WinRTInternal)
public class FileExtensionVectorMaker: MakeFromAbi {
    public typealias SwiftType = FileExtensionVector
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return FileExtensionVector(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class FileOpenPickerMaker: MakeFromAbi {
    public typealias SwiftType = FileOpenPicker
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return FileOpenPicker(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class FilePickerFileTypesOrderedMapMaker: MakeFromAbi {
    public typealias SwiftType = FilePickerFileTypesOrderedMap
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return FilePickerFileTypesOrderedMap(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class FilePickerSelectedFilesArrayMaker: MakeFromAbi {
    public typealias SwiftType = FilePickerSelectedFilesArray
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return FilePickerSelectedFilesArray(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class FileSavePickerMaker: MakeFromAbi {
    public typealias SwiftType = FileSavePicker
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return FileSavePicker(fromAbi: abi)
    }
}
@_spi(WinRTInternal)
public class FolderPickerMaker: MakeFromAbi {
    public typealias SwiftType = FolderPicker
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        return FolderPicker(fromAbi: abi)
    }
}
