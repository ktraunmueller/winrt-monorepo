// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

private var IID___x_ABI_CWindows_CApplicationModel_CIAppDisplayInfo: WindowsFoundation.IID {
    .init(Data1: 0x1AEB1103, Data2: 0xE4D4, Data3: 0x41AA, Data4: ( 0xA4,0xF6,0xC4,0xA2,0x76,0xE7,0x9E,0xAC ))// 1AEB1103-E4D4-41AA-A4F6-C4A276E79EAC
}

private var IID___x_ABI_CWindows_CApplicationModel_CIAppInfo: WindowsFoundation.IID {
    .init(Data1: 0xCF7F59B3, Data2: 0x6A09, Data3: 0x4DE8, Data4: ( 0xA6,0xC0,0x57,0x92,0xD5,0x68,0x80,0xD1 ))// CF7F59B3-6A09-4DE8-A6C0-5792D56880D1
}

private var IID___x_ABI_CWindows_CApplicationModel_CIEnteredBackgroundEventArgs: WindowsFoundation.IID {
    .init(Data1: 0xF722DCC2, Data2: 0x9827, Data3: 0x403D, Data4: ( 0xAA,0xED,0xEC,0xCA,0x9A,0xC1,0x73,0x98 ))// F722DCC2-9827-403D-AAED-ECCA9AC17398
}

private var IID___x_ABI_CWindows_CApplicationModel_CILeavingBackgroundEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x39C6EC9A, Data2: 0xAE6E, Data3: 0x46F9, Data4: ( 0xA0,0x7A,0xCF,0xC2,0x3F,0x88,0x73,0x3E ))// 39C6EC9A-AE6E-46F9-A07A-CFC23F88733E
}

private var IID___x_ABI_CWindows_CApplicationModel_CISuspendingDeferral: WindowsFoundation.IID {
    .init(Data1: 0x59140509, Data2: 0x8BC9, Data3: 0x4EB4, Data4: ( 0xB6,0x36,0xDA,0xBD,0xC4,0xF4,0x6F,0x66 ))// 59140509-8BC9-4EB4-B636-DABDC4F46F66
}

private var IID___x_ABI_CWindows_CApplicationModel_CISuspendingEventArgs: WindowsFoundation.IID {
    .init(Data1: 0x96061C05, Data2: 0x2DBA, Data3: 0x4D08, Data4: ( 0xB0,0xBD,0x2B,0x30,0xA1,0x31,0xC6,0xAA ))// 96061C05-2DBA-4D08-B0BD-2B30A131C6AA
}

private var IID___x_ABI_CWindows_CApplicationModel_CISuspendingOperation: WindowsFoundation.IID {
    .init(Data1: 0x9DA4CA41, Data2: 0x20E1, Data3: 0x4E9B, Data4: ( 0x9F,0x65,0xA9,0xF4,0x35,0x34,0x0C,0x3A ))// 9DA4CA41-20E1-4E9B-9F65-A9F435340C3A
}

@_spi(WinRTInternal)
public enum __ABI_Windows_ApplicationModel {
    public class IAppDisplayInfo: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CApplicationModel_CIAppDisplayInfo }

        public func get_DisplayName() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CIAppDisplayInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayName(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_Description() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CIAppDisplayInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Description(pThis, &value))
            }
            return .init(from: value)
        }

        public func GetLogo(_ size: WindowsFoundation.Size) throws -> UWP.RandomAccessStreamReference? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CIAppDisplayInfo.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetLogo(pThis, .from(swift: size), &valueAbi))
                }
            }
            return __IMPL_Windows_Storage_Streams.RandomAccessStreamReferenceBridge.from(abi: value)
        }

    }

    public class IAppInfo: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CApplicationModel_CIAppInfo }

        public func get_Id() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CIAppInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Id(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_AppUserModelId() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CIAppInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_AppUserModelId(pThis, &value))
            }
            return .init(from: value)
        }

        public func get_DisplayInfo() throws -> UWP.AppDisplayInfo? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CIAppInfo.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_DisplayInfo(pThis, &valueAbi))
                }
            }
            return __IMPL_Windows_ApplicationModel.AppDisplayInfoBridge.from(abi: value)
        }

        public func get_PackageFamilyName() throws -> String {
            var value: HSTRING?
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CIAppInfo.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_PackageFamilyName(pThis, &value))
            }
            return .init(from: value)
        }

    }

    public class IEnteredBackgroundEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CApplicationModel_CIEnteredBackgroundEventArgs }

        open func GetDeferral() throws -> WindowsFoundation.Deferral? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CIEnteredBackgroundEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &valueAbi))
                }
            }
            return __IMPL_Windows_Foundation.DeferralBridge.from(abi: value)
        }

    }

    internal static var IEnteredBackgroundEventArgsVTable: __x_ABI_CWindows_CApplicationModel_CIEnteredBackgroundEventArgsVtbl = .init(
        QueryInterface: { IEnteredBackgroundEventArgsWrapper.queryInterface($0, $1, $2) },
        AddRef: { IEnteredBackgroundEventArgsWrapper.addRef($0) },
        Release: { IEnteredBackgroundEventArgsWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_ApplicationModel.IEnteredBackgroundEventArgsWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.ApplicationModel.IEnteredBackgroundEventArgs").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        GetDeferral: {
            do {
                guard let __unwrapped__instance = IEnteredBackgroundEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getDeferral()
                value?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias IEnteredBackgroundEventArgsWrapper = InterfaceWrapperBase<__IMPL_Windows_ApplicationModel.IEnteredBackgroundEventArgsBridge>
    public class ILeavingBackgroundEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CApplicationModel_CILeavingBackgroundEventArgs }

        open func GetDeferral() throws -> WindowsFoundation.Deferral? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CILeavingBackgroundEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &valueAbi))
                }
            }
            return __IMPL_Windows_Foundation.DeferralBridge.from(abi: value)
        }

    }

    internal static var ILeavingBackgroundEventArgsVTable: __x_ABI_CWindows_CApplicationModel_CILeavingBackgroundEventArgsVtbl = .init(
        QueryInterface: { ILeavingBackgroundEventArgsWrapper.queryInterface($0, $1, $2) },
        AddRef: { ILeavingBackgroundEventArgsWrapper.addRef($0) },
        Release: { ILeavingBackgroundEventArgsWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_ApplicationModel.ILeavingBackgroundEventArgsWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.ApplicationModel.ILeavingBackgroundEventArgs").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        GetDeferral: {
            do {
                guard let __unwrapped__instance = ILeavingBackgroundEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let value = try __unwrapped__instance.getDeferral()
                value?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias ILeavingBackgroundEventArgsWrapper = InterfaceWrapperBase<__IMPL_Windows_ApplicationModel.ILeavingBackgroundEventArgsBridge>
    public class ISuspendingDeferral: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CApplicationModel_CISuspendingDeferral }

        open func Complete() throws {
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CISuspendingDeferral.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.Complete(pThis))
            }
        }

    }

    internal static var ISuspendingDeferralVTable: __x_ABI_CWindows_CApplicationModel_CISuspendingDeferralVtbl = .init(
        QueryInterface: { ISuspendingDeferralWrapper.queryInterface($0, $1, $2) },
        AddRef: { ISuspendingDeferralWrapper.addRef($0) },
        Release: { ISuspendingDeferralWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_ApplicationModel.ISuspendingDeferralWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.ApplicationModel.ISuspendingDeferral").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        Complete: {
            do {
                guard let __unwrapped__instance = ISuspendingDeferralWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                try __unwrapped__instance.complete()
                return S_OK
            } catch { return failWith(error: error) }
        }
    )

    public typealias ISuspendingDeferralWrapper = InterfaceWrapperBase<__IMPL_Windows_ApplicationModel.ISuspendingDeferralBridge>
    public class ISuspendingEventArgs: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CApplicationModel_CISuspendingEventArgs }

        open func get_SuspendingOperation() throws -> UWP.SuspendingOperation? {
            let (value) = try ComPtrs.initialize { valueAbi in
                _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CISuspendingEventArgs.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.get_SuspendingOperation(pThis, &valueAbi))
                }
            }
            return __IMPL_Windows_ApplicationModel.SuspendingOperationBridge.from(abi: value)
        }

    }

    internal static var ISuspendingEventArgsVTable: __x_ABI_CWindows_CApplicationModel_CISuspendingEventArgsVtbl = .init(
        QueryInterface: { ISuspendingEventArgsWrapper.queryInterface($0, $1, $2) },
        AddRef: { ISuspendingEventArgsWrapper.addRef($0) },
        Release: { ISuspendingEventArgsWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_ApplicationModel.ISuspendingEventArgsWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.ApplicationModel.ISuspendingEventArgs").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        get_SuspendingOperation: {
            guard let __unwrapped__instance = ISuspendingEventArgsWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.suspendingOperation
            value?.copyTo($1)
            return S_OK
        }
    )

    public typealias ISuspendingEventArgsWrapper = InterfaceWrapperBase<__IMPL_Windows_ApplicationModel.ISuspendingEventArgsBridge>
    public class ISuspendingOperation: WindowsFoundation.IInspectable {
        override public class var IID: WindowsFoundation.IID { IID___x_ABI_CWindows_CApplicationModel_CISuspendingOperation }

        open func GetDeferral() throws -> UWP.SuspendingDeferral? {
            let (deferral) = try ComPtrs.initialize { deferralAbi in
                _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CISuspendingOperation.self) { pThis in
                    try CHECKED(pThis.pointee.lpVtbl.pointee.GetDeferral(pThis, &deferralAbi))
                }
            }
            return __IMPL_Windows_ApplicationModel.SuspendingDeferralBridge.from(abi: deferral)
        }

        open func get_Deadline() throws -> WindowsFoundation.DateTime {
            var value: __x_ABI_CWindows_CFoundation_CDateTime = .init()
            _ = try perform(as: __x_ABI_CWindows_CApplicationModel_CISuspendingOperation.self) { pThis in
                try CHECKED(pThis.pointee.lpVtbl.pointee.get_Deadline(pThis, &value))
            }
            return .from(abi: value)
        }

    }

    internal static var ISuspendingOperationVTable: __x_ABI_CWindows_CApplicationModel_CISuspendingOperationVtbl = .init(
        QueryInterface: { ISuspendingOperationWrapper.queryInterface($0, $1, $2) },
        AddRef: { ISuspendingOperationWrapper.addRef($0) },
        Release: { ISuspendingOperationWrapper.release($0) },
        GetIids: {
            let size = MemoryLayout<WindowsFoundation.IID>.size
            let iids = CoTaskMemAlloc(UInt64(size) * 3).assumingMemoryBound(to: WindowsFoundation.IID.self)
            iids[0] = IUnknown.IID
            iids[1] = IInspectable.IID
            iids[2] = __ABI_Windows_ApplicationModel.ISuspendingOperationWrapper.IID
            $1!.pointee = 3
            $2!.pointee = iids
            return S_OK
        },

        GetRuntimeClassName: {
            _ = $0
            let hstring = try! HString("Windows.ApplicationModel.ISuspendingOperation").detach()
            $1!.pointee = hstring
            return S_OK
        },

        GetTrustLevel: {
            _ = $0
            $1!.pointee = TrustLevel(rawValue: 0)
            return S_OK
        },

        GetDeferral: {
            do {
                guard let __unwrapped__instance = ISuspendingOperationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
                let deferral = try __unwrapped__instance.getDeferral()
                deferral?.copyTo($1)
                return S_OK
            } catch { return failWith(error: error) }
        },

        get_Deadline: {
            guard let __unwrapped__instance = ISuspendingOperationWrapper.tryUnwrapFrom(raw: $0) else { return E_INVALIDARG }
            let value = __unwrapped__instance.deadline
            $1?.initialize(to: .from(swift: value))
            return S_OK
        }
    )

    public typealias ISuspendingOperationWrapper = InterfaceWrapperBase<__IMPL_Windows_ApplicationModel.ISuspendingOperationBridge>
}
