// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1
// swiftlint:disable all
import Foundation
@_spi(WinRTInternal) @_spi(WinRTImplements) import WindowsFoundation
import CWinRT

@_spi(WinRTInternal)
public enum __IMPL_Windows_Graphics {
    public enum IGeometrySource2DBridge : AbiInterfaceBridge {
        public typealias CABI = __x_ABI_CWindows_CGraphics_CIGeometrySource2D
        public typealias SwiftABI = __ABI_Windows_Graphics.IGeometrySource2D
        public typealias SwiftProjection = AnyIGeometrySource2D
        public static func from(abi: ComPtr<CABI>?) -> SwiftProjection? {
            guard let abi = abi else { return nil }
            return IGeometrySource2DImpl(abi)
        }

        public static func makeAbi() -> CABI {
            let vtblPtr = withUnsafeMutablePointer(to: &__ABI_Windows_Graphics.IGeometrySource2DVTable) { $0 }
            return .init(lpVtbl: vtblPtr)
        }
    }

    fileprivate class IGeometrySource2DImpl: IGeometrySource2D, WinRTAbiImpl {
        fileprivate typealias Bridge = IGeometrySource2DBridge
        fileprivate let _default: Bridge.SwiftABI
        fileprivate var thisPtr: WindowsFoundation.IInspectable { _default }
        fileprivate init(_ fromAbi: ComPtr<Bridge.CABI>) {
            _default = Bridge.SwiftABI(fromAbi)
        }

    }

}
@_spi(WinRTInternal)
extension DisplayAdapterId: WinRTBridgeable {
    public typealias ABI = __x_ABI_CWindows_CGraphics_CDisplayAdapterId
    public static func from(abi: ABI) -> Self {
        .init(lowPart: abi.LowPart, highPart: abi.HighPart)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

@_spi(WinRTInternal)
extension PointInt32: WinRTBridgeable {
    public typealias ABI = __x_ABI_CWindows_CGraphics_CPointInt32
    public static func from(abi: ABI) -> Self {
        .init(x: abi.X, y: abi.Y)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

@_spi(WinRTInternal)
extension RectInt32: WinRTBridgeable {
    public typealias ABI = __x_ABI_CWindows_CGraphics_CRectInt32
    public static func from(abi: ABI) -> Self {
        .init(x: abi.X, y: abi.Y, width: abi.Width, height: abi.Height)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

@_spi(WinRTInternal)
extension SizeInt32: WinRTBridgeable {
    public typealias ABI = __x_ABI_CWindows_CGraphics_CSizeInt32
    public static func from(abi: ABI) -> Self {
        .init(width: abi.Width, height: abi.Height)
    }
    public func toABI() -> ABI {
        .from(swift: self)
    }
}

@_spi(WinRTInternal)
public class IGeometrySource2DMaker: MakeFromAbi {
    public typealias SwiftType = AnyIGeometrySource2D
    public static func from(abi: WindowsFoundation.IInspectable) -> SwiftType {
        let swiftAbi: __ABI_Windows_Graphics.IGeometrySource2D = try! abi.QueryInterface()
        return __IMPL_Windows_Graphics.IGeometrySource2DBridge.from(abi: RawPointer(swiftAbi))!
    }
}
